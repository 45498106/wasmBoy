'use strict';(function(O,y){"object"===typeof exports&&"undefined"!==typeof module?y(exports):"function"===typeof define&&define.amd?define(["exports"],y):y(O.WasmBoy={})})(this,function(O){function y(a){return a.data?a.data:a}function T(a){for(var b=1;b<arguments.length;b++){var c=null!=arguments[b]?arguments[b]:{},d=Object.keys(c);"function"===typeof Object.getOwnPropertySymbols&&(d=d.concat(Object.getOwnPropertySymbols(c).filter(function(a){return Object.getOwnPropertyDescriptor(c,a).enumerable})));
d.forEach(function(b){var d=c[b];b in a?Object.defineProperty(a,b,{value:d,enumerable:!0,configurable:!0,writable:!0}):a[b]=d})}return a}function U(a,b){return b={exports:{}},a(b,b.exports),b.exports}function Y(){let a=Object.assign({},ka);a.wasmboyMemory.wasmBoyInternalState=this.internalState;a.wasmboyMemory.wasmBoyPaletteMemory=this.paletteMemory;a.wasmboyMemory.gameBoyMemory=this.gameboyMemory;a.wasmboyMemory.cartridgeRam=this.cartridgeRam;a.date=Date.now();a.isAuto=!1;this.saveStateCallback&&
this.saveStateCallback(a);return a}function P(){if(!this.internalState)return null;const a=Y.bind(this)(),b=Object.keys(a.wasmboyMemory);for(let c=0;c<b.length;c++)a.wasmboyMemory[b[c]]=Array.prototype.slice.call(a.wasmboyMemory[b[c]]);a.isAuto=!0;localStorage.setItem(this.WASMBOY_UNLOAD_STORAGE,JSON.stringify({header:Array.prototype.slice.call(this.cartridgeHeader),cartridgeRam:Array.prototype.slice.call(this.cartridgeRam),saveState:a}));return null}function la(){return(async()=>{var a=localStorage.getItem(this.WASMBOY_UNLOAD_STORAGE);
if(a){var b=JSON.parse(a);localStorage.removeItem(this.WASMBOY_UNLOAD_STORAGE);a=new Uint8Array(b.header);const c=new Uint8Array(b.cartridgeRam);if(b=b.saveState){const a=Object.keys(b.wasmboyMemory);for(let c=0;c<a.length;c++)b.wasmboyMemory[a[c]]=new Uint8Array(b.wasmboyMemory[a[c]])}await this.saveCartridgeRam(a,c);await this.saveState(a,b)}})()}function ma(){window.addEventListener("beforeunload",()=>{P.bind(this)()},!1);window.addEventListener("unload",()=>{P.bind(this)()},!1);window.addEventListener("pagehide",
()=>{P.bind(this)()},!1);document.addEventListener("visibilitychange",()=>{"hidden"===document.visibilityState&&P.bind(this)()});return la.bind(this)()}function V(){var a=function(){return Math.random().toString(36).replace(/[^a-z]+/g,"").substr(2,10)};return(""+a()+a()).slice()}function q(a){var b=Object.assign({},na);b.ID=V();b.KEY_CODE=a;return b}function r(a,b,c){var d=Object.assign({},Z);d.ID=V();d.JOYSTICK=Object.assign({},Z.JOYSTICK);a||0===a?d.BUTTON_ID=a:void 0!==b&&void 0!==c&&(d.JOYSTICK.AXIS_ID=
b,d.JOYSTICK.IS_POSITIVE=c);return d}function oa(a,b,c,d){var e=Object.assign({},pa);e.ID=V();e.ELEMENT=a;e.TYPE=b;e.DIRECTION=c;e.EVENT_HANDLER=d;a=e.ELEMENT.getBoundingClientRect();e.BOUNDING_RECT=a;a=function(a){e.EVENT_HANDLER&&e.EVENT_HANDLER(a)};e.ELEMENT.addEventListener("touchstart",a);e.ELEMENT.addEventListener("touchmove",a);e.ELEMENT.addEventListener("touchend",a);e.ELEMENT.addEventListener("mousedown",a);e.ELEMENT.addEventListener("mouseup",a);return e}function qa(a,b,c){b||(b=W());return{workerId:c,
messageId:b,message:a}}function ra(a,b){this.loadedAndStarted=this.ready=!1;const c=async()=>{const c=[sa(a,b),this._instantiateWorkers()];!this.options.headless&&z.getLoadedCartridgeMemoryState().RAM&&c.push(z.saveCartridgeRam());let d;await Promise.all(c).then((a)=>{d=a[0]});this.coreType=(await this.worker.postMessage({type:p.INSTANTIATE_WASM})).message.type;return d},d=async(a)=>{await z.clearMemory();await z.loadCartridgeRom(a);this.loadedROM=a;await this.worker.postMessage({type:p.CONFIG,config:[0,
this.options.isGbcEnabled?1:0,this.options.audioBatchProcessing?1:0,this.options.graphicsBatchProcessing?1:0,this.options.timersBatchProcessing?1:0,this.options.graphicsDisableScanlineRendering?1:0,this.options.audioAccumulateSamples?1:0,this.options.tileRendering?1:0,this.options.tileCaching?1:0],options:{gameboyFrameRate:this.options.gameboyFrameRate,headless:this.options.headless,isAudioEnabled:this.options.isAudioEnabled,frameSkip:this.options.frameSkip}})};return(async()=>{await this.pause();
let a=await c();this.options.headless?(await z.initialize(this.options.headless,this.options.saveStateCallback),await d(a)):(await Promise.all([Q.initialize(this.canvasElement,this.options.updateGraphicsCallback),D.initialize(this.options.updateAudioCallback),A.initialize(),z.initialize(this.options.headless,this.options.saveStateCallback)]),await d(a),await z.loadCartridgeRam());this.ready=!0;if(this.options.onReady)this.options.onReady()})()}function aa(){if(this.paused)return!0;let a=!1;this.frameSkip&&
0<this.frameSkip&&(this.frameSkipCounter++,this.frameSkipCounter<this.frameSkip?a=!0:this.frameSkipCounter=0);a||Q.renderFrame();A.updateController();this.renderId=J(()=>{aa.call(this)})}function R(a,b,c){for(var d=0;d<c.length;d++)a.setUint8(b+d,c.charCodeAt(d))}function ta(a){a=y(a);if(a.message)switch(a.message.type){case p.UPDATED:this.fps=a.message.fps;break;case p.CRASHED:(async()=>{await this.pause();console.log("Wasmboy Crashed!");let a=await ba("getProgramCounter");var c=await ca("GAMEBOY_INTERNAL_MEMORY_LOCATION");
c=await da(c+a,c+a+1);console.log(`Program Counter: 0x${a.toString(16)}`);console.log(`Opcode: 0x${c[0].toString(16)}`)})()}}const p={CONNECT:"CONNECT",INSTANTIATE_WASM:"INSTANTIATE_WASM",CLEAR_MEMORY:"CLEAR_MEMORY",CLEAR_MEMORY_DONE:"CLEAR_MEMORY_DONE",GET_MEMORY:"GET_MEMORY",SET_MEMORY:"SET_MEMORY",SET_MEMORY_DONE:"SET_MEMORY_DONE",GET_CONSTANTS:"GET_CONSTANTS",GET_CONSTANTS_DONE:"GET_CONSTANTS_DONE",CONFIG:"CONFIG",RESET_AUDIO_QUEUE:"RESET_AUDIO_QUEUE",PLAY:"PLAY",PAUSE:"PAUSE",UPDATED:"UPDATED",
CRASHED:"CRASHED",SET_JOYPAD_STATE:"SET_JOYPAD_STATE",AUDIO_LATENCY:"AUDIO_LATENCY",RUN_WASM_EXPORT:"RUN_WASM_EXPORT",GET_WASM_MEMORY_SECTION:"GET_WASM_MEMORY_SECTION",GET_WASM_CONSTANT:"GET_WASM_CONSTANT"};class ua{constructor(){this.imageDataArray=this.canvasImageData=this.canvasContext=this.canvasElement=this.frameQueueRenderPromise=this.frameQueue=this.updateGraphicsCallback=this.worker=void 0;this.imageDataArrayChanged=!1}initialize(a,b){this.updateGraphicsCallback=b;this.frameQueue=[];return(async()=>
{this.canvasElement=a;this.canvasContext=this.canvasElement.getContext("2d");this.canvasElement.width=160;this.canvasElement.height=144;this.canvasImageData=this.canvasContext.createImageData(160,144);this.canvasElement.style="\n        image-rendering: optimizeSpeed;\n        image-rendering: -moz-crisp-edges;\n        image-rendering: -webkit-optimize-contrast;\n        image-rendering: -o-crisp-edges;\n        image-rendering: pixelated;\n        -ms-interpolation-mode: nearest-neighbor;\n      ";
this.canvasContext.clearRect(0,0,this.canvasElement.width,this.canvasElement.height);this.worker&&await this.worker.postMessage({type:p.GET_CONSTANTS})})()}setWorker(a){this.worker=a;this.worker.addMessageListener((a)=>{a=y(a);switch(a.message.type){case p.UPDATED:this.imageDataArray=new Uint8ClampedArray(a.message.imageDataArrayBuffer),this.imageDataArrayChanged=!0}})}renderFrame(){if(this.imageDataArrayChanged){this.imageDataArrayChanged=!1;this.updateGraphicsCallback&&this.updateGraphicsCallback(this.imageDataArray);
for(let a=0;a<this.imageDataArray.length;a++)this.canvasImageData.data[a]=this.imageDataArray[a];this.canvasContext.clearRect(0,0,160,144);this.canvasContext.putImageData(this.canvasImageData,0,0)}}}const Q=new ua;class va{constructor(){this.audioPlaytime=this.audioBuffer=this.audioContext=this.updateAudioCallback=this.worker=void 0;this.audioSources=[];this.averageTimeStretchFps=[];this.WASMBOY_SOUND_OUTPUT_LOCATION=0}initialize(a){return(async()=>{this.updateAudioCallback=a;this.averageTimeStretchFps=
[];0<this.audioSources.length&&this.cancelAllAudio();this.audioSources=[];this._createAudioContextIfNone();return this.worker.postMessage({type:p.GET_CONSTANTS})})()}resumeAudioContext(){this._createAudioContextIfNone();"suspended"===this.audioContext.state&&(this.audioContext.resume(),this.audioPlaytime=this.audioContext.currentTime)}resetTimeStretch(){this.averageTimeStretchFps=[]}setWorker(a){this.worker=a;this.worker.addMessageListener((a)=>{a=y(a);switch(a.message.type){case p.UPDATED:this.playAudio(a.message.fps,
a.message.allowFastSpeedStretching,a.message.numberOfSamples,a.message.leftChannel,a.message.rightChannel),a=0,this.audioContext.currentTime&&0<this.audioContext.currentTime&&(a=this.audioPlaytime-this.audioContext.currentTime),this.worker.postMessage({type:p.AUDIO_LATENCY,latency:a})}})}playAudio(a,b,c,d,e){let f=a||60;const k=Math.abs(a-this.averageTimeStretchFps[this.averageTimeStretchFps.length-1]);k&&15<=k&&this.resetTimeStretch();this.averageTimeStretchFps.push(a);171<this.averageTimeStretchFps.length&&
this.averageTimeStretchFps.shift();57<=this.averageTimeStretchFps.length&&(f=this.averageTimeStretchFps.reduce((a,b)=>a+b),f=Math.floor(f/this.averageTimeStretchFps.length));a=1;if(57>f||b)a*=f/60,0>=a&&(a=.01);this.audioBuffer=this.audioContext.createBuffer(2,c,48E3);this.audioBuffer.copyToChannel?(this.audioBuffer.copyToChannel(new Float32Array(d),0,0),this.audioBuffer.copyToChannel(new Float32Array(e),1,0)):(this.audioBuffer.getChannelData(0).set(new Float32Array(d)),this.audioBuffer.getChannelData(1).set(new Float32Array(e)));
b=this.audioContext.createBufferSource();b.buffer=this.audioBuffer;b.playbackRate.setValueAtTime(a,this.audioContext.currentTime);d=b;this.updateAudioCallback&&(e=this.updateAudioCallback(this.audioContext,b))&&(d=e);d.connect(this.audioContext.destination);d=this.audioContext.currentTime;e=d+.1;this.audioPlaytime=this.audioPlaytime||e;this.audioPlaytime<d&&(this.cancelAllAudio(),this.audioPlaytime=e);b.start(this.audioPlaytime);for(this.audioPlaytime+=c/(48E3*a);this.audioSources[this.audioSources.length-
1]&&this.audioSources[this.audioSources.length-1].playtime<=this.audioPlaytime;)this.audioSources[this.audioSources.length-1].source.stop(),this.audioSources.pop();this.audioSources.push({source:b,playTime:this.audioPlaytime,fps:f});setTimeout(()=>{this.audioSources.shift()},this.audioPlaytime-this.audioContext.currentTime+500)}cancelAllAudio(a){if(this.audioContext){for(let b=0;b<this.audioSources.length;b++)(a||this.audioSources[b].playTime>this.audioPlaytime)&&this.audioSources[b].source.stop();
this.audioPlaytime=this.audioContext.currentTime+.1}}_createAudioContextIfNone(){this.audioContext||(this.audioContext=new (window.AudioContext||window.webkitAudioContext))}}const D=new va;var ea="undefined"!==typeof window?window:"undefined"!==typeof global?global:"undefined"!==typeof self?self:{},wa=U(function(a){(function(){function b(a){return new Promise(function(b,c){a.onsuccess=function(){b(a.result)};a.onerror=function(){c(a.error)}})}function c(a,c,d){var e,f=new Promise(function(f,k){e=
a[c].apply(a,d);b(e).then(f,k)});f.request=e;return f}function d(a,b,d){var e=c(a,b,d);return e.then(function(a){if(a)return new h(a,e.request)})}function e(a,b,c){c.forEach(function(c){Object.defineProperty(a.prototype,c,{get:function(){return this[b][c]},set:function(a){this[b][c]=a}})})}function f(a,b,d,e){e.forEach(function(e){e in d.prototype&&(a.prototype[e]=function(){return c(this[b],e,arguments)})})}function k(a,b,c,d){d.forEach(function(d){d in c.prototype&&(a.prototype[d]=function(){return this[b][d].apply(this[b],
arguments)})})}function n(a,b,c,e){e.forEach(function(e){e in c.prototype&&(a.prototype[e]=function(){return d(this[b],e,arguments)})})}function l(a){this._index=a}function h(a,b){this._cursor=a;this._request=b}function g(a){this._store=a}function m(a){this._tx=a;this.complete=new Promise(function(b,c){a.oncomplete=function(){b()};a.onerror=function(){c(a.error)};a.onabort=function(){c(a.error)}})}function x(a,b,c){this._db=a;this.oldVersion=b;this.transaction=new m(c)}function w(a){this._db=a}e(l,
"_index",["name","keyPath","multiEntry","unique"]);f(l,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]);n(l,"_index",IDBIndex,["openCursor","openKeyCursor"]);e(h,"_cursor",["direction","key","primaryKey","value"]);f(h,"_cursor",IDBCursor,["update","delete"]);["advance","continue","continuePrimaryKey"].forEach(function(a){a in IDBCursor.prototype&&(h.prototype[a]=function(){var c=this,d=arguments;return Promise.resolve().then(function(){c._cursor[a].apply(c._cursor,d);return b(c._request).then(function(a){if(a)return new h(a,
c._request)})})})});g.prototype.createIndex=function(){return new l(this._store.createIndex.apply(this._store,arguments))};g.prototype.index=function(){return new l(this._store.index.apply(this._store,arguments))};e(g,"_store",["name","keyPath","indexNames","autoIncrement"]);f(g,"_store",IDBObjectStore,"put add delete clear get getAll getKey getAllKeys count".split(" "));n(g,"_store",IDBObjectStore,["openCursor","openKeyCursor"]);k(g,"_store",IDBObjectStore,["deleteIndex"]);m.prototype.objectStore=
function(){return new g(this._tx.objectStore.apply(this._tx,arguments))};e(m,"_tx",["objectStoreNames","mode"]);k(m,"_tx",IDBTransaction,["abort"]);x.prototype.createObjectStore=function(){return new g(this._db.createObjectStore.apply(this._db,arguments))};e(x,"_db",["name","version","objectStoreNames"]);k(x,"_db",IDBDatabase,["deleteObjectStore","close"]);w.prototype.transaction=function(){return new m(this._db.transaction.apply(this._db,arguments))};e(w,"_db",["name","version","objectStoreNames"]);
k(w,"_db",IDBDatabase,["close"]);["openCursor","openKeyCursor"].forEach(function(a){[g,l].forEach(function(b){a in b.prototype&&(b.prototype[a.replace("open","iterate")]=function(){var b=Array.prototype.slice.call(arguments),c=b[b.length-1],d=this._store||this._index,e=d[a].apply(d,b.slice(0,-1));e.onsuccess=function(){c(e.result)}})})});[l,g].forEach(function(a){a.prototype.getAll||(a.prototype.getAll=function(a,b){var c=this,d=[];return new Promise(function(e){c.iterateCursor(a,function(a){a?(d.push(a.value),
void 0!==b&&d.length==b?e(d):a.continue()):e(d)})})})});a.exports={open:function(a,b,d){a=c(indexedDB,"open",[a,b]);var e=a.request;e&&(e.onupgradeneeded=function(a){d&&d(new x(e.result,a.oldVersion,e.transaction))});return a.then(function(a){return new w(a)})},delete:function(a){return c(indexedDB,"deleteDatabase",[a])}};a.exports.default=a.exports})()}),F=U(function(a){a.exports="undefined"!=typeof indexedDB?wa:{open:function(){return Promise.reject("IDB requires a browser environment")},delete:function(){return Promise.reject("IDB requires a browser environment")}}}),
G=!1;if("undefined"!==typeof window){const a=F.open("wasmboy",1,(a)=>{a.createObjectStore("keyval")});G={get(b){return a.then((a)=>a.transaction("keyval").objectStore("keyval").get(b))},set(b,c){return a.then((a)=>{a=a.transaction("keyval","readwrite");a.objectStore("keyval").put(c,b);return a.complete})},delete(b){return a.then((a)=>{a=a.transaction("keyval","readwrite");a.objectStore("keyval").delete(b);return a.complete})},clear(){return a.then((a)=>{a=a.transaction("keyval","readwrite");a.objectStore("keyval").clear();
return a.complete})},keys(){return a.then((a)=>{a=a.transaction("keyval");const b=[],d=a.objectStore("keyval");(d.iterateKeyCursor||d.iterateCursor).call(d,(a)=>{a&&(b.push(a.key),a.continue())});return a.complete.then(()=>b)})}}}const H=G,ka={wasmboyMemory:{wasmBoyInternalState:[],wasmBoyPaletteMemory:[],gameBoyMemory:[],cartridgeRam:[]},date:void 0,isAuto:void 0};class xa{constructor(){this.saveStateCallback=this.worker=void 0;this.loadedCartridgeMemoryState={ROM:!1,RAM:!1};this.internalState=this.paletteMemory=
this.gameboyMemory=this.cartridgeRam=this.cartridgeHeader=this.cartridgeRom=void 0;this.WASMBOY_UNLOAD_STORAGE="WASMBOY_UNLOAD_STORAGE";this.WASMBOY_PALETTE_MEMORY_LOCATION=this.WASMBOY_PALETTE_MEMORY_SIZE=this.WASMBOY_INTERNAL_MEMORY_LOCATION=this.WASMBOY_INTERNAL_MEMORY_SIZE=this.WASMBOY_INTERNAL_STATE_LOCATION=this.WASMBOY_INTERNAL_STATE_SIZE=this.WASMBOY_GAME_RAM_BANKS_LOCATION=this.WASMBOY_GAME_BYTES_LOCATION=0}initialize(a,b){return(async()=>{a?(this.saveStateCallback=b,await this._initializeConstants()):
(this.saveStateCallback=b,await this._initializeConstants(),await ma.call(this))})()}setWorker(a){this.worker=a;this.worker.addMessageListener((a)=>{a=y(a);switch(a.message.type){case p.UPDATED:{const b=Object.keys(a.message);delete b.type;b.includes("CARTRIDGE_ROM")&&(this.cartridgeRom=new Uint8Array(a.message.CARTRIDGE_ROM));b.includes("CARTRIDGE_RAM")&&(this.cartridgeRam=new Uint8Array(a.message.CARTRIDGE_RAM));b.includes("GAMEBOY_MEMORY")&&(this.gameboyMemory=new Uint8Array(a.message.GAMEBOY_MEMORY));
b.includes("PALETTE_MEMORY")&&(this.paletteMemory=new Uint8Array(a.message.PALETTE_MEMORY));b.includes("INTERNAL_STATE")&&(this.internalState=new Uint8Array(a.message.INTERNAL_STATE))}}})}getLoadedCartridgeMemoryState(){return this.loadedCartridgeMemoryState}clearMemory(){return this.worker.postMessage({type:p.CLEAR_MEMORY}).then((a)=>{this.loadedCartridgeMemoryState.ROM=!1;this.loadedCartridgeMemoryState.RAM=!1;this.internalState=this.paletteMemory=this.gameboyMemory=this.cartridgeRam=this.cartridgeHeader=
this.cartridgeRom=void 0})}loadCartridgeRom(a){return(async()=>{const b={};b.CARTRIDGE_ROM=a.buffer;await this.worker.postMessage(T({type:p.SET_MEMORY},b)).then((a)=>{this.loadedCartridgeMemoryState.ROM=!0});await this.worker.postMessage({type:p.GET_MEMORY,memoryTypes:["CARTRIDGE_ROM","CARTRIDGE_HEADER"]}).then((a)=>{a=y(a);this.cartridgeRom=new Uint8Array(a.message.CARTRIDGE_ROM);this.cartridgeHeader=new Uint8Array(a.message.CARTRIDGE_HEADER)})})()}saveCartridgeRam(a,b){return(async()=>{let c,d;
a&&b?(c=a,d=b):(c=this.cartridgeHeader,d=this.cartridgeRam);if(!c||!d)throw Error("Error parsing the cartridgeRam or cartridge header");let e=await H.get(c);e||(e={});e.cartridgeRam=d;await H.set(c,e)})()}loadCartridgeRam(){return(async()=>{var a=this.cartridgeHeader;if(!a)throw Error("Error parsing the cartridge header");const b=await H.get(a);b&&b.cartridgeRam&&(a={},a.CARTRIDGE_RAM=b.cartridgeRam.buffer,await this.worker.postMessage(T({type:p.SET_MEMORY},a)).then((a)=>{this.loadedCartridgeMemoryState.RAM=
!0;this.cartridgeRam=b.cartridgeRam}))})()}saveState(a,b){return(async()=>{let c,d;a&&b?(c=b,d=a):(c=Y.call(this),d=this.cartridgeHeader);if(!d)throw Error("Error parsing the cartridge header");let e=await H.get(d);e||(e={});e.saveStates||(e.saveStates=[]);e.saveStates.push(c);await H.set(d,e);return c})()}loadState(a){return(async()=>{var b=this.cartridgeHeader;if(!b)throw Error("Error getting the cartridge header");if(!a){b=await H.get(b);if(!b||!b.saveStates)throw Error("No Save State passed, and no cartridge object found");
saverState=b.saveStates[0]}b={};b.CARTRIDGE_RAM=a.wasmboyMemory.cartridgeRam.buffer;b.GAMEBOY_MEMORY=a.wasmboyMemory.gameBoyMemory.buffer;b.PALETTE_MEMORY=a.wasmboyMemory.wasmBoyPaletteMemory.buffer;b.INTERNAL_STATE=a.wasmboyMemory.wasmBoyInternalState.buffer;await this.worker.postMessage(T({type:p.SET_MEMORY},b),[b.CARTRIDGE_RAM,b.GAMEBOY_MEMORY,b.PALETTE_MEMORY,b.INTERNAL_STATE]);await this.worker.postMessage({type:p.GET_MEMORY,memoryTypes:["CARTRIDGE_RAM","GAMEBOY_MEMORY","PALETTE_MEMORY","INTERNAL_STATE"]}).then((a)=>
{a=y(a);this.cartridgeRam=a.message.CARTRIDGE_RAM;this.gameboyMemory=a.message.GAMEBOY_MEMORY;this.paletteMemory=a.message.PALETTE_MEMORY;this.internalState=a.message.INTERNAL_STATE})})()}getCartridgeObject(){return H.get(this.cartridgeHeader)}getCartridgeInfo(){return this.loadedCartridgeMemoryState.ROM?(async()=>{const a={};a.header=this.cartridgeHeader;a.ROM=this.cartridgeRom;a.RAM=this.cartridgeRam;a.nintendoLogo=a.ROM.slice(260,308);a.title=a.ROM.slice(308,324);a.titleAsString=String.fromCharCode.apply(null,
a.title);a.manufacturerCode=a.ROM.slice(319,323);a.CGBFlag=a.ROM[323];a.newLicenseeCode=a.ROM.slice(324,326);a.SGBFlag=a.ROM[326];a.cartridgeType=a.ROM[327];a.ROMSize=a.ROM[328];a.RAMSize=a.ROM[329];a.destinationCode=a.ROM[330];a.oldLicenseeCode=a.ROM[331];a.maskROMVersionNumber=a.ROM[332];a.headerChecksum=a.ROM[333];a.globalChecksum=a.ROM.slice(334,336);return a})():Promise.reject("No ROM has been loaded")}_initializeConstants(){return this.worker.postMessage({type:p.GET_CONSTANTS}).then((a)=>{const b=
y(a);Object.keys(this).forEach((a)=>{void 0!==b.message[a]&&(this[a]=b.message[a])})})}}const z=new xa;var na={ID:void 0,ACTIVE:!1,KEY_CODE:void 0},Z={ID:void 0,ACTIVE:!1,BUTTON_ID:void 0,JOYSTICK:{AXIS_ID:void 0,IS_POSITIVE:void 0}},pa={ID:void 0,ACTIVE:!1,ELEMENT:void 0,TYPE:void 0,DIRECTION:void 0,EVENT_HANDLER:void 0,BOUNDING_RECT:void 0},fa={UP:{KEYBOARD:[],GAMEPAD:[],TOUCHPAD:[]},RIGHT:{KEYBOARD:[],GAMEPAD:[],TOUCHPAD:[]},DOWN:{KEYBOARD:[],GAMEPAD:[],TOUCHPAD:[]},LEFT:{KEYBOARD:[],GAMEPAD:[],
TOUCHPAD:[]},A:{KEYBOARD:[],GAMEPAD:[],TOUCHPAD:[]},B:{KEYBOARD:[],GAMEPAD:[],TOUCHPAD:[]},SELECT:{KEYBOARD:[],GAMEPAD:[],TOUCHPAD:[]},START:{KEYBOARD:[],GAMEPAD:[],TOUCHPAD:[]}},g=Object.assign({},fa);g.UP.KEYBOARD.push(q(38));g.UP.KEYBOARD.push(q(87));g.UP.KEYBOARD.push(q(104));g.UP.GAMEPAD.push(r(12));g.UP.GAMEPAD.push(r(!1,1,!1));g.UP.GAMEPAD.push(r(!1,3,!1));g.RIGHT.KEYBOARD.push(q(39));g.RIGHT.KEYBOARD.push(q(68));g.RIGHT.KEYBOARD.push(q(102));g.RIGHT.GAMEPAD.push(r(15));g.RIGHT.GAMEPAD.push(r(!1,
0,!0));g.RIGHT.GAMEPAD.push(r(!1,2,!0));g.DOWN.KEYBOARD.push(q(40));g.DOWN.KEYBOARD.push(q(83));g.DOWN.KEYBOARD.push(q(101));g.DOWN.KEYBOARD.push(q(98));g.DOWN.GAMEPAD.push(r(13));g.DOWN.GAMEPAD.push(r(!1,1,!0));g.DOWN.GAMEPAD.push(r(!1,3,!0));g.LEFT.KEYBOARD.push(q(37));g.LEFT.KEYBOARD.push(q(65));g.LEFT.KEYBOARD.push(q(100));g.LEFT.GAMEPAD.push(r(14));g.LEFT.GAMEPAD.push(r(!1,0,!1));g.LEFT.GAMEPAD.push(r(!1,2,!1));g.A.KEYBOARD.push(q(88));g.A.KEYBOARD.push(q(186));g.A.KEYBOARD.push(q(103));g.A.GAMEPAD.push(r(0));
g.A.GAMEPAD.push(r(1));g.B.KEYBOARD.push(q(90));g.B.KEYBOARD.push(q(27));g.B.KEYBOARD.push(q(222));g.B.KEYBOARD.push(q(8));g.B.KEYBOARD.push(q(105));g.B.GAMEPAD.push(r(2));g.B.GAMEPAD.push(r(3));g.START.KEYBOARD.push(q(13));g.START.KEYBOARD.push(q(32));g.START.KEYBOARD.push(q(99));g.START.GAMEPAD.push(r(9));g.SELECT.KEYBOARD.push(q(16));g.SELECT.KEYBOARD.push(q(9));g.SELECT.KEYBOARD.push(q(220));g.SELECT.KEYBOARD.push(q(97));g.SELECT.GAMEPAD.push(r(8));var ya=function(){function a(a,c){for(var b=
0;b<c.length;b++){var e=c[b];e.enumerable=e.enumerable||!1;e.configurable=!0;"value"in e&&(e.writable=!0);Object.defineProperty(a,e.key,e)}}return function(b,c,d){c&&a(b.prototype,c);d&&a(b,d);return b}}(),ha="input textarea button select option optgroup label datalist".split(" "),L=new (function(){function a(){if(!(this instanceof a))throw new TypeError("Cannot call a class as a function");this.gamepadAnalogStickDeadZone=.25;this.keyMapKeys=Object.keys(Object.assign({},fa));this.keyMap=JSON.parse(JSON.stringify(g));
this.addedEventListeners=this.enabled=!1}ya(a,[{key:"enable",value:function(a){a&&(this.keyMap=a);this.addedEventListeners||"undefined"===typeof window||(window.addEventListener("keyup",this.updateKeyboard.bind(this)),window.addEventListener("keydown",this.updateKeyboard.bind(this)),window.addEventListener("resize",this.updateTouchpadRect.bind(this)),this.addedEventListeners=!0);this.enabled=!0}},{key:"disable",value:function(){this.keyMap=void 0;this.enabled=!1}},{key:"isEnabled",value:function(){return this.enabled}},
{key:"addTouchInput",value:function(a,c,d,e){var b=this,k=void 0;k=oa(c,d,e,function(c){b.updateTouchpad(a,k,c)});this.keyMap[a].TOUCHPAD.push(k);return k.ID}},{key:"removeTouchInput",value:function(a,c){var b=void 0;this.keyMap[a].TOUCHPAD.some(function(a,d){return a.ID===c?(b=d,!0):!1});return void 0!==b?(this.keyMap[a].TOUCHPAD.splice(b,1),!0):!1}},{key:"getState",value:function(){var a=this;if(!this.enabled)return{};this.updateGamepad();var c={};this.keyMapKeys.forEach(function(b){a.keyMap[b].KEYBOARD.some(function(a){return a.ACTIVE})?
c[b]=!0:a.keyMap[b].GAMEPAD.some(function(a){return a.ACTIVE})?c[b]=!0:a.keyMap[b].TOUCHPAD.some(function(a){return a.ACTIVE})?c[b]=!0:c[b]=!1});return c}},{key:"isIgnoringKeyEvents",value:function(){return"undefined"===typeof window?!0:ha.some(function(a){return document.activeElement&&document.activeElement.tagName.toLowerCase()===a.toLowerCase()?!0:!1})}},{key:"updateKeyboard",value:function(a){var b=this;if(this.enabled&&"undefined"!==typeof window&&!(a&&a.target&&a.target.tagName&&ha.some(function(b){return a&&
a.target.tagName.toLowerCase()===b.toLowerCase()?!0:!1}))){var d=!1;"keydown"===a.type&&(d=!0);this.keyMapKeys.forEach(function(c){b.keyMap[c].KEYBOARD.forEach(function(e,k){e.KEY_CODE===a.keyCode&&(b.keyMap[c].KEYBOARD[k].ACTIVE=d)})});a.preventDefault()}}},{key:"updateGamepad",value:function(){for(var a=this,c=navigator.getGamepads?navigator.getGamepads():[],d=function(b){var d=c[b];if(!d)return"continue";a.keyMapKeys.forEach(function(b){a.keyMap[b].GAMEPAD.forEach(function(c,e){if(a.keyMap[b].GAMEPAD[e].BUTTON_ID||
0===a.keyMap[b].GAMEPAD[e].BUTTON_ID)c=a.keyMap[b].GAMEPAD[e].BUTTON_ID,a.keyMap[b].GAMEPAD[e].ACTIVE=d.buttons[c]?d.buttons[c].pressed:!1;void 0!==a.keyMap[b].GAMEPAD[e].JOYSTICK.AXIS_ID&&void 0!==a.keyMap[b].GAMEPAD[e].JOYSTICK.IS_POSITIVE&&(a.keyMap[b].GAMEPAD[e].ACTIVE=a.keyMap[b].GAMEPAD[e].JOYSTICK.IS_POSITIVE?(d.axes[a.keyMap[b].GAMEPAD[e].JOYSTICK.AXIS_ID]||0)>+a.gamepadAnalogStickDeadZone:(d.axes[a.keyMap[b].GAMEPAD[e].JOYSTICK.AXIS_ID]||0)<-a.gamepadAnalogStickDeadZone)})})},e=0;e<c.length;e++)d(e)}},
{key:"updateTouchpadRect",value:function(){var a=this;this.keyMapKeys.forEach(function(b){a.keyMap[b].TOUCHPAD.forEach(function(c,e){c=a.keyMap[b].TOUCHPAD[e].ELEMENT.getBoundingClientRect();a.keyMap[b].TOUCHPAD[e].BOUNDING_RECT=c})})}},{key:"resetTouchDpad",value:function(){var a=this;["UP","RIGHT","DOWN","LEFT"].forEach(function(b){a.keyMap[b].TOUCHPAD.forEach(function(a){a.ACTIVE=!1})})}},{key:"updateTouchpad",value:function(a,c,d){if(this.enabled&&d&&(!d.type.includes("touch")||d.touches))if(d.preventDefault(),
"touchstart"===d.type||"touchmove"===d.type||"mousedown"===d.type){if("DPAD"===c.TYPE){a=void 0;d.type.includes("touch")?a=d.touches[0]:d.type.includes("mouse")&&(a=d);d=(c.BOUNDING_RECT.right-c.BOUNDING_RECT.left)/2;var b=a.clientX-c.BOUNDING_RECT.left;a=a.clientY-c.BOUNDING_RECT.top;if(b>d+c.BOUNDING_RECT.width/2+50)return;Math.abs(d-b)+c.BOUNDING_RECT.width/8>Math.abs((c.BOUNDING_RECT.bottom-c.BOUNDING_RECT.top)/2-a)?Math.abs(c.BOUNDING_RECT.width/2-b)>c.BOUNDING_RECT.width/20&&(a=b<c.BOUNDING_RECT.width/
2,c.ACTIVE=a&&"LEFT"===c.DIRECTION?!0:a||"RIGHT"!==c.DIRECTION?!1:!0):(a=a<c.BOUNDING_RECT.height/2,c.ACTIVE=a&&"UP"===c.DIRECTION?!0:a||"DOWN"!==c.DIRECTION?!1:!0)}"BUTTON"===c.TYPE&&(c.ACTIVE=!0)}else"DPAD"===c.TYPE&&this.resetTouchDpad(),"BUTTON"===c.TYPE&&(c.ACTIVE=!1)}}]);return a}());class za{constructor(){this.worker=void 0;this.isEnabled=!1;this.enableDefaultJoypad()}initialize(){return Promise.resolve()}setWorker(a){this.worker=a}updateController(){if(!this.isEnabled)return{};const a=L.getState();
this.setJoypadState(a);return a}setJoypadState(a){this.worker.postMessage({type:p.SET_JOYPAD_STATE,setJoypadStateParamsAsArray:[a.UP?1:0,a.RIGHT?1:0,a.DOWN?1:0,a.LEFT?1:0,a.A?1:0,a.B?1:0,a.SELECT?1:0,a.START?1:0]})}enableDefaultJoypad(){this.isEnabled=!0;L.enable(JSON.parse(JSON.stringify(g)))}disableDefaultJoypad(){this.isEnabled=!1;L.disable(JSON.parse(JSON.stringify(g)))}addTouchInput(a,b,c,d){return L.addTouchInput(a,b,c,d)}removeTouchInput(a,b){return L.removeTouchInput(a,b)}}const A=new za;
let S=0;const W=()=>{var a=Math.random().toString(36).replace(/[^a-z]+/g,"").substr(2,10);S++;a=`${a}-${S}`;1E5<S&&(S=0);return a};class M{constructor(a,b){this.id=W();b&&(this.id=b);this.messageListeners=[];a=atob(a.split(",")[1]);let c;try{c=new Blob([a],{type:"application/javascript"})}catch(d){window.BlobBuilder=window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder,c=new BlobBuilder,c.append(a),c=c.getBlob()}this.worker=new Worker(URL.createObjectURL(c));this.worker.onmessage=this._onMessageHandler.bind(this)}postMessage(a,
b){a=qa(a,void 0,this.id);const c=a.messageId,d=new Promise((a)=>{this.addMessageListener((b,d)=>{b=y(b);b.messageId===c&&(this.removeMessageListener(d.id),a(b))})});this.worker.postMessage(a,b);return d}addMessageListener(a){this.messageListeners.push({id:W(),callback:a})}removeMessageListener(a){let b;this.messageListeners.some((c,d)=>c.id===a?(b=d,!0):!1);void 0!==b&&this.messageListeners.splice(b,1)}_onMessageHandler(a){this.messageListeners.forEach((b)=>{b.callback(a,b)})}}const Aa=async()=>
{const a=new M("data:application/javascript;base64,",
"LIB"),b=new M("data:application/javascript;base64,J3VzZSBzdHJpY3QnOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGcoYSxiKXtkP3NlbGYucG9zdE1lc3NhZ2UoYSxiKTpoLnBvc3RNZXNzYWdlKGEsYil9ZnVuY3Rpb24gbChhLGIpe2F8fGNvbnNvbGUuZXJyb3IoIndvcmtlcmFwaTogTm8gY2FsbGJhY2sgd2FzIHByb3ZpZGVkIHRvIG9uTWVzc2FnZSEiKTtpZihiKWlmKGQpYi5vbm1lc3NhZ2U9YTtlbHNlIGIub24oIm1lc3NhZ2UiLGEpO2Vsc2UgaWYoZClzZWxmLm9ubWVzc2FnZT1hO2Vsc2UgaC5vbigibWVzc2FnZSIsYSl9ZnVuY3Rpb24gYyhhLGIsZil7Ynx8KGI9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikucmVwbGFjZSgvW15hLXpdKy9nLCIiKS5zdWJzdHIoMiwxMCksZSsrLGI9YCR7Yn0tJHtlfWAsMUU1PGUmJihlPTApKTtyZXR1cm57d29ya2VySWQ6ZixtZXNzYWdlSWQ6YixtZXNzYWdlOmF9fWNvbnN0IGQ9InVuZGVmaW5lZCIhPT10eXBlb2Ygc2VsZjtsZXQgaDtkfHwoaD1yZXF1aXJlKCJ3b3JrZXJfdGhyZWFkcyIpLnBhcmVudFBvcnQpOwpsZXQgZT0wLGs7Y29uc3QgbT0oYSk9PnthPWEuZGF0YT9hLmRhdGE6YTtzd2l0Y2goYS5tZXNzYWdlLnR5cGUpe2Nhc2UgIkdFVF9DT05TVEFOVFNfRE9ORSI6ZyhjKGEubWVzc2FnZSxhLm1lc3NhZ2VJZCkpO2JyZWFrO2Nhc2UgIlVQREFURUQiOnthPW5ldyBVaW50OENsYW1wZWRBcnJheShhLm1lc3NhZ2UuZ3JhcGhpY3NGcmFtZUJ1ZmZlcik7Y29uc3QgZj1uZXcgVWludDhDbGFtcGVkQXJyYXkoOTIxNjApLGQ9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KDMpO2ZvcihsZXQgYz0wOzE0ND5jO2MrKylmb3IobGV0IGU9MDsxNjA+ZTtlKyspe3ZhciBiPTMqKDE2MCpjK2UpO2ZvcihsZXQgYz0wOzM+YztjKyspZFtjXT1hW2IrY107Yj00KihlKzE2MCpjKTtmW2JdPWRbMF07ZltiKzFdPWRbMV07ZltiKzJdPWRbMl07ZltiKzNdPTI1NX1hPWZ9ZyhjKHt0eXBlOiJVUERBVEVEIixpbWFnZURhdGFBcnJheUJ1ZmZlcjphLmJ1ZmZlcn0pLFthLmJ1ZmZlcl0pfX07bCgoYSk9PnthPWEuZGF0YT8KYS5kYXRhOmE7c3dpdGNoKGEubWVzc2FnZS50eXBlKXtjYXNlICJDT05ORUNUIjprPWEubWVzc2FnZS5wb3J0c1swXTtsKG0sayk7ZyhjKHZvaWQgMCxhLm1lc3NhZ2VJZCkpO2JyZWFrO2Nhc2UgIkdFVF9DT05TVEFOVFMiOmsucG9zdE1lc3NhZ2UoYyh7dHlwZToiR0VUX0NPTlNUQU5UUyJ9LGEubWVzc2FnZUlkKSk7YnJlYWs7ZGVmYXVsdDpjb25zb2xlLmxvZyhhKX19KX0pKCk7Cg==",
"GRAPHICS"),c=new M("data:application/javascript;base64,J3VzZSBzdHJpY3QnOyhmdW5jdGlvbigpe2Z1bmN0aW9uIG0oYSxiKXtoP3NlbGYucG9zdE1lc3NhZ2UoYSxiKTpuLnBvc3RNZXNzYWdlKGEsYil9ZnVuY3Rpb24gcChhLGIpe2F8fGNvbnNvbGUuZXJyb3IoIndvcmtlcmFwaTogTm8gY2FsbGJhY2sgd2FzIHByb3ZpZGVkIHRvIG9uTWVzc2FnZSEiKTtpZihiKWlmKGgpYi5vbm1lc3NhZ2U9YTtlbHNlIGIub24oIm1lc3NhZ2UiLGEpO2Vsc2UgaWYoaClzZWxmLm9ubWVzc2FnZT1hO2Vsc2Ugbi5vbigibWVzc2FnZSIsYSl9ZnVuY3Rpb24gYyhhLGIsZCl7Ynx8KGI9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikucmVwbGFjZSgvW15hLXpdKy9nLCIiKS5zdWJzdHIoMiwxMCksaysrLGI9YCR7Yn0tJHtrfWAsMUU1PGsmJihrPTApKTtyZXR1cm57d29ya2VySWQ6ZCxtZXNzYWdlSWQ6YixtZXNzYWdlOmF9fWNvbnN0IGg9InVuZGVmaW5lZCIhPT10eXBlb2Ygc2VsZjtsZXQgbjtofHwobj1yZXF1aXJlKCJ3b3JrZXJfdGhyZWFkcyIpLnBhcmVudFBvcnQpOwpsZXQgaz0wO2NvbnN0IHE9KGEpPT57YT0oYS0xKS8xMjctMTsuMDA4Pk1hdGguYWJzKGEpJiYoYT0wKTtyZXR1cm4gYS8yLjV9O2xldCBsO2NvbnN0IHI9KGEpPT57YT1hLmRhdGE/YS5kYXRhOmE7aWYoYS5tZXNzYWdlKXN3aXRjaChhLm1lc3NhZ2UudHlwZSl7Y2FzZSAiR0VUX0NPTlNUQU5UU19ET05FIjptKGMoYS5tZXNzYWdlLGEubWVzc2FnZUlkKSk7YnJlYWs7Y2FzZSAiVVBEQVRFRCI6e3ZhciBiPW5ldyBVaW50OEFycmF5KGEubWVzc2FnZS5hdWRpb0J1ZmZlcik7dmFyIGQ9YS5tZXNzYWdlLm51bWJlck9mU2FtcGxlcztjb25zdCBjPW5ldyBGbG9hdDMyQXJyYXkoZCk7dmFyIGY9bmV3IEZsb2F0MzJBcnJheShkKTtsZXQgZz0wO2QqPTI7Zm9yKHZhciBlPTA7ZTxkO2UrPTIpY1tnXT1xKGJbZV0pLGcrKztnPTA7Zm9yKGU9MTtlPGQ7ZSs9MilmW2ddPXEoYltlXSksZysrO2I9Yy5idWZmZXI7Zj1mLmJ1ZmZlcn1tKGMoe3R5cGU6IlVQREFURUQiLGxlZnRDaGFubmVsOmIscmlnaHRDaGFubmVsOmYsCm51bWJlck9mU2FtcGxlczphLm1lc3NhZ2UubnVtYmVyT2ZTYW1wbGVzLGZwczphLm1lc3NhZ2UuZnBzLGFsbG93RmFzdFNwZWVkU3RyZXRjaGluZzphLm1lc3NhZ2UuYWxsb3dGYXN0U3BlZWRTdHJldGNoaW5nfSksW2IsZl0pfX07cCgoYSk9PnthPWEuZGF0YT9hLmRhdGE6YTtzd2l0Y2goYS5tZXNzYWdlLnR5cGUpe2Nhc2UgIkNPTk5FQ1QiOmw9YS5tZXNzYWdlLnBvcnRzWzBdO3AocixsKTttKGModm9pZCAwLGEubWVzc2FnZUlkKSk7YnJlYWs7Y2FzZSAiR0VUX0NPTlNUQU5UUyI6bC5wb3N0TWVzc2FnZShjKGEubWVzc2FnZSxhLm1lc3NhZ2VJZCkpO2JyZWFrO2Nhc2UgIkFVRElPX0xBVEVOQ1kiOmwucG9zdE1lc3NhZ2UoYyhhLm1lc3NhZ2UsYS5tZXNzYWdlSWQpKTticmVhaztkZWZhdWx0OmNvbnNvbGUubG9nKGEpfX0pfSkoKTsK",
"AUDIO"),d=new M("data:application/javascript;base64,J3VzZSBzdHJpY3QnOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGcoYSxiKXthfHxjb25zb2xlLmVycm9yKCJ3b3JrZXJhcGk6IE5vIGNhbGxiYWNrIHdhcyBwcm92aWRlZCB0byBvbk1lc3NhZ2UhIik7aWYoYilpZihjKWIub25tZXNzYWdlPWE7ZWxzZSBiLm9uKCJtZXNzYWdlIixhKTtlbHNlIGlmKGMpc2VsZi5vbm1lc3NhZ2U9YTtlbHNlIGUub24oIm1lc3NhZ2UiLGEpfWZ1bmN0aW9uIGgoYSxiLGMpe2J8fChiPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnJlcGxhY2UoL1teYS16XSsvZywiIikuc3Vic3RyKDIsMTApLGQrKyxiPWAke2J9LSR7ZH1gLDFFNTxkJiYoZD0wKSk7cmV0dXJue3dvcmtlcklkOmMsbWVzc2FnZUlkOmIsbWVzc2FnZTphfX1jb25zdCBjPSJ1bmRlZmluZWQiIT09dHlwZW9mIHNlbGY7bGV0IGU7Y3x8KGU9cmVxdWlyZSgid29ya2VyX3RocmVhZHMiKS5wYXJlbnRQb3J0KTtsZXQgZD0wLGY7Y29uc3Qgaz0oYSk9Pnt9O2coKGEpPT57YT1hLmRhdGE/YS5kYXRhOgphO3N3aXRjaChhLm1lc3NhZ2UudHlwZSl7Y2FzZSAiQ09OTkVDVCI6Zj1hLm1lc3NhZ2UucG9ydHNbMF07ZyhrLGYpO2E9aCh2b2lkIDAsYS5tZXNzYWdlSWQpO2M/c2VsZi5wb3N0TWVzc2FnZShhLHZvaWQgMCk6ZS5wb3N0TWVzc2FnZShhLHZvaWQgMCk7YnJlYWs7Y2FzZSAiU0VUX0pPWVBBRF9TVEFURSI6Zi5wb3N0TWVzc2FnZShoKGEubWVzc2FnZSxhLm1lc3NhZ2VJZCkpO2JyZWFrO2RlZmF1bHQ6Y29uc29sZS5sb2coYSl9fSl9KSgpOwo=",
"CONTROLLER"),e=new M("data:application/javascript;base64,J3VzZSBzdHJpY3QnOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGcoYSxiKXtkP3NlbGYucG9zdE1lc3NhZ2UoYSxiKTpoLnBvc3RNZXNzYWdlKGEsYil9ZnVuY3Rpb24gbChhLGIpe2F8fGNvbnNvbGUuZXJyb3IoIndvcmtlcmFwaTogTm8gY2FsbGJhY2sgd2FzIHByb3ZpZGVkIHRvIG9uTWVzc2FnZSEiKTtpZihiKWlmKGQpYi5vbm1lc3NhZ2U9YTtlbHNlIGIub24oIm1lc3NhZ2UiLGEpO2Vsc2UgaWYoZClzZWxmLm9ubWVzc2FnZT1hO2Vsc2UgaC5vbigibWVzc2FnZSIsYSl9ZnVuY3Rpb24gYyhhLGIsYyl7Ynx8KGI9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikucmVwbGFjZSgvW15hLXpdKy9nLCIiKS5zdWJzdHIoMiwxMCksZSsrLGI9YCR7Yn0tJHtlfWAsMUU1PGUmJihlPTApKTtyZXR1cm57d29ya2VySWQ6YyxtZXNzYWdlSWQ6YixtZXNzYWdlOmF9fWNvbnN0IGQ9InVuZGVmaW5lZCIhPT10eXBlb2Ygc2VsZjtsZXQgaDtkfHwoaD1yZXF1aXJlKCJ3b3JrZXJfdGhyZWFkcyIpLnBhcmVudFBvcnQpOwpsZXQgZT0wLGY7Y29uc3Qgaz0oYSxiKT0+e2NvbnN0IGQ9W107T2JqZWN0LmtleXMoYi5tZXNzYWdlKS5mb3JFYWNoKChhKT0+eyJ0eXBlIiE9PWEmJmQucHVzaChiLm1lc3NhZ2VbYV0pfSk7Y29uc3QgZT1jKGIubWVzc2FnZSxiLm1lc3NhZ2VJZCk7YT9mLnBvc3RNZXNzYWdlKGUsZCk6ZyhlLGQpfSxtPShhKT0+e2E9YS5kYXRhP2EuZGF0YTphO2lmKGEubWVzc2FnZSlzd2l0Y2goYS5tZXNzYWdlLnR5cGUpe2Nhc2UgIkNMRUFSX01FTU9SWV9ET05FIjpnKGMoYS5tZXNzYWdlLGEubWVzc2FnZUlkKSxbYS5tZXNzYWdlLndhc21CeXRlTWVtb3J5XSk7YnJlYWs7Y2FzZSAiR0VUX0NPTlNUQU5UU19ET05FIjpnKGMoYS5tZXNzYWdlLGEubWVzc2FnZUlkKSk7YnJlYWs7Y2FzZSAiU0VUX01FTU9SWV9ET05FIjpnKGMoYS5tZXNzYWdlLGEubWVzc2FnZUlkKSk7YnJlYWs7Y2FzZSAiR0VUX01FTU9SWSI6ayghMSxhKTticmVhaztjYXNlICJVUERBVEVEIjprKCExLGEpfX07bCgoYSk9PnthPQphLmRhdGE/YS5kYXRhOmE7c3dpdGNoKGEubWVzc2FnZS50eXBlKXtjYXNlICJDT05ORUNUIjpmPWEubWVzc2FnZS5wb3J0c1swXTtsKG0sZik7ZyhjKHZvaWQgMCxhLm1lc3NhZ2VJZCkpO2JyZWFrO2Nhc2UgIkNMRUFSX01FTU9SWSI6Zi5wb3N0TWVzc2FnZShjKHt0eXBlOiJDTEVBUl9NRU1PUlkifSxhLm1lc3NhZ2VJZCkpO2JyZWFrO2Nhc2UgIkdFVF9DT05TVEFOVFMiOmYucG9zdE1lc3NhZ2UoYyh7dHlwZToiR0VUX0NPTlNUQU5UUyJ9LGEubWVzc2FnZUlkKSk7YnJlYWs7Y2FzZSAiR0VUX01FTU9SWSI6Zi5wb3N0TWVzc2FnZShjKGEubWVzc2FnZSxhLm1lc3NhZ2VJZCkpO2JyZWFrO2Nhc2UgIlNFVF9NRU1PUlkiOmsoITAsYSk7YnJlYWs7ZGVmYXVsdDpjb25zb2xlLmxvZyhhKX19KX0pKCk7Cg==",
"MEMORY"),f=[];[b,c,d,e].forEach((b)=>{const c=new MessageChannel,d=new Promise((d)=>{let e=0;a.postMessage({type:p.CONNECT,workerId:b.id,ports:[c.port1]},[c.port1]).then(()=>{e++;2<=e&&d()});b.postMessage({type:p.CONNECT,workerId:a.id,ports:[c.port2]},[c.port2]).then(()=>{e++;2<=e&&d()})});f.push(d)});await Promise.all(f);Q.setWorker(b);D.setWorker(c);A.setWorker(d);z.setWorker(e);return a};let h={parse:function(a){let b=h.bin.readUshort,c=h.bin.readUint;var d;let e={};a=new Uint8Array(a);for(d=
a.length-4;101010256!=c(a,d);)d--;d=d+4+4;let f=b(a,d);d+=2;b(a,d);d+=2;c(a,d);d+=4;d=c(a,d);for(let k=0;k<f;k++){c(a,d);d+=4;d+=4;d+=4;d+=4;c(a,d);d+=4;let f=c(a,d);d+=4;let k=c(a,d);d+=4;let B=b(a,d),g=b(a,d+2),m=b(a,d+4);d+=6;d+=8;let x=c(a,d);d+=4;d+=B+g+m;h._readLocal(a,x,e,f,k)}return e},_readLocal:function(a,b,c,d,e){var f=h.bin.readUshort,k=h.bin.readUint;k(a,b);b+=4;f(a,b);b+=2;f(a,b);b+=2;let n=f(a,b);b+=2;k(a,b);b+=4;k(a,b);b=b+4+8;k=f(a,b);b+=2;let l=f(a,b);b+=2;f=h.bin.readUTF8(a,b,k);
b=b+k+l;a=new Uint8Array(a.buffer,b);if(0==n)c[f]=new Uint8Array(a.buffer.slice(b,b+d));else if(8==n)b=new Uint8Array(e),h.inflateRaw(a,b),c[f]=b;else throw"unknown compression method: "+n;},inflateRaw:function(a,b){return h.F.inflate(a,b)},inflate:function(a,b){return h.inflateRaw(new Uint8Array(a.buffer,a.byteOffset+2,a.length-6),b)},deflate:function(a,b){null==b&&(b={level:6});let c=0,d=new Uint8Array(50+Math.floor(1.1*a.length));d[c]=120;d[c+1]=156;c=h.F.deflateRaw(a,d,c+2,b.level);a=h.adler(a,
0,a.length);d[c+0]=a>>>24&255;d[c+1]=a>>>16&255;d[c+2]=a>>>8&255;d[c+3]=a>>>0&255;return new Uint8Array(d.buffer,0,c+4)},deflateRaw:function(a,b){null==b&&(b={level:6});let c=new Uint8Array(50+Math.floor(1.1*a.length)),d;d=h.F.deflateRaw(a,c,d,b.level);return new Uint8Array(c.buffer,0,d)},encode:function(a){var b=0;let c=h.bin.writeUint,d=h.bin.writeUshort;var e={};for(var f in a){var k=!h._noNeed(f),n=a[f];let b=h.crc.crc(n,0,n.length);e[f]={cpr:k,usize:n.length,crc:b,file:k?h.deflateRaw(n):n}}for(let a in e)b+=
e[a].file.length+30+46+2*h.bin.sizeUTF8(a);a=new Uint8Array(b+22);b=0;f=[];for(var l in e)k=e[l],f.push(b),b=h._writeHeader(a,b,l,k,0);l=0;k=b;for(let c in e)n=e[c],f.push(b),b=h._writeHeader(a,b,c,n,1,f[l++]);e=b-k;c(a,b,101010256);b=b+4+4;d(a,b,l);b+=2;d(a,b,l);b+=2;c(a,b,e);c(a,b+4,k);return a.buffer},_noNeed:function(a){a=a.split(".").pop().toLowerCase();return-1!="png,jpg,jpeg,zip".indexOf(a)},_writeHeader:function(a,b,c,d,e,f){let k=h.bin.writeUint,n=h.bin.writeUshort,l=d.file;k(a,b,0==e?67324752:
33639248);b+=4;1==e&&(b+=2);n(a,b,20);b+=2;n(a,b,0);b+=2;n(a,b,d.cpr?8:0);b+=2;k(a,b,0);b+=4;k(a,b,d.crc);b+=4;k(a,b,l.length);b+=4;k(a,b,d.usize);b+=4;n(a,b,h.bin.sizeUTF8(c));b+=2;n(a,b,0);b+=2;1==e&&(b=b+2+2+6,k(a,b,f),b+=4);c=h.bin.writeUTF8(a,b,c);b+=c;0==e&&(a.set(l,b),b+=l.length);return b}};h.crc={table:function(){let a=new Uint32Array(256);for(let b=0;256>b;b++){let c=b;for(let a=0;8>a;a++)c=c&1?3988292384^c>>>1:c>>>1;a[b]=c}return a}(),update:function(a,b,c,d){for(let e=0;e<d;e++)a=h.crc.table[(a^
b[c+e])&255]^a>>>8;return a},crc:function(a,b,c){return h.crc.update(4294967295,a,b,c)^4294967295}};h.adler=function(a,b,c){let d=1,e=0,f=b;for(b+=c;f<b;){for(c=Math.min(f+5552,b);f<c;)d+=a[f++],e+=d;d%=65521;e%=65521}return e<<16|d};h.bin={readUshort:function(a,b){return a[b]|a[b+1]<<8},writeUshort:function(a,b,c){a[b]=c&255;a[b+1]=c>>8&255},readUint:function(a,b){return 16777216*a[b+3]+(a[b+2]<<16|a[b+1]<<8|a[b])},writeUint:function(a,b,c){a[b]=c&255;a[b+1]=c>>8&255;a[b+2]=c>>16&255;a[b+3]=c>>24&
255},readASCII:function(a,b,c){let d="";for(let e=0;e<c;e++)d+=String.fromCharCode(a[b+e]);return d},writeASCII:function(a,b,c){for(let d=0;d<c.length;d++)a[b+d]=c.charCodeAt(d)},pad:function(a){return 2>a.length?"0"+a:a},readUTF8:function(a,b,c){let d="",e;for(let e=0;e<c;e++)d+="%"+h.bin.pad(a[b+e].toString(16));try{e=decodeURIComponent(d)}catch(f){return h.bin.readASCII(a,b,c)}return e},writeUTF8:function(a,b,c){let d=c.length,e=0;for(let f=0;f<d;f++){let d=c.charCodeAt(f);if(0==(d&4294967168))a[b+
e]=d,e++;else if(0==(d&4294965248))a[b+e]=192|d>>6,a[b+e+1]=128|d>>0&63,e+=2;else if(0==(d&4294901760))a[b+e]=224|d>>12,a[b+e+1]=128|d>>6&63,a[b+e+2]=128|d>>0&63,e+=3;else if(0==(d&4292870144))a[b+e]=240|d>>18,a[b+e+1]=128|d>>12&63,a[b+e+2]=128|d>>6&63,a[b+e+3]=128|d>>0&63,e+=4;else throw"e";}return e},sizeUTF8:function(a){let b=a.length,c=0;for(let d=0;d<b;d++){let b=a.charCodeAt(d);if(0==(b&4294967168))c++;else if(0==(b&4294965248))c+=2;else if(0==(b&4294901760))c+=3;else if(0==(b&4292870144))c+=
4;else throw"e";}return c}};h.F={};h.F.deflateRaw=function(a,b,c,d){var e=[[0,0,0,0,0],[4,4,8,4,0],[4,5,16,8,0],[4,6,16,16,0],[4,10,16,32,0],[8,16,32,32,0],[8,16,128,128,0],[8,32,128,256,0],[32,128,258,1024,1],[32,258,258,4096,1]][d];let f=h.F.U,k=h.F._goodIndex;var n=h.F._putsE;let l=0;c<<=3;let B=0,g=a.length;if(0==d){for(;l<g;)e=Math.min(65535,g-l),n(b,c,l+e==g?1:0),c=h.F._copyExact(a,l,e,b,c+8),l+=e;return c>>>3}n=f.lits;d=f.strt;let m=f.prev,x=0,w=0,v=0,q=0;let u=0;2<g&&(u=h.F._hash(a,0),d[u]=
0);for(l=0;l<g;l++){var p=u;if(l+1<g-2){u=h.F._hash(a,l+1);var t=l+1&32767;m[t]=d[u];d[u]=t}if(B<=l){if(14E3<x||26697<w)B<l&&(n[x]=l-B,x+=2,B=l),c=h.F._writeBlock(l==g-1||B==g?1:0,n,x,q,a,v,l-v,b,c),x=w=q=0,v=l;t=0;l<g-2&&(t=h.F._bestMatch(a,l,m,p,Math.min(e[2],g-l),e[3]));if(0!=t){p=t>>>16;t&=65535;let a=k(p,f.of0);f.lhst[257+a]++;let b=k(t,f.df0);f.dhst[b]++;q+=f.exb[a]+f.dxb[b];n[x]=p<<23|l-B;n[x+1]=t<<16|a<<8|b;x+=2;B=l+p}else f.lhst[a[l]]++;w++}}if(v!=l||0==a.length)B<l&&(n[x]=l-B,x+=2),c=h.F._writeBlock(1,
n,x,q,a,v,l-v,b,c);for(;0!=(c&7);)c++;return c>>>3};h.F._bestMatch=function(a,b,c,d,e,f){var k=b&32767;let n=c[k],l=k-n+32768&32767;if(n==k||d!=h.F._hash(a,b-l))return 0;let g=d=0,m=Math.min(32767,b);for(;l<=m&&0!=--f&&n!=k;){if(0==d||a[b+d]==a[b+d-l])if(k=h.F._howLong(a,b,l),k>d){d=k;g=l;if(d>=e)break;l+2<k&&(k=l+2);let a=0;for(let d=0;d<k-2;d++){let e=b-l+d+32768&32767,f=e-c[e]+32768&32767;f>a&&(a=f,n=e)}}k=n;n=c[k];l+=k-n+32768&32767}return d<<16|g};h.F._howLong=function(a,b,c){if(a[b]!=a[b-c]||
a[b+1]!=a[b+1-c]||a[b+2]!=a[b+2-c])return 0;let d=b,e=Math.min(a.length,b+258);for(b+=3;b<e&&a[b]==a[b-c];)b++;return b-d};h.F._hash=function(a,b){return(a[b]<<8|a[b+1])+(a[b+2]<<4)&65535};h.saved=0;h.F._writeBlock=function(a,b,c,d,e,f,k,n,l){let g=h.F.U,m=h.F._putsF,q=h.F._putsE;let x,w,v,p;g.lhst[256]++;var u=h.F.getTrees();var r=u[0];x=u[1];w=u[2];v=u[3];p=u[4];var t=u[5];var y=u[6];u=u[7];var z=(0==(l+3&7)?0:8-(l+3&7))+32+(k<<3);let A=d+h.F.contSize(g.fltree,g.lhst)+h.F.contSize(g.fdtree,g.dhst);
d=d+h.F.contSize(g.ltree,g.lhst)+h.F.contSize(g.dtree,g.dhst);d+=14+3*t+h.F.contSize(g.itree,g.ihst)+(2*g.ihst[16]+3*g.ihst[17]+7*g.ihst[18]);for(var C=0;286>C;C++)g.lhst[C]=0;for(C=0;30>C;C++)g.dhst[C]=0;for(C=0;19>C;C++)g.ihst[C]=0;z=z<A&&z<d?0:A<d?1:2;m(n,l,a);m(n,l+1,z);l+=3;if(0==z){for(;0!=(l&7);)l++;l=h.F._copyExact(e,f,k,n,l)}else{let d,B;1==z&&(d=g.fltree,B=g.fdtree);if(2==z){h.F.makeCodes(g.ltree,r);h.F.revCodes(g.ltree,r);h.F.makeCodes(g.dtree,x);h.F.revCodes(g.dtree,x);h.F.makeCodes(g.itree,
w);h.F.revCodes(g.itree,w);d=g.ltree;B=g.dtree;q(n,l,v-257);l+=5;q(n,l,p-1);l+=5;q(n,l,t-4);l+=4;for(a=0;a<t;a++)q(n,l+3*a,g.itree[(g.ordr[a]<<1)+1]);l=h.F._codeTiny(y,g.itree,n,l+3*t);l=h.F._codeTiny(u,g.itree,n,l)}for(t=0;t<c;t+=2){a=b[t];y=a>>>23;for(a=f+(a&8388607);f<a;)l=h.F._writeLit(e[f++],d,n,l);0!=y&&(r=b[t+1],a=r>>16,k=r>>8&255,r&=255,l=h.F._writeLit(257+k,d,n,l),q(n,l,y-g.of0[k]),l+=g.exb[k],l=h.F._writeLit(r,B,n,l),m(n,l,a-g.df0[r]),l+=g.dxb[r],f+=y)}l=h.F._writeLit(256,d,n,l)}return l};
h.F._copyExact=function(a,b,c,d,e){let f=e>>>3;d[f]=c;d[f+1]=c>>>8;d[f+2]=255-d[f];d[f+3]=255-d[f+1];f+=4;d.set(new Uint8Array(a.buffer,b,c),f);return e+(c+4<<3)};h.F.getTrees=function(){let a=h.F.U,b=h.F._hufTree(a.lhst,a.ltree,15),c=h.F._hufTree(a.dhst,a.dtree,15),d=[],e=h.F._lenCodes(a.ltree,d),f=[],k=h.F._lenCodes(a.dtree,f);for(var g=0;g<d.length;g+=2)a.ihst[d[g]]++;for(g=0;g<f.length;g+=2)a.ihst[f[g]]++;g=h.F._hufTree(a.ihst,a.itree,7);let l=19;for(;4<l&&0==a.itree[(a.ordr[l-1]<<1)+1];)l--;
return[b,c,g,e,k,l,d,f]};h.F.getSecond=function(a){let b=[];for(let c=0;c<a.length;c+=2)b.push(a[c+1]);return b};h.F.nonZero=function(a){let b="";for(let c=0;c<a.length;c+=2)0!=a[c+1]&&(b+=(c>>1)+",");return b};h.F.contSize=function(a,b){let c=0;for(let d=0;d<b.length;d++)c+=b[d]*a[(d<<1)+1];return c};h.F._codeTiny=function(a,b,c,d){for(let e=0;e<a.length;e+=2){let f=a[e],k=a[e+1];d=h.F._writeLit(f,b,c,d);let g=16==f?2:17==f?3:7;15<f&&(h.F._putsE(c,d,k,g),d+=g)}return d};h.F._lenCodes=function(a,
b){let c=a.length;for(;2!=c&&0==a[c-1];)c-=2;for(let f=0;f<c;f+=2){var d=a[f+1],e=f+3<c?a[f+3]:-1;let k=f+5<c?a[f+5]:-1,h=0==f?-1:a[f-1];if(0==d&&e==d&&k==d){for(e=f+5;e+2<c&&a[e+2]==d;)e+=2;d=Math.min(e+1-f>>>1,138);11>d?b.push(17,d-3):b.push(18,d-11);f+=2*d-2}else if(d==h&&e==d&&k==d){for(e=f+5;e+2<c&&a[e+2]==d;)e+=2;d=Math.min(e+1-f>>>1,6);b.push(16,d-3);f+=2*d-2}else b.push(d,0)}return c>>>1};h.F._hufTree=function(a,b,c){var d=[],e=a.length,f=b.length,k=0;for(k=0;k<f;k+=2)b[k]=0,b[k+1]=0;for(k=
0;k<e;k++)0!=a[k]&&d.push({lit:k,f:a[k]});a=d.length;e=d.slice(0);if(0==a)return 0;if(1==a)return c=d[0].lit,d=0==c?1:0,b[(c<<1)+1]=1,b[(d<<1)+1]=1;d.sort(function(a,b){return a.f-b.f});k=d[0];f=d[1];let g=0,l=1,m=2;for(d[0]={lit:-1,f:k.f+f.f,l:k,r:f,d:0};l!=a-1;)k=g!=l&&(m==a||d[g].f<d[m].f)?d[g++]:d[m++],f=g!=l&&(m==a||d[g].f<d[m].f)?d[g++]:d[m++],d[l++]={lit:-1,f:k.f+f.f,l:k,r:f};d=h.F.setDepth(d[l-1],0);d>c&&(h.F.restrictDepth(e,c,d),d=c);for(k=0;k<a;k++)b[(e[k].lit<<1)+1]=e[k].d;return d};h.F.setDepth=
function(a,b){return-1!=a.lit?a.d=b:Math.max(h.F.setDepth(a.l,b+1),h.F.setDepth(a.r,b+1))};h.F.restrictDepth=function(a,b,c){let d=0,e=1<<c-b,f=0;a.sort(function(a,b){return b.d==a.d?a.f-b.f:b.d-a.d});for(d=0;d<a.length;d++)if(a[d].d>b){let k=a[d].d;a[d].d=b;f+=e-(1<<c-k)}else break;for(f>>>=c-b;0<f;)c=a[d].d,c<b?(a[d].d++,f-=1<<b-c-1):d++;for(;0<=d;d--)a[d].d==b&&0>f&&(a[d].d--,f++);0!=f&&console.log("debt left")};h.F._goodIndex=function(a,b){let c=0;b[c|16]<=a&&(c|=16);b[c|8]<=a&&(c|=8);b[c|4]<=
a&&(c|=4);b[c|2]<=a&&(c|=2);b[c|1]<=a&&(c|=1);return c};h.F._writeLit=function(a,b,c,d){h.F._putsF(c,d,b[a<<1]);return d+b[(a<<1)+1]};h.F.inflate=function(a,b){if(3==a[0]&&0==a[1])return b?b:new Uint8Array(0);var c=h.F;let d=c._bitsF,e=c._bitsE,f=c._decodeTiny,k=c.makeCodes,g=c.codes2map,l=c._get17;c=c.U;let m=null==b;m&&(b=new Uint8Array(a.length>>2<<3));let q=0;var p,x;let w=x=p=0;for(var v=0,r;0==q;){q=d(a,v,1);var u=d(a,v+1,2);v+=3;if(0==u)0!=(v&7)&&(v+=8-(v&7)),v=(v>>>3)+4,u=a[v-4]|a[v-3]<<8,
m&&(b=h.F._check(b,w+u)),b.set(new Uint8Array(a.buffer,a.byteOffset+v,u),w),v=v+u<<3,w+=u;else{m&&(b=h.F._check(b,w+131072));if(1==u){var y=c.flmap;r=c.fdmap;p=511;x=31}if(2==u){p=e(a,v,5)+257;x=e(a,v+5,5)+1;y=e(a,v+10,4)+4;v+=14;for(r=0;38>r;r+=2)c.itree[r]=0,c.itree[r+1]=0;u=1;for(r=0;r<y;r++){var t=e(a,v+3*r,3);c.itree[(c.ordr[r]<<1)+1]=t;t>u&&(u=t)}v+=3*y;k(c.itree,u);g(c.itree,u,c.imap);y=c.lmap;r=c.dmap;t=f(c.imap,(1<<u)-1,p,a,v,c.ltree);p=(1<<(t>>>24))-1;v+=t&16777215;k(c.ltree,t>>>24);g(c.ltree,
t>>>24,y);u=f(c.imap,(1<<u)-1,x,a,v,c.dtree);x=(1<<(u>>>24))-1;v+=u&16777215;k(c.dtree,u>>>24);g(c.dtree,u>>>24,r)}for(;;)if(u=y[l(a,v)&p],v+=u&15,t=u>>>4,0==t>>>8)b[w++]=t;else if(256==t)break;else{u=w+t-254;264<t&&(t=c.ldef[t-257],u=w+(t>>>3)+e(a,v,t&7),v+=t&7);t=r[l(a,v)&x];v+=t&15;t=c.ddef[t>>>4];let f=(t>>>4)+d(a,v,t&15);for(v+=t&15;w<u;)b[w]=b[w++-f],b[w]=b[w++-f],b[w]=b[w++-f],b[w]=b[w++-f];w=u}}}return b.length==w?b:b.slice(0,w)};h.F._check=function(a,b){let c=a.length;if(b<=c)return a;b=
new Uint8Array(c<<1);for(let d=0;d<c;d+=4)b[d]=a[d],b[d+1]=a[d+1],b[d+2]=a[d+2],b[d+3]=a[d+3];return b};h.F._decodeTiny=function(a,b,c,d,e,f){let k=e,g=h.F._bitsE,l=h.F._get17,m=c<<1,r=c=0;for(;c<m;){var q=a[l(d,e)&b];e+=q&15;var p=q>>>4;if(15>=p)f[c]=0,f[c+1]=p,p>r&&(r=p),c+=2;else{let a=q=0;16==p?(a=3+g(d,e,2)<<1,e+=2,q=f[c-1]):17==p?(a=3+g(d,e,3)<<1,e+=3):18==p&&(a=11+g(d,e,7)<<1,e+=7);for(p=c+a;c<p;)f[c]=0,f[c+1]=q,c+=2}}for(a=f.length;c<a;)f[c+1]=0,c+=2;return r<<24|e-k};h.F.makeCodes=function(a,
b){var c=h.F.U;let d=a.length;var e;let f;var k=c.bl_count;for(e=0;e<=b;e++)k[e]=0;for(e=1;e<d;e+=2)k[a[e]]++;c=c.next_code;e=0;k[0]=0;for(f=1;f<=b;f++)e=e+k[f-1]<<1,c[f]=e;for(b=0;b<d;b+=2)k=a[b+1],0!=k&&(a[b]=c[k],c[k]++)};h.F.codes2map=function(a,b,c){let d=a.length,e=h.F.U.rev15;for(let g=0;g<d;g+=2)if(0!=a[g+1]){var f=a[g+1];let d=g>>1<<4|f;var k=b-f;f=a[g]<<k;for(k=f+(1<<k);f!=k;)c[e[f]>>>15-b]=d,f++}};h.F.revCodes=function(a,b){let c=h.F.U.rev15,d=15-b;for(let e=0;e<a.length;e+=2)a[e]=c[a[e]<<
b-a[e+1]]>>>d};h.F._putsE=function(a,b,c){c<<=b&7;b>>>=3;a[b]|=c;a[b+1]|=c>>>8};h.F._putsF=function(a,b,c){c<<=b&7;b>>>=3;a[b]|=c;a[b+1]|=c>>>8;a[b+2]|=c>>>16};h.F._bitsE=function(a,b,c){return(a[b>>>3]|a[(b>>>3)+1]<<8)>>>(b&7)&(1<<c)-1};h.F._bitsF=function(a,b,c){return(a[b>>>3]|a[(b>>>3)+1]<<8|a[(b>>>3)+2]<<16)>>>(b&7)&(1<<c)-1};h.F._get17=function(a,b){return(a[b>>>3]|a[(b>>>3)+1]<<8|a[(b>>>3)+2]<<16)>>>(b&7)};h.F._get25=function(a,b){return(a[b>>>3]|a[(b>>>3)+1]<<8|a[(b>>>3)+2]<<16|a[(b>>>3)+
3]<<24)>>>(b&7)};h.F.U={next_code:new Uint16Array(16),bl_count:new Uint16Array(16),ordr:[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],of0:[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,999,999,999],exb:[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0],ldef:new Uint16Array(32),df0:[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,65535,65535],dxb:[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,
6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0],ddef:new Uint32Array(32),flmap:new Uint16Array(512),fltree:[],fdmap:new Uint16Array(32),fdtree:[],lmap:new Uint16Array(32768),ltree:[],dmap:new Uint16Array(32768),dtree:[],imap:new Uint16Array(512),itree:[],rev15:new Uint16Array(32768),lhst:new Uint32Array(286),dhst:new Uint32Array(30),ihst:new Uint32Array(19),lits:new Uint32Array(15E3),strt:new Uint16Array(65536),prev:new Uint16Array(32768)};(function(){let a=h.F.U;for(var b=0;32768>b;b++){let c=b;c=(c&
2863311530)>>>1|(c&1431655765)<<1;c=(c&3435973836)>>>2|(c&858993459)<<2;c=(c&4042322160)>>>4|(c&252645135)<<4;c=(c&4278255360)>>>8|(c&16711935)<<8;a.rev15[b]=(c>>>16|c<<16)>>>17}for(b=0;32>b;b++)a.ldef[b]=a.of0[b]<<3|a.exb[b],a.ddef[b]=a.df0[b]<<4|a.dxb[b];for(b=0;143>=b;b++)a.fltree.push(0,8);for(;255>=b;b++)a.fltree.push(0,9);for(;279>=b;b++)a.fltree.push(0,7);for(;287>=b;b++)a.fltree.push(0,8);h.F.makeCodes(a.fltree,9);h.F.codes2map(a.fltree,9,a.flmap);h.F.revCodes(a.fltree,9);for(b=0;32>b;b++)a.fdtree.push(0,
5);h.F.makeCodes(a.fdtree,5);h.F.codes2map(a.fdtree,5,a.fdmap);h.F.revCodes(a.fdtree,5);for(b=0;19>b;b++)a.itree.push(0,0);for(b=0;286>b;b++)a.ltree.push(0,0);for(b=0;30>b;b++)a.dtree.push(0,0)})();const sa=(a,b)=>(async()=>{if(ArrayBuffer.isView(a)&&a.constructor===Uint8Array)return a;if("object"===typeof a&&a.size){var c=await Ba(a);return a.name.toLowerCase().endsWith(".zip")?await ia(c):c}c={};b&&b.headers&&(c.headers=b.headers);var d=await fetch(a,c).then((a)=>a.ok?a.arrayBuffer():Promise.reject(a));
c=a;b&&b.fileName&&(c=b.fileName);d=new Uint8Array(d);return c.toLowerCase().endsWith(".zip")?await ia(d):d})(),Ba=async(a)=>await new Promise((b,c)=>{const d=new FileReader;d.onload=()=>{const a=new Uint8Array(d.result);b(a)};d.readAsArrayBuffer(a)}),ia=async(a)=>{const b=await h.parse(a);let c=!1;Object.keys(b).some((a)=>{const d=a.toLowerCase();return d.includes(".gb")||d.includes(".gbc")?(c=b[a],!0):!1});if(!c)throw Error("Could not find a ROM in zip...");return c};var Ca=U(function(a){(function(){if("undefined"!==
typeof performance&&null!==performance&&performance.now)a.exports=function(){return performance.now()};else if("undefined"!==typeof process&&null!==process&&process.hrtime){a.exports=function(){return(c()-f)/1E6};var b=process.hrtime;var c=function(){var a=b();return 1E9*a[0]+a[1]};var d=c();var e=1E9*process.uptime();var f=d-e}else if(Date.now){a.exports=function(){return Date.now()-g};var g=Date.now()}else a.exports=function(){return(new Date).getTime()-g},g=(new Date).getTime()}).call(ea)}),E=
"undefined"===typeof window?ea:window;F=["moz","webkit"];var K=E.requestAnimationFrame,N=E.cancelAnimationFrame||E.cancelRequestAnimationFrame;for(G=0;!K&&G<F.length;G++)K=E[F[G]+"RequestAnimationFrame"],N=E[F[G]+"CancelAnimationFrame"]||E[F[G]+"CancelRequestAnimationFrame"];if(!K||!N){var X=0,ja=0,I=[],Da=1E3/60;K=function(a){if(0===I.length){var b=Ca(),c=Math.max(0,Da-(b-X));X=c+b;setTimeout(function(){for(var a=I.slice(0),b=I.length=0;b<a.length;b++)if(!a[b].cancelled)try{a[b].callback(X)}catch(f){setTimeout(function(){throw f;
},0)}},Math.round(c))}I.push({handle:++ja,callback:a,cancelled:!1});return ja};N=function(a){for(var b=0;b<I.length;b++)I[b].handle===a&&(I[b].cancelled=!0)}}var J=function(a){return K.call(E,a)};J.cancel=function(){N.apply(E,arguments)};J.polyfill=function(a){a||(a=E);a.requestAnimationFrame=K;a.cancelAnimationFrame=N};const ba=async(a,b)=>{if(m.worker)return a=await m.worker.postMessage({type:p.RUN_WASM_EXPORT,export:a,parameters:b}),y(a).message.response},da=async(a,b)=>{if(m.worker)return a=await m.worker.postMessage({type:p.GET_WASM_MEMORY_SECTION,
start:a,end:b}),a=y(a),new Uint8Array(a.message.response)},ca=async(a)=>{if(m.worker)return a=await m.worker.postMessage({type:p.GET_WASM_CONSTANT,constant:a}),y(a).message.response};class Ea{constructor(){this.canvasElement=this.coreType=this.worker=void 0;this.loadedROM=this.renderId=this.loadedAndStarted=this.ready=this.paused=!1;this.fps=0;this._resetConfig();"undefined"!==typeof window&&window.document.addEventListener("visibilitychange",()=>{"hidden"!==document.visibilityState||this.options&&
this.options.disablePauseOnHidden||this.pause()})}config(a,b){return(async()=>{await this.pause();await this.setCanvas(b);!a&&this.options||this._resetConfig();if(a&&(Object.keys(a).forEach((b)=>{void 0!==this.options[b]&&(this.options[b]=a[b])}),a.gameboySpeed)){let b=Math.floor(60*a.gameboySpeed);0>=b&&(b=1);this.options.gameboyFrameRate=b}})()}getConfig(){return this.options}setCanvas(a){return a?(async()=>{await this.pause();this.canvasElement=a;this.wasmInstance&&this.wasmByteMemory&&await Q.initialize(this.canvasElement,
this.wasmInstance,this.wasmByteMemory,this.options.updateGraphicsCallback)})():Promise.resolve()}getCanvas(){return this.canvasElement}loadROM(a,b){return ra.bind(this)(a,b)}play(){return(async()=>{if(this.ready){if(!this.loadedAndStarted&&(this.loadedAndStarted=!0,this.options.onLoadedAndStarted))this.options.onLoadedAndStarted();if(this.options.onPlay)this.options.onPlay();this.options.headless||(D.resumeAudioContext(),D.resetTimeStretch());await this.worker.postMessage({type:p.RESET_AUDIO_QUEUE});
this.paused=!1;this.updateId||await this.worker.postMessage({type:p.PLAY});this.renderId||this.options.headless||(this.renderId=J(()=>{aa.call(this)}))}})()}pause(){return(async()=>{this.paused=!0;if(this.ready&&this.options.onPause)this.options.onPause();J.cancel(this.renderId);this.renderId=!1;this.options.headless||D.cancelAllAudio(!0);this.worker&&await this.worker.postMessage({type:p.PAUSE});await new Promise((a)=>{J(()=>{a()})})})()}reset(a){return(async()=>{this.config(a,this.canvasElement);
if(this.loadedROM)return this.loadROM(this.loadedROM)})()}saveState(){return(async()=>{await this.pause();return await z.saveState()})()}getSaveStates(){return(async()=>{let a=await z.getCartridgeObject();return a?a.saveStates:[]})()}loadState(a){return(async()=>{await this.pause();await z.loadState(a)})()}getFPS(){return this.fps}getCoreType(){return this.coreType}_resetConfig(){this.fpsTimeStamps=[];this.frameSkipCounter=0;this.options={headless:!1,disablePauseOnHidden:!1,isAudioEnabled:!0,gameboyFrameRate:60,
frameSkip:0,includeBootROM:!1,isGbcEnabled:!0,audioBatchProcessing:!1,graphicsBatchProcessing:!1,timersBatchProcessing:!1,graphicsDisableScanlineRendering:!1,audioAccumulateSamples:!1,tileRendering:!1,tileCaching:!1,updateGraphicsCallback:null,updateAudioCallback:null,saveStateCallback:null,onReady:null,onPlay:null,onPause:null,onLoadedAndStarted:null}}_instantiateWorkers(){return(async()=>{this.worker||(this.worker=await Aa(),this.worker.addMessageListener(ta.bind(this)))})()}}const m=new Ea;F={config:m.config.bind(m),
getCoreType:m.getCoreType.bind(m),getConfig:m.getConfig.bind(m),setCanvas:m.setCanvas.bind(m),getCanvas:m.getCanvas.bind(m),loadROM:m.loadROM.bind(m),play:m.play.bind(m),pause:m.pause.bind(m),reset:m.reset.bind(m),isPlaying:()=>!m.paused,isPaused:()=>m.paused,isReady:()=>m.ready,isLoadedAndStarted:()=>m.loadedAndStarted,getVersion:()=>"0.3.0",saveState:m.saveState.bind(m),getSaveStates:m.getSaveStates.bind(m),loadState:m.loadState.bind(m),getFPS:m.getFPS.bind(m),enableDefaultJoypad:A.enableDefaultJoypad.bind(A),
disableDefaultJoypad:A.disableDefaultJoypad.bind(A),setJoypadState:A.setJoypadState.bind(A),addTouchInput:A.addTouchInput.bind(A),removeTouchInput:A.removeTouchInput.bind(A),resumeAudioContext:D.resumeAudioContext.bind(D),_getCartridgeInfo:z.getCartridgeInfo.bind(z),_saveCurrentAudioBufferToWav:()=>{if(D.audioBuffer){var a=D.audioBuffer;var b={};var c=a.numberOfChannels,d=a.sampleRate;b=b.float32?3:1;var e=3===b?32:16;if(2===c){var f=a.getChannelData(0);a=a.getChannelData(1);for(var g=f.length+a.length,
h=new Float32Array(g),l=0,m=0;l<g;)h[l++]=f[m],h[l++]=a[m],m++;f=h}else f=a.getChannelData(0);h=e/8;l=c*h;a=new ArrayBuffer(44+f.length*h);g=new DataView(a);R(g,0,"RIFF");g.setUint32(4,36+f.length*h,!0);R(g,8,"WAVE");R(g,12,"fmt ");g.setUint32(16,16,!0);g.setUint16(20,b,!0);g.setUint16(22,c,!0);g.setUint32(24,d,!0);g.setUint32(28,d*l,!0);g.setUint16(32,l,!0);g.setUint16(34,e,!0);R(g,36,"data");g.setUint32(40,f.length*h,!0);if(1===b)for(c=44,d=0;d<f.length;d++,c+=2)b=Math.max(-1,Math.min(1,f[d])),
g.setInt16(c,0>b?32768*b:32767*b,!0);else for(c=44,d=0;d<f.length;d++,c+=4)g.setFloat32(c,f[d],!0);c=new window.Blob([new DataView(a)],{type:"audio/wav"});c=window.URL.createObjectURL(c);d=document.createElement("a");document.body.appendChild(d);d.style="display: none";d.href=c;d.download="audio.wav";d.click();window.URL.revokeObjectURL(c)}},_runWasmExport:ba,_getWasmMemorySection:da,_getWasmConstant:ca};O.WasmBoy=F;Object.defineProperty(O,"__esModule",{value:!0})});
//# sourceMappingURL=wasmboy.wasm.umd.js.map
