{"version":3,"file":"wasmboy.wasm.esm.js","sources":["../lib/worker/constants.js","../lib/worker/util.js","../lib/graphics/graphics.js","../lib/graphics/constants.js","../lib/audio/audio.js","../node_modules/idb/lib/idb.js","../node_modules/idb/lib/node.js","../lib/memory/idb.js","../lib/memory/state.js","../lib/memory/autosave.js","../lib/memory/memory.js","../node_modules/responsive-gamepad/dist/responsive-gamepad.esm.js","../lib/controller/controller.js","../lib/worker/smartworker.js","../lib/worker/instantiate.js","worker/wasmboy.wasm.worker.js","worker/graphics.worker.js","worker/audio.worker.js","worker/controller.worker.js","worker/memory.worker.js","../lib/3p/UZIP.js","../lib/wasmboy/fetchrom.js","../lib/wasmboy/loadrom.js","../node_modules/raf/index.js","../node_modules/performance-now/lib/performance-now.js","../lib/wasmboy/render.js","../node_modules/audiobuffer-to-wav/dist/index.esm.js","../lib/debug/debug.js","../lib/wasmboy/onmessage.js","../lib/wasmboy/wasmboy.js","../lib/index.js"],"sourcesContent":["export const WORKER_MESSAGE_TYPE = {\n  CONNECT: 'CONNECT',\n  INSTANTIATE_WASM: 'INSTANTIATE_WASM',\n  CLEAR_MEMORY: 'CLEAR_MEMORY',\n  CLEAR_MEMORY_DONE: 'CLEAR_MEMORY_DONE',\n  GET_MEMORY: 'GET_MEMORY',\n  SET_MEMORY: 'SET_MEMORY',\n  SET_MEMORY_DONE: 'SET_MEMORY_DONE',\n  GET_CONSTANTS: 'GET_CONSTANTS',\n  GET_CONSTANTS_DONE: 'GET_CONSTANTS_DONE',\n  CONFIG: 'CONFIG',\n  RESET_AUDIO_QUEUE: 'RESET_AUDIO_QUEUE',\n  PLAY: 'PLAY',\n  PAUSE: 'PAUSE',\n  UPDATED: 'UPDATED',\n  CRASHED: 'CRASHED',\n  SET_JOYPAD_STATE: 'SET_JOYPAD_STATE',\n  AUDIO_LATENCY: 'AUDIO_LATENCY',\n  RUN_WASM_EXPORT: 'RUN_WASM_EXPORT',\n  GET_WASM_MEMORY_SECTION: 'GET_WASM_MEMORY_SECTION',\n  GET_WASM_CONSTANT: 'GET_WASM_CONSTANT'\n};\n\nexport const WORKER_ID = {\n  LIB: 'LIB',\n  GRAPHICS: 'GRAPHICS',\n  MEMORY: 'MEMORY',\n  CONTROLLER: 'CONTROLLER',\n  AUDIO: 'AUDIO'\n};\n\nexport const MEMORY_TYPE = {\n  CARTRIDGE_RAM: 'CARTRIDGE_RAM',\n  CARTRIDGE_ROM: 'CARTRIDGE_ROM',\n  CARTRIDGE_HEADER: 'CARTRIDGE_HEADER',\n  GAMEBOY_MEMORY: 'GAMEBOY_MEMORY',\n  PALETTE_MEMORY: 'PALETTE_MEMORY',\n  INTERNAL_STATE: 'INTERNAL_STATE'\n};\n","export function getEventData(event) {\n  if (event.data) {\n    return event.data;\n  }\n\n  return event;\n}\n\nexport const isInBrowser = typeof self !== 'undefined';\n\n// Function to read a base64 string as a buffer\nexport function readBase64String(base64String) {\n  if (isInBrowser) {\n    return base64String;\n  } else {\n    return readBase64Buffer(base64String).toString('utf8');\n  }\n}\n\nexport function readBase64Buffer(base64String) {\n  return Buffer.from(base64String.split(',')[1], 'base64');\n}\n","import { GAMEBOY_CAMERA_WIDTH, GAMEBOY_CAMERA_HEIGHT } from './constants';\n\nimport { WORKER_MESSAGE_TYPE } from '../worker/constants';\nimport { getEventData } from '../worker/util';\n\n// Performance tips with canvas:\n// https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas\n\nclass WasmBoyGraphicsService {\n  constructor() {\n    this.worker = undefined;\n    this.updateGraphicsCallback = undefined;\n\n    this.frameQueue = undefined;\n    this.frameQueueRenderPromise = undefined;\n\n    this.canvasElement = undefined;\n    this.canvasContext = undefined;\n    this.canvasImageData = undefined;\n    this.imageDataArray = undefined;\n    this.imageDataArrayChanged = false;\n  }\n\n  initialize(canvasElement, updateGraphicsCallback) {\n    this.updateGraphicsCallback = updateGraphicsCallback;\n\n    // Initialiuze our cached wasm constants\n    // WASMBOY_CURRENT_FRAME_OUTPUT_LOCATION = this.wasmInstance.exports.frameInProgressVideoOutputLocation.valueOf();\n\n    // Reset our frame queue and render promises\n    this.frameQueue = [];\n\n    const initializeTask = async () => {\n      // Prepare our canvas\n      this.canvasElement = canvasElement;\n      this.canvasContext = this.canvasElement.getContext('2d');\n      this.canvasElement.width = GAMEBOY_CAMERA_WIDTH;\n      this.canvasElement.height = GAMEBOY_CAMERA_HEIGHT;\n      this.canvasImageData = this.canvasContext.createImageData(GAMEBOY_CAMERA_WIDTH, GAMEBOY_CAMERA_HEIGHT);\n\n      // Add some css for smooth 8-bit canvas scaling\n      // https://stackoverflow.com/questions/7615009/disable-interpolation-when-scaling-a-canvas\n      // https://caniuse.com/#feat=css-crisp-edges\n      this.canvasElement.style = `\n        image-rendering: optimizeSpeed;\n        image-rendering: -moz-crisp-edges;\n        image-rendering: -webkit-optimize-contrast;\n        image-rendering: -o-crisp-edges;\n        image-rendering: pixelated;\n        -ms-interpolation-mode: nearest-neighbor;\n      `;\n\n      // Fill the canvas with a blank screen\n      // using client width since we are not requiring a width and height oin the canvas\n      // https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth\n      // TODO: Mention respopnsive canvas scaling in the docs\n      this.canvasContext.clearRect(0, 0, this.canvasElement.width, this.canvasElement.height);\n\n      // Finally make sure we set our constants for our worker\n      if (this.worker) {\n        await this.worker.postMessage({\n          type: WORKER_MESSAGE_TYPE.GET_CONSTANTS\n        });\n      }\n    };\n\n    return initializeTask();\n  }\n\n  // Function to set our worker\n  setWorker(worker) {\n    this.worker = worker;\n    this.worker.addMessageListener(event => {\n      const eventData = getEventData(event);\n\n      switch (eventData.message.type) {\n        case WORKER_MESSAGE_TYPE.UPDATED: {\n          this.imageDataArray = new Uint8ClampedArray(eventData.message.imageDataArrayBuffer);\n          this.imageDataArrayChanged = true;\n          return;\n        }\n      }\n    });\n  }\n\n  // Function to render a frame\n  // Will add the frame to the frame queue to be rendered\n  // Returns the promise from this.drawFrameQueue\n  // Which resolves once all frames are rendered\n  renderFrame() {\n    // Check if we have new graphics to show\n    if (!this.imageDataArrayChanged) {\n      return;\n    }\n    this.imageDataArrayChanged = false;\n\n    // Check for a callback for accessing image data\n    if (this.updateGraphicsCallback) {\n      this.updateGraphicsCallback(this.imageDataArray);\n    }\n\n    // Add our new imageData\n    for (let i = 0; i < this.imageDataArray.length; i++) {\n      this.canvasImageData.data[i] = this.imageDataArray[i];\n    }\n\n    this.canvasContext.clearRect(0, 0, GAMEBOY_CAMERA_WIDTH, GAMEBOY_CAMERA_HEIGHT);\n    this.canvasContext.putImageData(this.canvasImageData, 0, 0);\n  }\n}\n\nexport const WasmBoyGraphics = new WasmBoyGraphicsService();\n","// Some shared constants by the graphics lib and worker\n\nexport const GAMEBOY_CAMERA_WIDTH = 160;\nexport const GAMEBOY_CAMERA_HEIGHT = 144;\n","// Tons of help from:\n// https://binji.github.io/2017/02/27/binjgb-on-the-web-part-2.html\n// https://github.com/binji/binjgb/blob/master/demo/demo.js\n// Web Audio API is tricky!\n\nimport { WORKER_MESSAGE_TYPE } from '../worker/constants';\nimport { getEventData } from '../worker/util';\n\n// Define our performance constants\n// Both of these make it sound off\n// Latency controls how much delay audio has, larger = more delay, goal is to be as small as possible\n// Time remaining controls how far ahead we can be., larger = more frames rendered before playing a new set of samples. goal is to be as small as possible. May want to adjust this number according to performance of device\n// These magic numbers just come from preference, can be set as options\nconst DEFAULT_AUDIO_LATENCY_IN_MILLI = 100;\nconst WASMBOY_SAMPLE_RATE = 48000;\n\n// Some canstants that use the ones above that will allow for faster performance\nconst DEFAULT_AUDIO_LATENCY_IN_SECONDS = DEFAULT_AUDIO_LATENCY_IN_MILLI / 1000;\n\n// The minimum fps we can have, before we start time stretching for slowness\nconst SLOW_TIME_STRETCH_MIN_FPS = 57;\n\nclass WasmBoyAudioService {\n  constructor() {\n    // Wasmboy instance and memory\n    this.worker = undefined;\n    this.updateAudioCallback = undefined;\n\n    this.audioContext = undefined;\n    this.audioBuffer = undefined;\n    // The play time for our audio samples\n    this.audioPlaytime = undefined;\n    this.audioSources = [];\n\n    // Average fps for time stretching\n    this.averageTimeStretchFps = [];\n\n    // Our sound output Location, we will initialize this in init\n    this.WASMBOY_SOUND_OUTPUT_LOCATION = 0;\n  }\n\n  initialize(updateAudioCallback) {\n    const initializeTask = async () => {\n      this.updateAudioCallback = updateAudioCallback;\n\n      this.averageTimeStretchFps = [];\n      if (this.audioSources.length > 0) {\n        this.cancelAllAudio();\n      }\n      this.audioSources = [];\n\n      this._createAudioContextIfNone();\n\n      // Lastly get our audio constants\n      return this.worker.postMessage({\n        type: WORKER_MESSAGE_TYPE.GET_CONSTANTS\n      });\n    };\n    return initializeTask();\n  }\n\n  // Ensure that Audio is blessed.\n  // Meaning, the audioContext won't be\n  // affected by any autoplay issues.\n  // https://www.chromium.org/audio-video/autoplay\n  resumeAudioContext() {\n    this._createAudioContextIfNone();\n    if (this.audioContext.state === 'suspended') {\n      this.audioContext.resume();\n      this.audioPlaytime = this.audioContext.currentTime;\n    }\n  }\n\n  resetTimeStretch() {\n    // Simply reset our average FPS counter array\n    this.averageTimeStretchFps = [];\n  }\n\n  setWorker(worker) {\n    this.worker = worker;\n    this.worker.addMessageListener(event => {\n      const eventData = getEventData(event);\n\n      switch (eventData.message.type) {\n        case WORKER_MESSAGE_TYPE.UPDATED: {\n          // Dont wait for raf.\n          // Audio being shown is not dependent on the browser drawing a frame :)\n          this.playAudio(\n            eventData.message.fps,\n            eventData.message.allowFastSpeedStretching,\n            eventData.message.numberOfSamples,\n            eventData.message.leftChannel,\n            eventData.message.rightChannel\n          );\n\n          // Next, send back how much forward latency\n          // we have\n          let latency = 0;\n          if (this.audioContext.currentTime && this.audioContext.currentTime > 0) {\n            latency = this.audioPlaytime - this.audioContext.currentTime;\n          }\n          this.worker.postMessage({\n            type: WORKER_MESSAGE_TYPE.AUDIO_LATENCY,\n            latency\n          });\n          return;\n        }\n      }\n    });\n  }\n\n  // Function to queue up and audio buyffer to be played\n  // Returns a promise so that we may \"sync by audio\"\n  // https://www.reddit.com/r/EmuDev/comments/5gkwi5/gb_apu_sound_emulation/dau8e2w/\n  playAudio(currentFps, allowFastSpeedStretching, numberOfSamples, leftChannelBuffer, rightChannelBuffer) {\n    // Find our averageFps\n    let fps = currentFps || 60;\n\n    // Check if we got a huge fps outlier.\n    // If so, let's just reset our average.\n    // This will fix the slow gradual ramp down\n    const fpsDifference = Math.abs(currentFps - this.averageTimeStretchFps[this.averageTimeStretchFps.length - 1]);\n    if (fpsDifference && fpsDifference >= 15) {\n      this.resetTimeStretch();\n    }\n\n    // Find our average fps for time stretching\n    this.averageTimeStretchFps.push(currentFps);\n    // TODO Make the multiplier Const the timeshift speed\n    if (this.averageTimeStretchFps.length > Math.floor(SLOW_TIME_STRETCH_MIN_FPS * 3)) {\n      this.averageTimeStretchFps.shift();\n    }\n\n    // Make sure we have a minimum number of time stretch fps timestamps to judge the average time\n    if (this.averageTimeStretchFps.length >= SLOW_TIME_STRETCH_MIN_FPS) {\n      fps = this.averageTimeStretchFps.reduce((accumulator, currentValue) => {\n        return accumulator + currentValue;\n      });\n      fps = Math.floor(fps / this.averageTimeStretchFps.length);\n    }\n\n    // Find if we should time stretch this sample or not from our current fps\n    let playbackRate = 1.0;\n    if (fps < SLOW_TIME_STRETCH_MIN_FPS || allowFastSpeedStretching) {\n      // Has to be 60 to get accurent playback regarless of fps cap\n      playbackRate = playbackRate * (fps / 60);\n      if (playbackRate <= 0) {\n        playbackRate = 0.01;\n      }\n    }\n\n    // Create an audio buffer, with a left and right channel\n    this.audioBuffer = this.audioContext.createBuffer(2, numberOfSamples, WASMBOY_SAMPLE_RATE);\n    if (this.audioBuffer.copyToChannel) {\n      this.audioBuffer.copyToChannel(new Float32Array(leftChannelBuffer), 0, 0);\n      this.audioBuffer.copyToChannel(new Float32Array(rightChannelBuffer), 1, 0);\n    } else {\n      // Safari fallback\n      this.audioBuffer.getChannelData(0).set(new Float32Array(leftChannelBuffer));\n      this.audioBuffer.getChannelData(1).set(new Float32Array(rightChannelBuffer));\n    }\n\n    // Get an AudioBufferSourceNode.\n    // This is the AudioNode to use when we want to play an AudioBuffer\n    let source = this.audioContext.createBufferSource();\n\n    // set the buffer in the AudioBufferSourceNode\n    source.buffer = this.audioBuffer;\n\n    // Set our playback rate for time resetretching\n    source.playbackRate.setValueAtTime(playbackRate, this.audioContext.currentTime);\n\n    // Call our callback, if we have one\n    let finalNode = source;\n    if (this.updateAudioCallback) {\n      const responseNode = this.updateAudioCallback(this.audioContext, source);\n      if (responseNode) {\n        finalNode = responseNode;\n      }\n    }\n\n    // connect the AudioBufferSourceNode to the\n    // destination so we can hear the sound\n    finalNode.connect(this.audioContext.destination);\n\n    // Check if we made it in time\n    // Idea from: https://github.com/binji/binjgb/blob/master/demo/demo.js\n    let audioContextCurrentTime = this.audioContext.currentTime;\n    let audioContextCurrentTimeWithLatency = audioContextCurrentTime + DEFAULT_AUDIO_LATENCY_IN_SECONDS;\n    this.audioPlaytime = this.audioPlaytime || audioContextCurrentTimeWithLatency;\n    if (this.audioPlaytime < audioContextCurrentTime) {\n      // We took too long, or something happen and hiccup'd the emulator, reset audio playback times\n      this.cancelAllAudio();\n      this.audioPlaytime = audioContextCurrentTimeWithLatency;\n    }\n\n    // start the source playing\n    source.start(this.audioPlaytime);\n\n    // Set our new audio playtime goal\n    const sourcePlaybackLength = numberOfSamples / (WASMBOY_SAMPLE_RATE * playbackRate);\n    this.audioPlaytime = this.audioPlaytime + sourcePlaybackLength;\n\n    // Cancel all audio sources on the tail that play before us\n    while (\n      this.audioSources[this.audioSources.length - 1] &&\n      this.audioSources[this.audioSources.length - 1].playtime <= this.audioPlaytime\n    ) {\n      this.audioSources[this.audioSources.length - 1].source.stop();\n      this.audioSources.pop();\n    }\n\n    // Add the source so we can stop this if needed\n    this.audioSources.push({\n      source: source,\n      playTime: this.audioPlaytime,\n      fps: fps\n    });\n\n    // Shift ourselves out when finished\n    const timeUntilSourceEnds = this.audioPlaytime - this.audioContext.currentTime + 500;\n    setTimeout(() => {\n      this.audioSources.shift();\n    }, timeUntilSourceEnds);\n  }\n\n  cancelAllAudio(stopCurrentAudio) {\n    if (!this.audioContext) {\n      return;\n    }\n\n    // Cancel all audio That was queued to play\n    for (let i = 0; i < this.audioSources.length; i++) {\n      if (stopCurrentAudio || this.audioSources[i].playTime > this.audioPlaytime) {\n        this.audioSources[i].source.stop();\n      }\n    }\n\n    // Reset our audioPlaytime\n    this.audioPlaytime = this.audioContext.currentTime + DEFAULT_AUDIO_LATENCY_IN_SECONDS;\n  }\n\n  _createAudioContextIfNone() {\n    if (!this.audioContext) {\n      // Get our Audio context\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    }\n  }\n}\n\nexport const WasmBoyAudio = new WasmBoyAudioService();\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","if (typeof indexedDB != 'undefined') {\n  module.exports = require('./idb.js');\n}\nelse {\n  module.exports = {\n    open: function () {\n      return Promise.reject('IDB requires a browser environment');\n    },\n    delete: function () {\n      return Promise.reject('IDB requires a browser environment');\n    }\n  };\n}\n","// Get our idb instance, and initialize to asn idb-keyval\n// This is so we don't get the default keyval DB name. And will allow\n// Parent projects to use the slimmer idb keyval\n// https://www.npmjs.com/package/idb\n\n// Need to wrap in rollup replace to stop\n// node commonjs from breaking\n/*ROLLUP_REPLACE_BROWSER\nimport idb from 'idb';\nROLLUP_REPLACE_BROWSER*/\n\nlet keyval = false;\n\n// Get our idb dPromise\nif (typeof window !== 'undefined') {\n  const dbPromise = idb.open('wasmboy', 1, upgradeDB => {\n    upgradeDB.createObjectStore('keyval');\n  });\n\n  // Get our idb-keyval instance\n  keyval = {\n    get(key) {\n      return dbPromise.then(db => {\n        return db\n          .transaction('keyval')\n          .objectStore('keyval')\n          .get(key);\n      });\n    },\n    set(key, val) {\n      return dbPromise.then(db => {\n        const tx = db.transaction('keyval', 'readwrite');\n        tx.objectStore('keyval').put(val, key);\n        return tx.complete;\n      });\n    },\n    delete(key) {\n      return dbPromise.then(db => {\n        const tx = db.transaction('keyval', 'readwrite');\n        tx.objectStore('keyval').delete(key);\n        return tx.complete;\n      });\n    },\n    clear() {\n      return dbPromise.then(db => {\n        const tx = db.transaction('keyval', 'readwrite');\n        tx.objectStore('keyval').clear();\n        return tx.complete;\n      });\n    },\n    keys() {\n      return dbPromise.then(db => {\n        const tx = db.transaction('keyval');\n        const keys = [];\n        const store = tx.objectStore('keyval');\n\n        // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n        // openKeyCursor isn't supported by Safari, so we fall back\n        (store.iterateKeyCursor || store.iterateCursor).call(store, cursor => {\n          if (!cursor) return;\n          keys.push(cursor.key);\n          cursor.continue();\n        });\n\n        return tx.complete.then(() => keys);\n      });\n    }\n  };\n}\n\nexport const idbKeyval = keyval;\n","// Functions here are depedent on WasmBoyMemory state.\n// Thus me bound using .bind() on functions\n\n//  Will save the state in parts, to easy memory map changes:\n// https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\nconst WASMBOY_SAVE_STATE_SCHEMA = {\n  wasmboyMemory: {\n    wasmBoyInternalState: [],\n    wasmBoyPaletteMemory: [],\n    gameBoyMemory: [],\n    cartridgeRam: []\n  },\n  date: undefined,\n  isAuto: undefined\n};\n\n// Function to return a save state of the current memory\nexport function getSaveState() {\n  // Save our internal wasmboy state to memory\n  // Should be done whenever we send back memory\n  // this.wasmInstance.exports.saveState();\n\n  let saveState = Object.assign({}, WASMBOY_SAVE_STATE_SCHEMA);\n\n  saveState.wasmboyMemory.wasmBoyInternalState = this.internalState;\n  saveState.wasmboyMemory.wasmBoyPaletteMemory = this.paletteMemory;\n  saveState.wasmboyMemory.gameBoyMemory = this.gameboyMemory;\n  saveState.wasmboyMemory.cartridgeRam = this.cartridgeRam;\n  saveState.date = Date.now();\n  saveState.isAuto = false;\n\n  if (this.saveStateCallback) {\n    this.saveStateCallback(saveState);\n  }\n\n  return saveState;\n}\n","// Functions here are depedent on WasmBoyMemory state.\n// Thus me bound using .bind() on functions\n\n// Need to add a return value, and force all code in the block to be sync\n// https://stackoverflow.com/questions/7255649/window-onbeforeunload-not-working\n// http://vaughnroyko.com/idbonbeforeunload/\n// https://bugzilla.mozilla.org/show_bug.cgi?id=870645\n\n// Solution:\n// ~~Try to force sync: https://www.npmjs.com/package/deasync~~ Didn't work, requires fs\n// Save to local storage, and pick it back up in init: https://bugs.chromium.org/p/chromium/issues/detail?id=144862\n\n// import Functions involving GB and WasmBoy memory\nimport { getSaveState } from './state.js';\n\n// Function to create a save state, and store it as a localstorage token\nfunction _prepareAndStoreAutoSave() {\n  // Check if the game is currently playing\n  if (!this.internalState) {\n    return null;\n  }\n\n  // Get our cartridge ram and header\n  // Use this.cartridgeHeader and this.cartridgeRam\n  //const header = getCartridgeHeader.bind(this)();\n  //const cartridgeRam = getCartridgeRam.bind(this)();\n\n  // Get our save state, and un type our arrays\n  const saveState = getSaveState.bind(this)();\n  const saveStateMemoryKeys = Object.keys(saveState.wasmboyMemory);\n  for (let i = 0; i < saveStateMemoryKeys.length; i++) {\n    saveState.wasmboyMemory[saveStateMemoryKeys[i]] = Array.prototype.slice.call(saveState.wasmboyMemory[saveStateMemoryKeys[i]]);\n  }\n\n  // Set isAuto\n  saveState.isAuto = true;\n\n  // Need to conert types arrays, and back, or selse wll get indexed JSON\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\n\n  localStorage.setItem(\n    this.WASMBOY_UNLOAD_STORAGE,\n    JSON.stringify({\n      header: Array.prototype.slice.call(this.cartridgeHeader),\n      cartridgeRam: Array.prototype.slice.call(this.cartridgeRam),\n      saveState: saveState\n    })\n  );\n\n  return null;\n}\n\n// Function to find any autosaves in localstorage, and commit them to our idb\nfunction _findAndCommitAutoSave() {\n  const findAndCommitAutoSaveTask = async () => {\n    // Load any unloaded storage in our localStorage\n    const unloadStorage = localStorage.getItem(this.WASMBOY_UNLOAD_STORAGE);\n    if (unloadStorage) {\n      const unloadStorageObject = JSON.parse(unloadStorage);\n      localStorage.removeItem(this.WASMBOY_UNLOAD_STORAGE);\n\n      const header = new Uint8Array(unloadStorageObject.header);\n      const cartridgeRam = new Uint8Array(unloadStorageObject.cartridgeRam);\n\n      // Get our save state, and re-type our array\n      const saveState = unloadStorageObject.saveState;\n      if (saveState) {\n        const saveStateMemoryKeys = Object.keys(saveState.wasmboyMemory);\n        for (let i = 0; i < saveStateMemoryKeys.length; i++) {\n          saveState.wasmboyMemory[saveStateMemoryKeys[i]] = new Uint8Array(saveState.wasmboyMemory[saveStateMemoryKeys[i]]);\n        }\n      }\n\n      await this.saveCartridgeRam(header, cartridgeRam);\n      await this.saveState(header, saveState);\n    }\n  };\n\n  return findAndCommitAutoSaveTask();\n}\n\n// Function to set event listeners to run our unload handler\nexport function initializeAutoSave() {\n  // Set listeners to ensure we save our cartridge ram before closing\n  window.addEventListener(\n    'beforeunload',\n    () => {\n      _prepareAndStoreAutoSave.bind(this)();\n    },\n    false\n  );\n  window.addEventListener(\n    'unload',\n    () => {\n      _prepareAndStoreAutoSave.bind(this)();\n    },\n    false\n  );\n  window.addEventListener(\n    'pagehide',\n    () => {\n      _prepareAndStoreAutoSave.bind(this)();\n    },\n    false\n  );\n  // Mobile Page visibility, for pressing home, closing tabs, task switcher, etc...\n  // https://www.igvita.com/2015/11/20/dont-lose-user-and-app-state-use-page-visibility/\n  document.addEventListener('visibilitychange', () => {\n    // fires when user switches tabs, apps, goes to homescreen, etc.\n    // NOTE: This will not create a new save state in desktop browser,\n    // Because the localstorage string is only picked up on refresh :)\n    // Unless you force kill the browser or something, which is what we want\n    // Anyways\n    if (document.visibilityState === 'hidden') {\n      _prepareAndStoreAutoSave.bind(this)();\n    }\n  });\n\n  // Restore any autosave lingering to be committed\n  return _findAndCommitAutoSave.bind(this)();\n}\n","import { idbKeyval } from './idb';\n\n// Import worker stuff\nimport { WORKER_MESSAGE_TYPE, MEMORY_TYPE } from '../worker/constants';\nimport { getEventData } from '../worker/util';\n\n// import Functions involving GB and WasmBoy memory\nimport { getSaveState } from './state.js';\nimport { initializeAutoSave } from './autosave.js';\n\nclass WasmBoyMemoryService {\n  constructor() {\n    this.worker = undefined;\n    this.saveStateCallback = undefined;\n    this.loadedCartridgeMemoryState = {\n      ROM: false,\n      RAM: false\n    };\n\n    // Our different types of memory\n    this.cartridgeRom = undefined;\n    this.cartridgeHeader = undefined;\n    this.cartridgeRam = undefined;\n    this.gameboyMemory = undefined;\n    this.paletteMemory = undefined;\n    this.internalState = undefined;\n\n    // Going to set the key for idbKeyval as the cartridge header.\n    // Then, for each cartridge, it will return an object.\n    // there will be a cartridgeRam Key, settings Key, and a saveState key\n    // Not going to make one giant object, as we want to keep idb transactions light and fast\n    this.WASMBOY_UNLOAD_STORAGE = 'WASMBOY_UNLOAD_STORAGE';\n\n    // Define some constants since calls to wasm are expensive\n    this.WASMBOY_GAME_BYTES_LOCATION = 0;\n    this.WASMBOY_GAME_RAM_BANKS_LOCATION = 0;\n    this.WASMBOY_INTERNAL_STATE_SIZE = 0;\n    this.WASMBOY_INTERNAL_STATE_LOCATION = 0;\n    this.WASMBOY_INTERNAL_MEMORY_SIZE = 0;\n    this.WASMBOY_INTERNAL_MEMORY_LOCATION = 0;\n    this.WASMBOY_PALETTE_MEMORY_SIZE = 0;\n    this.WASMBOY_PALETTE_MEMORY_LOCATION = 0;\n  }\n\n  initialize(headless, saveStateCallback) {\n    const initializeTask = async () => {\n      if (headless) {\n        this.saveStateCallback = saveStateCallback;\n\n        await this._initializeConstants();\n      } else {\n        this.saveStateCallback = saveStateCallback;\n\n        await this._initializeConstants();\n\n        // initialize the autosave feature\n        await initializeAutoSave.call(this);\n      }\n    };\n\n    return initializeTask();\n  }\n\n  setWorker(worker) {\n    this.worker = worker;\n\n    // Also set our handler\n    this.worker.addMessageListener(event => {\n      const eventData = getEventData(event);\n\n      switch (eventData.message.type) {\n        case WORKER_MESSAGE_TYPE.UPDATED: {\n          // Simply set our memory\n          const memoryTypes = Object.keys(eventData.message);\n          delete memoryTypes.type;\n\n          if (memoryTypes.includes(MEMORY_TYPE.CARTRIDGE_ROM)) {\n            this.cartridgeRom = new Uint8Array(eventData.message[MEMORY_TYPE.CARTRIDGE_ROM]);\n          }\n          if (memoryTypes.includes(MEMORY_TYPE.CARTRIDGE_RAM)) {\n            this.cartridgeRam = new Uint8Array(eventData.message[MEMORY_TYPE.CARTRIDGE_RAM]);\n          }\n          if (memoryTypes.includes(MEMORY_TYPE.GAMEBOY_MEMORY)) {\n            this.gameboyMemory = new Uint8Array(eventData.message[MEMORY_TYPE.GAMEBOY_MEMORY]);\n          }\n          if (memoryTypes.includes(MEMORY_TYPE.PALETTE_MEMORY)) {\n            this.paletteMemory = new Uint8Array(eventData.message[MEMORY_TYPE.PALETTE_MEMORY]);\n          }\n          if (memoryTypes.includes(MEMORY_TYPE.INTERNAL_STATE)) {\n            this.internalState = new Uint8Array(eventData.message[MEMORY_TYPE.INTERNAL_STATE]);\n          }\n\n          return;\n        }\n      }\n    });\n  }\n\n  getLoadedCartridgeMemoryState() {\n    return this.loadedCartridgeMemoryState;\n  }\n\n  clearMemory() {\n    // Clear Wasm memory\n    // https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\n    return this.worker\n      .postMessage({\n        type: WORKER_MESSAGE_TYPE.CLEAR_MEMORY\n      })\n      .then(event => {\n        this.loadedCartridgeMemoryState.ROM = false;\n        this.loadedCartridgeMemoryState.RAM = false;\n\n        // Reset everything\n        this.cartridgeRom = undefined;\n        this.cartridgeHeader = undefined;\n        this.cartridgeRam = undefined;\n        this.gameboyMemory = undefined;\n        this.paletteMemory = undefined;\n        this.internalState = undefined;\n      });\n  }\n\n  loadCartridgeRom(ROM) {\n    const loadTask = async () => {\n      const workerMemoryObject = {};\n      workerMemoryObject[MEMORY_TYPE.CARTRIDGE_ROM] = ROM.buffer;\n\n      // Don't pass the rom as a transferrable, since,\n      // We want to keep a copy of it for reset\n      await this.worker\n        .postMessage({\n          type: WORKER_MESSAGE_TYPE.SET_MEMORY,\n          ...workerMemoryObject\n        })\n        .then(event => {\n          this.loadedCartridgeMemoryState.ROM = true;\n        });\n\n      // Also get our cartridge header\n      await this.worker\n        .postMessage({\n          type: WORKER_MESSAGE_TYPE.GET_MEMORY,\n          memoryTypes: [MEMORY_TYPE.CARTRIDGE_ROM, MEMORY_TYPE.CARTRIDGE_HEADER]\n        })\n        .then(event => {\n          const eventData = getEventData(event);\n          this.cartridgeRom = new Uint8Array(eventData.message[MEMORY_TYPE.CARTRIDGE_ROM]);\n          this.cartridgeHeader = new Uint8Array(eventData.message[MEMORY_TYPE.CARTRIDGE_HEADER]);\n        });\n    };\n\n    return loadTask();\n  }\n\n  // Function to save the cartridge ram\n  // This emulates the cartridge having a battery to\n  // Keep things like Pokemon Save data in memory\n  // Also allows passing in a a Uint8Array header and ram to be set manually\n  saveCartridgeRam(passedHeader, passedCartridgeRam) {\n    const saveCartridgeRamTask = async () => {\n      // Get the entire header in byte memory\n      // Each version of a rom can have similar title and checksums\n      // Therefore comparing all of it should help with this :)\n      // https://drive.google.com/file/d/0B7y-o-Uytiv9OThXWXFCM1FPbGs/view\n      let header;\n      let cartridgeRam;\n      if (passedHeader && passedCartridgeRam) {\n        header = passedHeader;\n        cartridgeRam = passedCartridgeRam;\n      } else {\n        header = this.cartridgeHeader;\n        cartridgeRam = this.cartridgeRam;\n      }\n\n      if (!header || !cartridgeRam) {\n        throw new Error('Error parsing the cartridgeRam or cartridge header');\n      }\n\n      // Get our cartridge object\n      let cartridgeObject = await idbKeyval.get(header);\n      if (!cartridgeObject) {\n        cartridgeObject = {};\n      }\n\n      // Set the cartridgeRam to our cartridgeObject\n      cartridgeObject.cartridgeRam = cartridgeRam;\n\n      await idbKeyval.set(header, cartridgeObject);\n    };\n\n    return saveCartridgeRamTask();\n  }\n\n  // function to load the cartridge ram\n  // opposite of above\n  loadCartridgeRam() {\n    const loadCartridgeRamTask = async () => {\n      const header = this.cartridgeHeader;\n\n      if (!header) {\n        throw new Error('Error parsing the cartridge header');\n      }\n\n      const cartridgeObject = await idbKeyval.get(header);\n\n      if (!cartridgeObject || !cartridgeObject.cartridgeRam) {\n        return;\n      }\n\n      // Set the cartridgeRam\n      // Don't transfer, because we want to keep a reference to it\n      const workerMemoryObject = {};\n      workerMemoryObject[MEMORY_TYPE.CARTRIDGE_RAM] = cartridgeObject.cartridgeRam.buffer;\n      await this.worker\n        .postMessage({\n          type: WORKER_MESSAGE_TYPE.SET_MEMORY,\n          ...workerMemoryObject\n        })\n        .then(event => {\n          this.loadedCartridgeMemoryState.RAM = true;\n          this.cartridgeRam = cartridgeObject.cartridgeRam;\n        });\n    };\n    return loadCartridgeRamTask();\n  }\n\n  // Function to save the state to the indexeddb\n  saveState(passedHeader, passedSaveState) {\n    const saveStateTask = async () => {\n      // Get our save state\n      let saveState;\n      let header;\n      if (passedHeader && passedSaveState) {\n        saveState = passedSaveState;\n        header = passedHeader;\n      } else {\n        saveState = getSaveState.call(this);\n        header = this.cartridgeHeader;\n      }\n\n      if (!header) {\n        throw new Error('Error parsing the cartridge header');\n      }\n\n      let cartridgeObject = await idbKeyval.get(header);\n\n      if (!cartridgeObject) {\n        cartridgeObject = {};\n      }\n      if (!cartridgeObject.saveStates) {\n        cartridgeObject.saveStates = [];\n      }\n\n      cartridgeObject.saveStates.push(saveState);\n\n      await idbKeyval.set(header, cartridgeObject);\n\n      return saveState;\n    };\n\n    return saveStateTask();\n  }\n\n  loadState(saveState) {\n    const loadStateTask = async () => {\n      const header = this.cartridgeHeader;\n\n      if (!header) {\n        throw new Error('Error getting the cartridge header');\n      }\n\n      if (!saveState) {\n        const cartridgeObject = await idbKeyval.get(header);\n        if (!cartridgeObject || !cartridgeObject.saveStates) {\n          throw new Error('No Save State passed, and no cartridge object found');\n          return;\n        }\n        saverState = cartridgeObject.saveStates[0];\n      }\n\n      const workerMemoryObject = {};\n      workerMemoryObject[MEMORY_TYPE.CARTRIDGE_RAM] = saveState.wasmboyMemory.cartridgeRam.buffer;\n      workerMemoryObject[MEMORY_TYPE.GAMEBOY_MEMORY] = saveState.wasmboyMemory.gameBoyMemory.buffer;\n      workerMemoryObject[MEMORY_TYPE.PALETTE_MEMORY] = saveState.wasmboyMemory.wasmBoyPaletteMemory.buffer;\n      workerMemoryObject[MEMORY_TYPE.INTERNAL_STATE] = saveState.wasmboyMemory.wasmBoyInternalState.buffer;\n\n      await this.worker.postMessage(\n        {\n          type: WORKER_MESSAGE_TYPE.SET_MEMORY,\n          ...workerMemoryObject\n        },\n        [\n          workerMemoryObject[MEMORY_TYPE.CARTRIDGE_RAM],\n          workerMemoryObject[MEMORY_TYPE.GAMEBOY_MEMORY],\n          workerMemoryObject[MEMORY_TYPE.PALETTE_MEMORY],\n          workerMemoryObject[MEMORY_TYPE.INTERNAL_STATE]\n        ]\n      );\n\n      await this.worker\n        .postMessage({\n          type: WORKER_MESSAGE_TYPE.GET_MEMORY,\n          memoryTypes: [MEMORY_TYPE.CARTRIDGE_RAM, MEMORY_TYPE.GAMEBOY_MEMORY, MEMORY_TYPE.PALETTE_MEMORY, MEMORY_TYPE.INTERNAL_STATE]\n        })\n        .then(event => {\n          const eventData = getEventData(event);\n          this.cartridgeRam = eventData.message[MEMORY_TYPE.CARTRIDGE_RAM];\n          this.gameboyMemory = eventData.message[MEMORY_TYPE.GAMEBOY_MEMORY];\n          this.paletteMemory = eventData.message[MEMORY_TYPE.PALETTE_MEMORY];\n          this.internalState = eventData.message[MEMORY_TYPE.INTERNAL_STATE];\n        });\n    };\n\n    return loadStateTask();\n  }\n\n  // Function to return the current cartridge object\n  getCartridgeObject() {\n    return idbKeyval.get(this.cartridgeHeader);\n  }\n\n  // Function to return all informationh aboyut the currently loaded cart.\n  // This will include, the ROM, the RAM, the header, and the indivudal pieces of the header\n  // See: http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n  getCartridgeInfo() {\n    if (!this.loadedCartridgeMemoryState.ROM) {\n      return Promise.reject('No ROM has been loaded');\n    }\n\n    let getCartridgeInfoTask = async () => {\n      const cartridgeInfo = {};\n\n      cartridgeInfo.header = this.cartridgeHeader;\n      cartridgeInfo.ROM = this.cartridgeRom;\n      cartridgeInfo.RAM = this.cartridgeRam;\n\n      // Now parse our header for additional information\n      cartridgeInfo.nintendoLogo = cartridgeInfo.ROM.slice(0x104, 0x134);\n\n      cartridgeInfo.title = cartridgeInfo.ROM.slice(0x134, 0x144);\n      cartridgeInfo.titleAsString = String.fromCharCode.apply(null, cartridgeInfo.title);\n\n      cartridgeInfo.manufacturerCode = cartridgeInfo.ROM.slice(0x13f, 0x143);\n\n      cartridgeInfo.CGBFlag = cartridgeInfo.ROM[0x143];\n\n      cartridgeInfo.newLicenseeCode = cartridgeInfo.ROM.slice(0x144, 0x146);\n\n      cartridgeInfo.SGBFlag = cartridgeInfo.ROM[0x146];\n\n      cartridgeInfo.cartridgeType = cartridgeInfo.ROM[0x147];\n\n      cartridgeInfo.ROMSize = cartridgeInfo.ROM[0x148];\n\n      cartridgeInfo.RAMSize = cartridgeInfo.ROM[0x149];\n\n      cartridgeInfo.destinationCode = cartridgeInfo.ROM[0x14a];\n\n      cartridgeInfo.oldLicenseeCode = cartridgeInfo.ROM[0x14b];\n\n      cartridgeInfo.maskROMVersionNumber = cartridgeInfo.ROM[0x14c];\n\n      cartridgeInfo.headerChecksum = cartridgeInfo.ROM[0x14d];\n\n      cartridgeInfo.globalChecksum = cartridgeInfo.ROM.slice(0x14e, 0x150);\n\n      return cartridgeInfo;\n    };\n\n    return getCartridgeInfoTask();\n  }\n\n  _initializeConstants() {\n    // Initialize our cached wasm constants\n    return this.worker\n      .postMessage({\n        type: WORKER_MESSAGE_TYPE.GET_CONSTANTS\n      })\n      .then(event => {\n        const eventData = getEventData(event);\n        Object.keys(this).forEach(key => {\n          if (eventData.message[key] !== undefined) {\n            this[key] = eventData.message[key];\n          }\n        });\n      });\n  }\n}\n\n// Create a singleton to export\nexport const WasmBoyMemory = new WasmBoyMemoryService();\n","// Define a keyboard key schema\nvar keyInputSchema = {\n  ID: undefined,\n  ACTIVE: false,\n  KEY_CODE: undefined\n\n  // Define a gamepad button schema\n  // https://w3c.github.io/gamepad/#remapping\n};var gamepadInputSchema = {\n  ID: undefined,\n  ACTIVE: false,\n  BUTTON_ID: undefined,\n  JOYSTICK: {\n    AXIS_ID: undefined,\n    IS_POSITIVE: undefined\n  }\n};\n\nvar touchInputSchema = {\n  ID: undefined,\n  ACTIVE: false,\n  ELEMENT: undefined,\n  TYPE: undefined,\n  DIRECTION: undefined,\n  EVENT_HANDLER: undefined,\n  BOUNDING_RECT: undefined\n\n  // Define our finaly kerboard schema here\n};var keyMapSchema = {\n  UP: {\n    KEYBOARD: [],\n    GAMEPAD: [],\n    TOUCHPAD: []\n  },\n  RIGHT: {\n    KEYBOARD: [],\n    GAMEPAD: [],\n    TOUCHPAD: []\n  },\n  DOWN: {\n    KEYBOARD: [],\n    GAMEPAD: [],\n    TOUCHPAD: []\n  },\n  LEFT: {\n    KEYBOARD: [],\n    GAMEPAD: [],\n    TOUCHPAD: []\n  },\n  A: {\n    KEYBOARD: [],\n    GAMEPAD: [],\n    TOUCHPAD: []\n  },\n  B: {\n    KEYBOARD: [],\n    GAMEPAD: [],\n    TOUCHPAD: []\n  },\n  SELECT: {\n    KEYBOARD: [],\n    GAMEPAD: [],\n    TOUCHPAD: []\n  },\n  START: {\n    KEYBOARD: [],\n    GAMEPAD: [],\n    TOUCHPAD: []\n  }\n\n  // Function to return an ID for our input\n  // https://stackoverflow.com/questions/6860853/generate-random-string-for-div-id\n};function getInputId() {\n\n  var idGenerator = function idGenerator() {\n    return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(2, 10);\n  };\n\n  var stringId = \"\" + idGenerator() + idGenerator();\n  return stringId.slice();\n}\n\nfunction getKeyInput(keyCode) {\n  var input = Object.assign({}, keyInputSchema);\n  input.ID = getInputId();\n  input.KEY_CODE = keyCode;\n  return input;\n}\n\nfunction getGamepadInput(gamepadButtonId, axisId, axisIsPositive) {\n  var input = Object.assign({}, gamepadInputSchema);\n  input.ID = getInputId();\n  input.JOYSTICK = Object.assign({}, gamepadInputSchema.JOYSTICK);\n  if (gamepadButtonId || gamepadButtonId === 0) {\n    input.BUTTON_ID = gamepadButtonId;\n  } else if (axisId !== undefined && axisIsPositive !== undefined) {\n    input.JOYSTICK.AXIS_ID = axisId;\n    input.JOYSTICK.IS_POSITIVE = axisIsPositive;\n  }\n  return input;\n}\n\nfunction getTouchInput(element, type, direction, eventHandler) {\n  var input = Object.assign({}, touchInputSchema);\n\n  input.ID = getInputId();\n\n  // TODO: Check the type for a valid type\n\n  // Add our passed parameters\n  input.ELEMENT = element;\n  input.TYPE = type;\n  input.DIRECTION = direction;\n  input.EVENT_HANDLER = eventHandler;\n\n  // Add our bounding rect\n  var boundingRect = input.ELEMENT.getBoundingClientRect();\n  input.BOUNDING_RECT = boundingRect;\n\n  // Define our eventListener functions\n  var eventListenerCallback = function eventListenerCallback(event) {\n    if (input.EVENT_HANDLER) {\n      input.EVENT_HANDLER(event);\n    }\n  };\n\n  // Add event listeners to the element\n  input.ELEMENT.addEventListener(\"touchstart\", eventListenerCallback);\n  input.ELEMENT.addEventListener(\"touchmove\", eventListenerCallback);\n  input.ELEMENT.addEventListener(\"touchend\", eventListenerCallback);\n  input.ELEMENT.addEventListener(\"mousedown\", eventListenerCallback);\n  input.ELEMENT.addEventListener(\"mouseup\", eventListenerCallback);\n\n  return input;\n}\n\nfunction KeyMapSchema() {\n  return Object.assign({}, keyMapSchema);\n}\n\nvar Key = {\n\n  BACKSPACE: 8,\n  TAB: 9,\n  RETURN: 13,\n  SHIFT: 16,\n  CTRL: 17,\n  ALT: 18,\n  ESCAPE: 27,\n  SPACE: 32,\n  PAGE_UP: 33,\n  PAGE_DOWN: 34,\n  END: 35,\n  HOME: 36,\n\n  ARROW_LEFT: 37,\n  ARROW_UP: 38,\n  ARROW_RIGHT: 39,\n  ARROW_DOWN: 40,\n\n  W: 87,\n  A: 65,\n  S: 83,\n  D: 68,\n  Q: 81,\n  E: 69,\n  X: 88,\n  Z: 90,\n\n  SEMI_COLON: 186,\n  SINGLE_QUOTE: 222,\n  BACK_SLASH: 220,\n\n  NUMPAD_0: 96,\n  NUMPAD_1: 97,\n  NUMPAD_2: 98,\n  NUMPAD_3: 99,\n  NUMPAD_4: 100,\n  NUMPAD_5: 101,\n  NUMPAD_6: 102,\n  NUMPAD_7: 103,\n  NUMPAD_8: 104,\n  NUMPAD_9: 105\n};\n\nvar keymap = KeyMapSchema();\n\n// Up\nkeymap.UP.KEYBOARD.push(getKeyInput(Key.ARROW_UP));\nkeymap.UP.KEYBOARD.push(getKeyInput(Key.W));\nkeymap.UP.KEYBOARD.push(getKeyInput(Key.NUMPAD_8));\nkeymap.UP.GAMEPAD.push(getGamepadInput(12));\nkeymap.UP.GAMEPAD.push(getGamepadInput(false, 1, false));\nkeymap.UP.GAMEPAD.push(getGamepadInput(false, 3, false));\n\n// Right\nkeymap.RIGHT.KEYBOARD.push(getKeyInput(Key.ARROW_RIGHT));\nkeymap.RIGHT.KEYBOARD.push(getKeyInput(Key.D));\nkeymap.RIGHT.KEYBOARD.push(getKeyInput(Key.NUMPAD_6));\nkeymap.RIGHT.GAMEPAD.push(getGamepadInput(15));\nkeymap.RIGHT.GAMEPAD.push(getGamepadInput(false, 0, true));\nkeymap.RIGHT.GAMEPAD.push(getGamepadInput(false, 2, true));\n\n// Down\nkeymap.DOWN.KEYBOARD.push(getKeyInput(Key.ARROW_DOWN));\nkeymap.DOWN.KEYBOARD.push(getKeyInput(Key.S));\nkeymap.DOWN.KEYBOARD.push(getKeyInput(Key.NUMPAD_5));\nkeymap.DOWN.KEYBOARD.push(getKeyInput(Key.NUMPAD_2));\nkeymap.DOWN.GAMEPAD.push(getGamepadInput(13));\nkeymap.DOWN.GAMEPAD.push(getGamepadInput(false, 1, true));\nkeymap.DOWN.GAMEPAD.push(getGamepadInput(false, 3, true));\n\n// Left\nkeymap.LEFT.KEYBOARD.push(getKeyInput(Key.ARROW_LEFT));\nkeymap.LEFT.KEYBOARD.push(getKeyInput(Key.A));\nkeymap.LEFT.KEYBOARD.push(getKeyInput(Key.NUMPAD_4));\nkeymap.LEFT.GAMEPAD.push(getGamepadInput(14));\nkeymap.LEFT.GAMEPAD.push(getGamepadInput(false, 0, false));\nkeymap.LEFT.GAMEPAD.push(getGamepadInput(false, 2, false));\n\n// A\nkeymap.A.KEYBOARD.push(getKeyInput(Key.X));\nkeymap.A.KEYBOARD.push(getKeyInput(Key.SEMI_COLON));\nkeymap.A.KEYBOARD.push(getKeyInput(Key.NUMPAD_7));\nkeymap.A.GAMEPAD.push(getGamepadInput(0));\nkeymap.A.GAMEPAD.push(getGamepadInput(1));\n\n// B\nkeymap.B.KEYBOARD.push(getKeyInput(Key.Z));\nkeymap.B.KEYBOARD.push(getKeyInput(Key.ESCAPE));\nkeymap.B.KEYBOARD.push(getKeyInput(Key.SINGLE_QUOTE));\nkeymap.B.KEYBOARD.push(getKeyInput(Key.BACKSPACE));\nkeymap.B.KEYBOARD.push(getKeyInput(Key.NUMPAD_9));\nkeymap.B.GAMEPAD.push(getGamepadInput(2));\nkeymap.B.GAMEPAD.push(getGamepadInput(3));\n\n// Start\nkeymap.START.KEYBOARD.push(getKeyInput(Key.RETURN));\nkeymap.START.KEYBOARD.push(getKeyInput(Key.SPACE));\nkeymap.START.KEYBOARD.push(getKeyInput(Key.NUMPAD_3));\nkeymap.START.GAMEPAD.push(getGamepadInput(9));\n\n// Select\nkeymap.SELECT.KEYBOARD.push(getKeyInput(Key.SHIFT));\nkeymap.SELECT.KEYBOARD.push(getKeyInput(Key.TAB));\nkeymap.SELECT.KEYBOARD.push(getKeyInput(Key.BACK_SLASH));\nkeymap.SELECT.KEYBOARD.push(getKeyInput(Key.NUMPAD_1));\nkeymap.SELECT.GAMEPAD.push(getGamepadInput(8));\n\nvar KEYMAP = function KEYMAP() {\n  return JSON.parse(JSON.stringify(keymap));\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n// HTML Tags that can be focused on, where the library should be disabled\n// https://www.w3schools.com/tags/ref_byfunc.asp\nvar INPUT_HTML_TAGS = ['input', 'textarea', 'button', 'select', 'option', 'optgroup', 'label', 'datalist'];\n\n// Helpers for accessing gamepad\n// Similar to: https://github.com/torch2424/picoDeploy/blob/master/src/assets/3pLibs/pico8gamepad/pico8gamepad.js\nfunction getAnalogStickAxis(gamepad, axisId) {\n  return gamepad.axes[axisId] || 0.0;\n}\n\nfunction isButtonPressed(gamepad, buttonId) {\n  return gamepad.buttons[buttonId] ? gamepad.buttons[buttonId].pressed : false;\n}\n\nvar ResponsiveGamepadService = function () {\n  function ResponsiveGamepadService() {\n    classCallCheck(this, ResponsiveGamepadService);\n\n    // Our settings\n    this.gamepadAnalogStickDeadZone = 0.25;\n    this.keyMapKeys = Object.keys(KeyMapSchema());\n    this.keyMap = KEYMAP();\n    this.enabled = false;\n    this.addedEventListeners = false;\n  }\n\n  createClass(ResponsiveGamepadService, [{\n    key: 'enable',\n    value: function enable(keyMap) {\n\n      // TODO: Verify it is a valid keymap passed\n      if (keyMap) {\n        this.keyMap = keyMap;\n      }\n\n      // Add our key event listeners\n      // Wrapping in this for preact prerender\n      if (!this.addedEventListeners && typeof window !== \"undefined\") {\n        window.addEventListener('keyup', this.updateKeyboard.bind(this));\n        window.addEventListener('keydown', this.updateKeyboard.bind(this));\n        // Add a resize listen to update the gamepad rect on resize\n        window.addEventListener(\"resize\", this.updateTouchpadRect.bind(this));\n\n        this.addedEventListeners = true;\n      }\n\n      this.enabled = true;\n    }\n\n    // Disable responsive gamepad, and remove all the listeners\n\n  }, {\n    key: 'disable',\n    value: function disable() {\n      this.keyMap = undefined;\n\n      this.enabled = false;\n    }\n  }, {\n    key: 'isEnabled',\n    value: function isEnabled() {\n      return this.enabled;\n    }\n  }, {\n    key: 'addTouchInput',\n    value: function addTouchInput(keyMapKey, element, type, direction) {\n      var _this = this;\n\n      // Declare our touch input\n      // TODO: May have to add the event handler after getting the input\n      var touchInput = void 0;\n      touchInput = getTouchInput(element, type, direction, function (event) {\n        _this.updateTouchpad(keyMapKey, touchInput, event);\n      });\n\n      // Add the input to our keymap\n      this.keyMap[keyMapKey].TOUCHPAD.push(touchInput);\n\n      // Return the touchInput ID so that is may be removed later\n      return touchInput.ID;\n    }\n  }, {\n    key: 'removeTouchInput',\n    value: function removeTouchInput(keyMapKey, touchInputId) {\n      // Search for the input in our touch pad for every key\n      var touchInputIndex = undefined;\n\n      this.keyMap[keyMapKey].TOUCHPAD.some(function (input, index) {\n        if (input.ID === touchInputId) {\n          touchInputIndex = index;\n          return true;\n        }\n\n        return false;\n      });\n\n      // If we found the key and index, remove the touch input\n      if (touchInputIndex !== undefined) {\n        this.keyMap[keyMapKey].TOUCHPAD.splice(touchInputIndex, 1);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: 'getState',\n    value: function getState() {\n      var _this2 = this;\n\n      if (!this.enabled) {\n        return {};\n      }\n\n      // Keyboard handled by listeners on window\n\n      // Update the gamepad state\n      this.updateGamepad();\n\n      // Touch Handled by listeners on touchInputs\n\n      // Create an abstracted controller state\n      var controllerState = {};\n\n      // Loop through our Keys, and quickly build our controller state\n      this.keyMapKeys.forEach(function (key) {\n\n        // Find if any of the keyboard, gamepad or touchpad buttons are pressed\n        var keyboardState = _this2.keyMap[key].KEYBOARD.some(function (keyInput) {\n          return keyInput.ACTIVE;\n        });\n\n        if (keyboardState) {\n          controllerState[key] = true;\n          return;\n        }\n\n        // Find if any of the keyboard, gamepad or touchpad buttons are pressed\n        var gamepadState = _this2.keyMap[key].GAMEPAD.some(function (gamepadInput) {\n          return gamepadInput.ACTIVE;\n        });\n\n        if (gamepadState) {\n          controllerState[key] = true;\n          return;\n        }\n\n        // Find if any of the keyboard, gamepad or touchpad buttons are pressed\n        var touchState = _this2.keyMap[key].TOUCHPAD.some(function (touchInput) {\n          return touchInput.ACTIVE;\n        });\n\n        if (touchState) {\n          controllerState[key] = true;\n          return;\n        }\n\n        controllerState[key] = false;\n      });\n\n      // Return the controller state in case we need something from it\n      return controllerState;\n    }\n\n    // Function to return if we are ignoring input for key events\n\n  }, {\n    key: 'isIgnoringKeyEvents',\n    value: function isIgnoringKeyEvents() {\n\n      // Checking for window for preact prerender\n      if (typeof window === \"undefined\") {\n        return true;\n      }\n\n      return INPUT_HTML_TAGS.some(function (htmlTag) {\n        if (document.activeElement && document.activeElement.tagName.toLowerCase() === htmlTag.toLowerCase()) {\n          return true;\n        }\n        return false;\n      });\n    }\n\n    // Function to handle keyboard update events\n\n  }, {\n    key: 'updateKeyboard',\n    value: function updateKeyboard(keyEvent) {\n      var _this3 = this;\n\n      if (!this.enabled) {\n        return;\n      }\n\n      // Checking for window for preact prerender\n      if (typeof window === \"undefined\") {\n        return;\n      }\n\n      // Ignore the event if focus on a input-table field\n      // https://www.w3schools.com/tags/ref_byfunc.asp\n      if (keyEvent && keyEvent.target && keyEvent.target.tagName) {\n        var isTargetInputField = INPUT_HTML_TAGS.some(function (htmlTag) {\n          if (keyEvent && keyEvent.target.tagName.toLowerCase() === htmlTag.toLowerCase()) {\n            return true;\n          }\n          return false;\n        });\n\n        if (isTargetInputField) {\n          return;\n        }\n      }\n\n      // Get the new state of the key\n      var isPressed = false;\n      if (keyEvent.type === 'keydown') {\n        isPressed = true;\n      }\n\n      // Loop through our keys\n      this.keyMapKeys.forEach(function (key) {\n        _this3.keyMap[key].KEYBOARD.forEach(function (keyInput, index) {\n          if (keyInput.KEY_CODE === keyEvent.keyCode) {\n            _this3.keyMap[key].KEYBOARD[index].ACTIVE = isPressed;\n          }\n        });\n      });\n\n      // If we found a key, prevent default so page wont scroll and things\n      keyEvent.preventDefault();\n    }\n\n    // Function to check the gamepad API for the gamepad state\n\n  }, {\n    key: 'updateGamepad',\n    value: function updateGamepad() {\n      var _this4 = this;\n\n      // Similar to: https://github.com/torch2424/picoDeploy/blob/master/src/assets/3pLibs/pico8gamepad/pico8gamepad.js\n      // Gampad Diagram: https://www.html5rocks.com/en/tutorials/doodles/gamepad/#toc-gamepadinfo\n      var gamepads = navigator.getGamepads ? navigator.getGamepads() : [];\n\n      var _loop = function _loop(i) {\n\n        // Get our current gamepad\n        var gamepad = gamepads[i];\n\n        if (!gamepad) {\n          return 'continue';\n        }\n\n        // Loop through our keys\n        _this4.keyMapKeys.forEach(function (key) {\n          _this4.keyMap[key].GAMEPAD.forEach(function (gamepadInput, index) {\n\n            // Check if we are a gamepad button\n            if (_this4.keyMap[key].GAMEPAD[index].BUTTON_ID || _this4.keyMap[key].GAMEPAD[index].BUTTON_ID === 0) {\n              _this4.keyMap[key].GAMEPAD[index].ACTIVE = isButtonPressed(gamepad, _this4.keyMap[key].GAMEPAD[index].BUTTON_ID);\n            }\n\n            // Check if we are an axis\n            if (_this4.keyMap[key].GAMEPAD[index].JOYSTICK.AXIS_ID !== undefined && _this4.keyMap[key].GAMEPAD[index].JOYSTICK.IS_POSITIVE !== undefined) {\n              if (_this4.keyMap[key].GAMEPAD[index].JOYSTICK.IS_POSITIVE) {\n                _this4.keyMap[key].GAMEPAD[index].ACTIVE = getAnalogStickAxis(gamepad, _this4.keyMap[key].GAMEPAD[index].JOYSTICK.AXIS_ID) > +_this4.gamepadAnalogStickDeadZone;\n              } else {\n                _this4.keyMap[key].GAMEPAD[index].ACTIVE = getAnalogStickAxis(gamepad, _this4.keyMap[key].GAMEPAD[index].JOYSTICK.AXIS_ID) < -_this4.gamepadAnalogStickDeadZone;\n              }\n            }\n          });\n        });\n      };\n\n      for (var i = 0; i < gamepads.length; i++) {\n        var _ret = _loop(i);\n\n        if (_ret === 'continue') continue;\n      }\n    }\n\n    // Function to update button position and size\n\n  }, {\n    key: 'updateTouchpadRect',\n    value: function updateTouchpadRect() {\n      var _this5 = this;\n\n      // Read from the DOM, and get each of our elements position, doing this here, as it is best to read from the dom in sequence\n      // use element.getBoundingRect() top, bottom, left, right to get clientX and clientY in touch events :)\n      // https://stackoverflow.com/questions/442404/retrieve-the-position-x-y-of-an-html-element\n      //console.log(\"GamepadComponent: Updating Rect()...\");\n      this.keyMapKeys.forEach(function (key) {\n        _this5.keyMap[key].TOUCHPAD.forEach(function (touchInput, index) {\n          var boundingRect = _this5.keyMap[key].TOUCHPAD[index].ELEMENT.getBoundingClientRect();\n          _this5.keyMap[key].TOUCHPAD[index].BOUNDING_RECT = boundingRect;\n        });\n      });\n    }\n\n    // Reset all Diretion keys for a DPAD for touch Inputs\n\n  }, {\n    key: 'resetTouchDpad',\n    value: function resetTouchDpad() {\n      var _this6 = this;\n\n      var dpadKeys = ['UP', 'RIGHT', 'DOWN', 'LEFT'];\n\n      dpadKeys.forEach(function (dpadKey) {\n        _this6.keyMap[dpadKey].TOUCHPAD.forEach(function (touchInput) {\n          touchInput.ACTIVE = false;\n        });\n      });\n    }\n\n    // Function called on an event of a touchInput SVG Element\n\n  }, {\n    key: 'updateTouchpad',\n    value: function updateTouchpad(keyMapKey, touchInput, event) {\n\n      if (!this.enabled) {\n        return;\n      }\n\n      if (!event || event.type.includes('touch') && !event.touches) return;\n\n      //event.stopPropagation();\n      event.preventDefault();\n\n      //this.debugCurrentTouch(event);\n\n      // Check for active event types\n      if (event.type === \"touchstart\" || event.type === \"touchmove\" || event.type === \"mousedown\") {\n        // Active\n\n        if (touchInput.TYPE === 'DPAD') {\n\n          // Calculate for the correct key\n          // Only using the first touch, since we shouldn't be having two fingers on the dpad\n          var touch = void 0;\n          if (event.type.includes('touch')) {\n            touch = event.touches[0];\n          } else if (event.type.includes('mouse')) {\n            touch = event;\n          }\n\n          // Find if the horizontal or vertical influence is greater\n          // Find our centers of our rectangles, and our unbiased X Y values on the rect\n          var rectCenterX = (touchInput.BOUNDING_RECT.right - touchInput.BOUNDING_RECT.left) / 2;\n          var rectCenterY = (touchInput.BOUNDING_RECT.bottom - touchInput.BOUNDING_RECT.top) / 2;\n          var touchX = touch.clientX - touchInput.BOUNDING_RECT.left;\n          var touchY = touch.clientY - touchInput.BOUNDING_RECT.top;\n\n          // Lesson From: picoDeploy\n          // Fix for shoot button causing the character to move right on multi touch error\n          // + 50 for some buffer\n          if (touchX > rectCenterX + touchInput.BOUNDING_RECT.width / 2 + 50) {\n            // Ignore the event\n            return;\n          }\n\n          // Create an additonal influece for horizontal, to make it feel better\n          var horizontalInfluence = touchInput.BOUNDING_RECT.width / 8;\n\n          // Determine if we are horizontal or vertical\n          var isHorizontal = Math.abs(rectCenterX - touchX) + horizontalInfluence > Math.abs(rectCenterY - touchY);\n\n          // Find if left or right from width, vice versa for height\n          if (isHorizontal) {\n            // Add a horizontal dead zone\n            var deadzoneSize = touchInput.BOUNDING_RECT.width / 20;\n            if (Math.abs(touchInput.BOUNDING_RECT.width / 2 - touchX) > deadzoneSize) {\n\n              var isLeft = touchX < touchInput.BOUNDING_RECT.width / 2;\n\n              if (isLeft && touchInput.DIRECTION === 'LEFT') {\n                touchInput.ACTIVE = true;\n              } else if (!isLeft && touchInput.DIRECTION === 'RIGHT') {\n                touchInput.ACTIVE = true;\n              } else {\n                touchInput.ACTIVE = false;\n              }\n            }\n          } else {\n            var isUp = touchY < touchInput.BOUNDING_RECT.height / 2;\n            if (isUp && touchInput.DIRECTION === 'UP') {\n              touchInput.ACTIVE = true;\n            } else if (!isUp && touchInput.DIRECTION === 'DOWN') {\n              touchInput.ACTIVE = true;\n            } else {\n              touchInput.ACTIVE = false;\n            }\n          }\n        }\n\n        // Button Type\n        if (touchInput.TYPE === 'BUTTON') {\n          touchInput.ACTIVE = true;\n        }\n      } else {\n        // Not active\n\n        // Handle Dpad Type\n        if (touchInput.TYPE === 'DPAD') {\n          this.resetTouchDpad();\n        }\n\n        // Button Type\n        if (touchInput.TYPE === 'BUTTON') {\n          touchInput.ACTIVE = false;\n        }\n      }\n    }\n  }]);\n  return ResponsiveGamepadService;\n}();\n\n// Exports\n\n\nvar ResponsiveGamepad = new ResponsiveGamepadService();\n\nexport { ResponsiveGamepad, KEYMAP as KEYMAP_DEFAULT, KEYMAP as KEYMAP_GAMEBOY };\n","// https://github.com/torch2424/responsive-gamepad\nimport { ResponsiveGamepad, KEYMAP_GAMEBOY } from 'responsive-gamepad';\n\nimport { WORKER_MESSAGE_TYPE } from '../worker/constants';\nimport { getEventData } from '../worker/util';\n\nclass WasmBoyControllerService {\n  constructor() {\n    // Our wasm instance\n    this.worker = undefined;\n    this.isEnabled = false;\n    this.enableDefaultJoypad();\n  }\n\n  initialize() {\n    return Promise.resolve();\n  }\n\n  setWorker(worker) {\n    this.worker = worker;\n  }\n\n  updateController() {\n    if (!this.isEnabled) {\n      return {};\n    }\n\n    // Create an abstracted controller state\n    const controllerState = ResponsiveGamepad.getState();\n\n    // Set the new controller state on the instance\n    this.setJoypadState(controllerState);\n\n    // Return the controller state in case we need something from it\n    return controllerState;\n  }\n\n  setJoypadState(controllerState) {\n    const setJoypadStateParamsAsArray = [\n      controllerState.UP ? 1 : 0,\n      controllerState.RIGHT ? 1 : 0,\n      controllerState.DOWN ? 1 : 0,\n      controllerState.LEFT ? 1 : 0,\n      controllerState.A ? 1 : 0,\n      controllerState.B ? 1 : 0,\n      controllerState.SELECT ? 1 : 0,\n      controllerState.START ? 1 : 0\n    ];\n\n    this.worker.postMessage({\n      type: WORKER_MESSAGE_TYPE.SET_JOYPAD_STATE,\n      setJoypadStateParamsAsArray\n    });\n  }\n\n  enableDefaultJoypad() {\n    this.isEnabled = true;\n\n    ResponsiveGamepad.enable(KEYMAP_GAMEBOY());\n  }\n\n  disableDefaultJoypad() {\n    this.isEnabled = false;\n\n    ResponsiveGamepad.disable(KEYMAP_GAMEBOY());\n  }\n\n  addTouchInput(keyMapKey, element, type, direction) {\n    return ResponsiveGamepad.addTouchInput(keyMapKey, element, type, direction);\n  }\n\n  removeTouchInput(keyMapKey, touchInputId) {\n    return ResponsiveGamepad.removeTouchInput(keyMapKey, touchInputId);\n  }\n}\n\nexport const WasmBoyController = new WasmBoyControllerService();\n","// Smarter workers.\n// Workers with ids, pub sub, etc...\n// https://medium.com/dailyjs/threads-in-node-10-5-0-a-practical-intro-3b85a0a3c953\n\n/*ROLLUP_REPLACE_NODE\nconst { Worker } = require('worker_threads');\nROLLUP_REPLACE_NODE*/\n\nimport { getEventData, readBase64String } from './util';\n\n// Generate ids. Use a counter to help against possible collisions.\nlet idCounter = 0;\nconst generateId = () => {\n  const randomId = Math.random()\n    .toString(36)\n    .replace(/[^a-z]+/g, '')\n    .substr(2, 10);\n  idCounter++;\n  const id = `${randomId}-${idCounter}`;\n  if (idCounter > 100000) {\n    idCounter = 0;\n  }\n  return id;\n};\n\nexport function getSmartWorkerMessage(message, messageId, workerId) {\n  if (!messageId) {\n    messageId = generateId();\n  }\n  return {\n    workerId,\n    messageId,\n    message\n  };\n}\n\nexport class SmartWorker {\n  constructor(workerUrl, id) {\n    this.id = generateId();\n    if (id) {\n      this.id = id;\n    }\n    this.messageListeners = [];\n\n    /*ROLLUP_REPLACE_BROWSER\n    \n    // Can't load base63 data string directly because safari\n    // https://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\n    let workerJs = atob(workerUrl.split(',')[1]);\n    let blob;\n    try {\n      blob = new Blob([workerJs], {type: 'application/javascript'});\n    } catch (e) {\n      // Legacy\n      window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder;\n      blob = new BlobBuilder();\n      blob.append(workerJs);\n      blob = blob.getBlob();\n    }\n    this.worker = new Worker(URL.createObjectURL(blob));\n\n\n    this.worker.onmessage = this._onMessageHandler.bind(this);\n\n    ROLLUP_REPLACE_BROWSER*/\n\n    /*ROLLUP_REPLACE_NODE\n\n    // Split by Comma, to remove the file header from the base 64 string\n    const workerAsString = readBase64String(workerUrl);\n    this.worker = new Worker(workerAsString, {\n      eval: true\n    });\n    this.worker.on('message', this._onMessageHandler.bind(this))\n\n    ROLLUP_REPLACE_NODE*/\n  }\n\n  postMessage(message, transfer) {\n    const messageObject = getSmartWorkerMessage(message, undefined, this.id);\n    const messageId = messageObject.messageId;\n\n    const messageIdListener = new Promise(resolve => {\n      // Listen for a message with the same message id to be returned\n      this.addMessageListener((responseMessage, messageListener) => {\n        const eventData = getEventData(responseMessage);\n        if (eventData.messageId === messageId) {\n          this.removeMessageListener(messageListener.id);\n          resolve(eventData);\n        }\n      });\n    });\n\n    this.worker.postMessage(messageObject, transfer);\n\n    return messageIdListener;\n  }\n\n  addMessageListener(callback) {\n    this.messageListeners.push({\n      id: generateId(),\n      callback: callback\n    });\n  }\n\n  removeMessageListener(id) {\n    let messageListenerIndex;\n    this.messageListeners.some((messageListener, index) => {\n      if (messageListener.id === id) {\n        messageListenerIndex = index;\n        return true;\n      }\n\n      return false;\n    });\n\n    if (messageListenerIndex !== undefined) {\n      this.messageListeners.splice(messageListenerIndex, 1);\n    }\n  }\n\n  _onMessageHandler(message) {\n    this.messageListeners.forEach(messageListener => {\n      messageListener.callback(message, messageListener);\n    });\n  }\n}\n","// WasmBoy Modules\nimport { WasmBoyGraphics } from '../graphics/graphics';\nimport { WasmBoyAudio } from '../audio/audio';\nimport { WasmBoyController } from '../controller/controller';\nimport { WasmBoyMemory } from '../memory/memory';\n\n// Import our worker urls\n// Only one of the wasmboylib imports will be used. Rollup/Babel handles which one\nimport wasmboyLibWasmWorkerUrl from '../../dist/worker/wasmboy.wasm.worker.js';\nimport wasmboyLibTsWorkerUrl from '../../dist/worker/wasmboy.ts.worker.js';\nimport wasmboyGraphicsWorkerUrl from '../../dist/worker/graphics.worker.js';\nimport wasmboyAudioWorkerUrl from '../../dist/worker/audio.worker.js';\nimport wasmboyControllerWorkerUrl from '../../dist/worker/controller.worker.js';\nimport wasmboyMemoryWorkerUrl from '../../dist/worker/memory.worker.js';\n\n// Import our Smart Worker Interface\nimport { SmartWorker } from './smartworker';\nimport { WORKER_MESSAGE_TYPE, WORKER_ID } from './constants';\n\n/*ROLLUP_REPLACE_NODE\nconst { MessageChannel } = require('worker_threads');\nROLLUP_REPLACE_NODE*/\n\nexport const instantiateWorkers = async () => {\n  // Create our workers\n  let libWorkerUrl;\n  libWorkerUrl = wasmboyLibWasmWorkerUrl;\n  libWorkerUrl = wasmboyLibTsWorkerUrl;\n\n  const libWorker = new SmartWorker(libWorkerUrl, WORKER_ID.LIB);\n  const graphicsWorker = new SmartWorker(wasmboyGraphicsWorkerUrl, WORKER_ID.GRAPHICS);\n  const audioWorker = new SmartWorker(wasmboyAudioWorkerUrl, WORKER_ID.AUDIO);\n  const controllerWorker = new SmartWorker(wasmboyControllerWorkerUrl, WORKER_ID.CONTROLLER);\n  const memoryWorker = new SmartWorker(wasmboyMemoryWorkerUrl, WORKER_ID.MEMORY);\n  // Create an array of promises for when each worker is ready\n  const workerReadyPromises = [];\n\n  // Add our workers to an array,\n  const childWorkers = [graphicsWorker, audioWorker, controllerWorker, memoryWorker];\n\n  // Create a messaging channel between our main lib worker,\n  // And all of the children workers\n  childWorkers.forEach(childWorker => {\n    // Create our message channel\n    // https://stackoverflow.com/questions/14191394/web-workers-communication-using-messagechannel-html5\n    const messageChannel = new MessageChannel();\n\n    const workerReadyPromise = new Promise(resolve => {\n      // Our resolve function\n      let messagesReceived = 0;\n      const tryResolveWorkerReady = () => {\n        messagesReceived++;\n        if (messagesReceived >= 2) {\n          resolve();\n        }\n      };\n\n      // Post our connect messages\n      libWorker\n        .postMessage(\n          {\n            type: WORKER_MESSAGE_TYPE.CONNECT,\n            workerId: childWorker.id,\n            ports: [messageChannel.port1]\n          },\n          [messageChannel.port1]\n        )\n        .then(() => {\n          tryResolveWorkerReady();\n        });\n      childWorker\n        .postMessage(\n          {\n            type: WORKER_MESSAGE_TYPE.CONNECT,\n            workerId: libWorker.id,\n            ports: [messageChannel.port2]\n          },\n          [messageChannel.port2]\n        )\n        .then(() => {\n          tryResolveWorkerReady();\n        });\n    });\n\n    workerReadyPromises.push(workerReadyPromise);\n  });\n\n  // Wait for all workers to be ready\n  await Promise.all(workerReadyPromises);\n\n  // Finally, pass the ready workers to all of our children lib\n  WasmBoyGraphics.setWorker(graphicsWorker);\n  WasmBoyAudio.setWorker(audioWorker);\n  WasmBoyController.setWorker(controllerWorker);\n  WasmBoyMemory.setWorker(memoryWorker);\n\n  // Return the main worker for the main lib\n  return libWorker;\n};\n","export default \"data:application/javascript;base64,\"","export default \"data:application/javascript;base64,J3VzZSBzdHJpY3QnOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGcoYSxiKXtkP3NlbGYucG9zdE1lc3NhZ2UoYSxiKTpoLnBvc3RNZXNzYWdlKGEsYil9ZnVuY3Rpb24gbChhLGIpe2F8fGNvbnNvbGUuZXJyb3IoIndvcmtlcmFwaTogTm8gY2FsbGJhY2sgd2FzIHByb3ZpZGVkIHRvIG9uTWVzc2FnZSEiKTtpZihiKWlmKGQpYi5vbm1lc3NhZ2U9YTtlbHNlIGIub24oIm1lc3NhZ2UiLGEpO2Vsc2UgaWYoZClzZWxmLm9ubWVzc2FnZT1hO2Vsc2UgaC5vbigibWVzc2FnZSIsYSl9ZnVuY3Rpb24gYyhhLGIsZil7Ynx8KGI9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikucmVwbGFjZSgvW15hLXpdKy9nLCIiKS5zdWJzdHIoMiwxMCksZSsrLGI9YCR7Yn0tJHtlfWAsMUU1PGUmJihlPTApKTtyZXR1cm57d29ya2VySWQ6ZixtZXNzYWdlSWQ6YixtZXNzYWdlOmF9fWNvbnN0IGQ9InVuZGVmaW5lZCIhPT10eXBlb2Ygc2VsZjtsZXQgaDtkfHwoaD1yZXF1aXJlKCJ3b3JrZXJfdGhyZWFkcyIpLnBhcmVudFBvcnQpOwpsZXQgZT0wLGs7Y29uc3QgbT0oYSk9PnthPWEuZGF0YT9hLmRhdGE6YTtzd2l0Y2goYS5tZXNzYWdlLnR5cGUpe2Nhc2UgIkdFVF9DT05TVEFOVFNfRE9ORSI6ZyhjKGEubWVzc2FnZSxhLm1lc3NhZ2VJZCkpO2JyZWFrO2Nhc2UgIlVQREFURUQiOnthPW5ldyBVaW50OENsYW1wZWRBcnJheShhLm1lc3NhZ2UuZ3JhcGhpY3NGcmFtZUJ1ZmZlcik7Y29uc3QgZj1uZXcgVWludDhDbGFtcGVkQXJyYXkoOTIxNjApLGQ9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KDMpO2ZvcihsZXQgYz0wOzE0ND5jO2MrKylmb3IobGV0IGU9MDsxNjA+ZTtlKyspe3ZhciBiPTMqKDE2MCpjK2UpO2ZvcihsZXQgYz0wOzM+YztjKyspZFtjXT1hW2IrY107Yj00KihlKzE2MCpjKTtmW2JdPWRbMF07ZltiKzFdPWRbMV07ZltiKzJdPWRbMl07ZltiKzNdPTI1NX1hPWZ9ZyhjKHt0eXBlOiJVUERBVEVEIixpbWFnZURhdGFBcnJheUJ1ZmZlcjphLmJ1ZmZlcn0pLFthLmJ1ZmZlcl0pfX07bCgoYSk9PnthPWEuZGF0YT8KYS5kYXRhOmE7c3dpdGNoKGEubWVzc2FnZS50eXBlKXtjYXNlICJDT05ORUNUIjprPWEubWVzc2FnZS5wb3J0c1swXTtsKG0sayk7ZyhjKHZvaWQgMCxhLm1lc3NhZ2VJZCkpO2JyZWFrO2Nhc2UgIkdFVF9DT05TVEFOVFMiOmsucG9zdE1lc3NhZ2UoYyh7dHlwZToiR0VUX0NPTlNUQU5UUyJ9LGEubWVzc2FnZUlkKSk7YnJlYWs7ZGVmYXVsdDpjb25zb2xlLmxvZyhhKX19KX0pKCk7Cg==\"","export default \"data:application/javascript;base64,J3VzZSBzdHJpY3QnOyhmdW5jdGlvbigpe2Z1bmN0aW9uIG0oYSxiKXtoP3NlbGYucG9zdE1lc3NhZ2UoYSxiKTpuLnBvc3RNZXNzYWdlKGEsYil9ZnVuY3Rpb24gcChhLGIpe2F8fGNvbnNvbGUuZXJyb3IoIndvcmtlcmFwaTogTm8gY2FsbGJhY2sgd2FzIHByb3ZpZGVkIHRvIG9uTWVzc2FnZSEiKTtpZihiKWlmKGgpYi5vbm1lc3NhZ2U9YTtlbHNlIGIub24oIm1lc3NhZ2UiLGEpO2Vsc2UgaWYoaClzZWxmLm9ubWVzc2FnZT1hO2Vsc2Ugbi5vbigibWVzc2FnZSIsYSl9ZnVuY3Rpb24gYyhhLGIsZCl7Ynx8KGI9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikucmVwbGFjZSgvW15hLXpdKy9nLCIiKS5zdWJzdHIoMiwxMCksaysrLGI9YCR7Yn0tJHtrfWAsMUU1PGsmJihrPTApKTtyZXR1cm57d29ya2VySWQ6ZCxtZXNzYWdlSWQ6YixtZXNzYWdlOmF9fWNvbnN0IGg9InVuZGVmaW5lZCIhPT10eXBlb2Ygc2VsZjtsZXQgbjtofHwobj1yZXF1aXJlKCJ3b3JrZXJfdGhyZWFkcyIpLnBhcmVudFBvcnQpOwpsZXQgaz0wO2NvbnN0IHE9KGEpPT57YT0oYS0xKS8xMjctMTsuMDA4Pk1hdGguYWJzKGEpJiYoYT0wKTtyZXR1cm4gYS8yLjV9O2xldCBsO2NvbnN0IHI9KGEpPT57YT1hLmRhdGE/YS5kYXRhOmE7aWYoYS5tZXNzYWdlKXN3aXRjaChhLm1lc3NhZ2UudHlwZSl7Y2FzZSAiR0VUX0NPTlNUQU5UU19ET05FIjptKGMoYS5tZXNzYWdlLGEubWVzc2FnZUlkKSk7YnJlYWs7Y2FzZSAiVVBEQVRFRCI6e3ZhciBiPW5ldyBVaW50OEFycmF5KGEubWVzc2FnZS5hdWRpb0J1ZmZlcik7dmFyIGQ9YS5tZXNzYWdlLm51bWJlck9mU2FtcGxlcztjb25zdCBjPW5ldyBGbG9hdDMyQXJyYXkoZCk7dmFyIGY9bmV3IEZsb2F0MzJBcnJheShkKTtsZXQgZz0wO2QqPTI7Zm9yKHZhciBlPTA7ZTxkO2UrPTIpY1tnXT1xKGJbZV0pLGcrKztnPTA7Zm9yKGU9MTtlPGQ7ZSs9MilmW2ddPXEoYltlXSksZysrO2I9Yy5idWZmZXI7Zj1mLmJ1ZmZlcn1tKGMoe3R5cGU6IlVQREFURUQiLGxlZnRDaGFubmVsOmIscmlnaHRDaGFubmVsOmYsCm51bWJlck9mU2FtcGxlczphLm1lc3NhZ2UubnVtYmVyT2ZTYW1wbGVzLGZwczphLm1lc3NhZ2UuZnBzLGFsbG93RmFzdFNwZWVkU3RyZXRjaGluZzphLm1lc3NhZ2UuYWxsb3dGYXN0U3BlZWRTdHJldGNoaW5nfSksW2IsZl0pfX07cCgoYSk9PnthPWEuZGF0YT9hLmRhdGE6YTtzd2l0Y2goYS5tZXNzYWdlLnR5cGUpe2Nhc2UgIkNPTk5FQ1QiOmw9YS5tZXNzYWdlLnBvcnRzWzBdO3AocixsKTttKGModm9pZCAwLGEubWVzc2FnZUlkKSk7YnJlYWs7Y2FzZSAiR0VUX0NPTlNUQU5UUyI6bC5wb3N0TWVzc2FnZShjKGEubWVzc2FnZSxhLm1lc3NhZ2VJZCkpO2JyZWFrO2Nhc2UgIkFVRElPX0xBVEVOQ1kiOmwucG9zdE1lc3NhZ2UoYyhhLm1lc3NhZ2UsYS5tZXNzYWdlSWQpKTticmVhaztkZWZhdWx0OmNvbnNvbGUubG9nKGEpfX0pfSkoKTsK\"","export default \"data:application/javascript;base64,J3VzZSBzdHJpY3QnOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGcoYSxiKXthfHxjb25zb2xlLmVycm9yKCJ3b3JrZXJhcGk6IE5vIGNhbGxiYWNrIHdhcyBwcm92aWRlZCB0byBvbk1lc3NhZ2UhIik7aWYoYilpZihjKWIub25tZXNzYWdlPWE7ZWxzZSBiLm9uKCJtZXNzYWdlIixhKTtlbHNlIGlmKGMpc2VsZi5vbm1lc3NhZ2U9YTtlbHNlIGUub24oIm1lc3NhZ2UiLGEpfWZ1bmN0aW9uIGgoYSxiLGMpe2J8fChiPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnJlcGxhY2UoL1teYS16XSsvZywiIikuc3Vic3RyKDIsMTApLGQrKyxiPWAke2J9LSR7ZH1gLDFFNTxkJiYoZD0wKSk7cmV0dXJue3dvcmtlcklkOmMsbWVzc2FnZUlkOmIsbWVzc2FnZTphfX1jb25zdCBjPSJ1bmRlZmluZWQiIT09dHlwZW9mIHNlbGY7bGV0IGU7Y3x8KGU9cmVxdWlyZSgid29ya2VyX3RocmVhZHMiKS5wYXJlbnRQb3J0KTtsZXQgZD0wLGY7Y29uc3Qgaz0oYSk9Pnt9O2coKGEpPT57YT1hLmRhdGE/YS5kYXRhOgphO3N3aXRjaChhLm1lc3NhZ2UudHlwZSl7Y2FzZSAiQ09OTkVDVCI6Zj1hLm1lc3NhZ2UucG9ydHNbMF07ZyhrLGYpO2E9aCh2b2lkIDAsYS5tZXNzYWdlSWQpO2M/c2VsZi5wb3N0TWVzc2FnZShhLHZvaWQgMCk6ZS5wb3N0TWVzc2FnZShhLHZvaWQgMCk7YnJlYWs7Y2FzZSAiU0VUX0pPWVBBRF9TVEFURSI6Zi5wb3N0TWVzc2FnZShoKGEubWVzc2FnZSxhLm1lc3NhZ2VJZCkpO2JyZWFrO2RlZmF1bHQ6Y29uc29sZS5sb2coYSl9fSl9KSgpOwo=\"","export default \"data:application/javascript;base64,J3VzZSBzdHJpY3QnOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGcoYSxiKXtkP3NlbGYucG9zdE1lc3NhZ2UoYSxiKTpoLnBvc3RNZXNzYWdlKGEsYil9ZnVuY3Rpb24gbChhLGIpe2F8fGNvbnNvbGUuZXJyb3IoIndvcmtlcmFwaTogTm8gY2FsbGJhY2sgd2FzIHByb3ZpZGVkIHRvIG9uTWVzc2FnZSEiKTtpZihiKWlmKGQpYi5vbm1lc3NhZ2U9YTtlbHNlIGIub24oIm1lc3NhZ2UiLGEpO2Vsc2UgaWYoZClzZWxmLm9ubWVzc2FnZT1hO2Vsc2UgaC5vbigibWVzc2FnZSIsYSl9ZnVuY3Rpb24gYyhhLGIsYyl7Ynx8KGI9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikucmVwbGFjZSgvW15hLXpdKy9nLCIiKS5zdWJzdHIoMiwxMCksZSsrLGI9YCR7Yn0tJHtlfWAsMUU1PGUmJihlPTApKTtyZXR1cm57d29ya2VySWQ6YyxtZXNzYWdlSWQ6YixtZXNzYWdlOmF9fWNvbnN0IGQ9InVuZGVmaW5lZCIhPT10eXBlb2Ygc2VsZjtsZXQgaDtkfHwoaD1yZXF1aXJlKCJ3b3JrZXJfdGhyZWFkcyIpLnBhcmVudFBvcnQpOwpsZXQgZT0wLGY7Y29uc3Qgaz0oYSxiKT0+e2NvbnN0IGQ9W107T2JqZWN0LmtleXMoYi5tZXNzYWdlKS5mb3JFYWNoKChhKT0+eyJ0eXBlIiE9PWEmJmQucHVzaChiLm1lc3NhZ2VbYV0pfSk7Y29uc3QgZT1jKGIubWVzc2FnZSxiLm1lc3NhZ2VJZCk7YT9mLnBvc3RNZXNzYWdlKGUsZCk6ZyhlLGQpfSxtPShhKT0+e2E9YS5kYXRhP2EuZGF0YTphO2lmKGEubWVzc2FnZSlzd2l0Y2goYS5tZXNzYWdlLnR5cGUpe2Nhc2UgIkNMRUFSX01FTU9SWV9ET05FIjpnKGMoYS5tZXNzYWdlLGEubWVzc2FnZUlkKSxbYS5tZXNzYWdlLndhc21CeXRlTWVtb3J5XSk7YnJlYWs7Y2FzZSAiR0VUX0NPTlNUQU5UU19ET05FIjpnKGMoYS5tZXNzYWdlLGEubWVzc2FnZUlkKSk7YnJlYWs7Y2FzZSAiU0VUX01FTU9SWV9ET05FIjpnKGMoYS5tZXNzYWdlLGEubWVzc2FnZUlkKSk7YnJlYWs7Y2FzZSAiR0VUX01FTU9SWSI6ayghMSxhKTticmVhaztjYXNlICJVUERBVEVEIjprKCExLGEpfX07bCgoYSk9PnthPQphLmRhdGE/YS5kYXRhOmE7c3dpdGNoKGEubWVzc2FnZS50eXBlKXtjYXNlICJDT05ORUNUIjpmPWEubWVzc2FnZS5wb3J0c1swXTtsKG0sZik7ZyhjKHZvaWQgMCxhLm1lc3NhZ2VJZCkpO2JyZWFrO2Nhc2UgIkNMRUFSX01FTU9SWSI6Zi5wb3N0TWVzc2FnZShjKHt0eXBlOiJDTEVBUl9NRU1PUlkifSxhLm1lc3NhZ2VJZCkpO2JyZWFrO2Nhc2UgIkdFVF9DT05TVEFOVFMiOmYucG9zdE1lc3NhZ2UoYyh7dHlwZToiR0VUX0NPTlNUQU5UUyJ9LGEubWVzc2FnZUlkKSk7YnJlYWs7Y2FzZSAiR0VUX01FTU9SWSI6Zi5wb3N0TWVzc2FnZShjKGEubWVzc2FnZSxhLm1lc3NhZ2VJZCkpO2JyZWFrO2Nhc2UgIlNFVF9NRU1PUlkiOmsoITAsYSk7YnJlYWs7ZGVmYXVsdDpjb25zb2xlLmxvZyhhKX19KX0pKCk7Cg==\"","// Taken/Modified From: https://github.com/photopea/UZIP.js\n\nlet UZIP = {};\n\n// Make it a hacky es module\nconst uzip = UZIP;\nexport default uzip;\n\nUZIP['parse'] = function(\n  buf // ArrayBuffer\n) {\n  let rUs = UZIP.bin.readUshort,\n    rUi = UZIP.bin.readUint,\n    o = 0,\n    out = {};\n  let data = new Uint8Array(buf);\n  let eocd = data.length - 4;\n\n  while (rUi(data, eocd) != 0x06054b50) eocd--;\n\n  o = eocd;\n  o += 4; // sign  = 0x06054b50\n  o += 4; // disks = 0;\n  let cnu = rUs(data, o);\n  o += 2;\n  let cnt = rUs(data, o);\n  o += 2;\n\n  let csize = rUi(data, o);\n  o += 4;\n  let coffs = rUi(data, o);\n  o += 4;\n\n  o = coffs;\n  for (let i = 0; i < cnu; i++) {\n    let sign = rUi(data, o);\n    o += 4;\n    o += 4; // versions;\n    o += 4; // flag + compr\n    o += 4; // time\n\n    let crc32 = rUi(data, o);\n    o += 4;\n    let csize = rUi(data, o);\n    o += 4;\n    let usize = rUi(data, o);\n    o += 4;\n\n    let nl = rUs(data, o),\n      el = rUs(data, o + 2),\n      cl = rUs(data, o + 4);\n    o += 6; // name, extra, comment\n    o += 8; // disk, attribs\n\n    let roff = rUi(data, o);\n    o += 4;\n    o += nl + el + cl;\n\n    UZIP._readLocal(data, roff, out, csize, usize);\n  }\n  //console.log(out);\n  return out;\n};\n\nUZIP._readLocal = function(data, o, out, csize, usize) {\n  let rUs = UZIP.bin.readUshort,\n    rUi = UZIP.bin.readUint;\n  let sign = rUi(data, o);\n  o += 4;\n  let ver = rUs(data, o);\n  o += 2;\n  let gpflg = rUs(data, o);\n  o += 2;\n  //if((gpflg&8)!=0) throw \"unknown sizes\";\n  let cmpr = rUs(data, o);\n  o += 2;\n\n  let time = rUi(data, o);\n  o += 4;\n\n  let crc32 = rUi(data, o);\n  o += 4;\n  //let csize = rUi(data, o);  o+=4;\n  //let usize = rUi(data, o);  o+=4;\n  o += 8;\n\n  let nlen = rUs(data, o);\n  o += 2;\n  let elen = rUs(data, o);\n  o += 2;\n\n  let name = UZIP.bin.readUTF8(data, o, nlen);\n  o += nlen;\n  o += elen;\n\n  //console.log(sign.toString(16), ver, gpflg, cmpr, crc32.toString(16), \"csize, usize\", csize, usize, nlen, elen, name, o);\n\n  let file = new Uint8Array(data.buffer, o);\n  if (false) {\n  } else if (cmpr == 0) out[name] = new Uint8Array(file.buffer.slice(o, o + csize));\n  else if (cmpr == 8) {\n    let buf = new Uint8Array(usize);\n    UZIP.inflateRaw(file, buf);\n    //let nbuf = pako[\"inflateRaw\"](file);\n    //for(let i=0; i<buf.length; i++) if(buf[i]!=nbuf[i]) {  console.log(buf.length, nbuf.length, usize, i);  throw \"e\";  }\n    out[name] = buf;\n  } else throw 'unknown compression method: ' + cmpr;\n};\n\nUZIP.inflateRaw = function(file, buf) {\n  return UZIP.F.inflate(file, buf);\n};\nUZIP.inflate = function(file, buf) {\n  let CMF = file[0],\n    FLG = file[1];\n  let CM = CMF & 15,\n    CINFO = CMF >>> 4;\n  //console.log(CM, CINFO,CMF,FLG);\n  return UZIP.inflateRaw(new Uint8Array(file.buffer, file.byteOffset + 2, file.length - 6), buf);\n};\nUZIP.deflate = function(data, opts /*, buf, off*/) {\n  if (opts == null) opts = { level: 6 };\n  let off = 0,\n    buf = new Uint8Array(50 + Math.floor(data.length * 1.1));\n  buf[off] = 120;\n  buf[off + 1] = 156;\n  off += 2;\n  off = UZIP.F.deflateRaw(data, buf, off, opts.level);\n  let crc = UZIP.adler(data, 0, data.length);\n  buf[off + 0] = (crc >>> 24) & 255;\n  buf[off + 1] = (crc >>> 16) & 255;\n  buf[off + 2] = (crc >>> 8) & 255;\n  buf[off + 3] = (crc >>> 0) & 255;\n  return new Uint8Array(buf.buffer, 0, off + 4);\n};\nUZIP.deflateRaw = function(data, opts) {\n  if (opts == null) opts = { level: 6 };\n  let buf = new Uint8Array(50 + Math.floor(data.length * 1.1));\n  let off;\n  off = UZIP.F.deflateRaw(data, buf, off, opts.level);\n  return new Uint8Array(buf.buffer, 0, off);\n};\n\nUZIP.encode = function(obj) {\n  let tot = 0,\n    wUi = UZIP.bin.writeUint,\n    wUs = UZIP.bin.writeUshort;\n  let zpd = {};\n  for (let p in obj) {\n    let cpr = !UZIP._noNeed(p),\n      buf = obj[p],\n      crc = UZIP.crc.crc(buf, 0, buf.length);\n    zpd[p] = { cpr: cpr, usize: buf.length, crc: crc, file: cpr ? UZIP.deflateRaw(buf) : buf };\n  }\n\n  for (let p in zpd) tot += zpd[p].file.length + 30 + 46 + 2 * UZIP.bin.sizeUTF8(p);\n  tot += 22;\n\n  let data = new Uint8Array(tot),\n    o = 0;\n  let fof = [];\n\n  for (let p in zpd) {\n    let file = zpd[p];\n    fof.push(o);\n    o = UZIP._writeHeader(data, o, p, file, 0);\n  }\n  let i = 0,\n    ioff = o;\n  for (let p in zpd) {\n    let file = zpd[p];\n    fof.push(o);\n    o = UZIP._writeHeader(data, o, p, file, 1, fof[i++]);\n  }\n  let csize = o - ioff;\n\n  wUi(data, o, 0x06054b50);\n  o += 4;\n  o += 4; // disks\n  wUs(data, o, i);\n  o += 2;\n  wUs(data, o, i);\n  o += 2; // number of c d records\n  wUi(data, o, csize);\n  o += 4;\n  wUi(data, o, ioff);\n  o += 4;\n  o += 2;\n  return data.buffer;\n};\n// no need to compress .PNG, .ZIP, .JPEG ....\nUZIP._noNeed = function(fn) {\n  let ext = fn\n    .split('.')\n    .pop()\n    .toLowerCase();\n  return 'png,jpg,jpeg,zip'.indexOf(ext) != -1;\n};\n\nUZIP._writeHeader = function(data, o, p, obj, t, roff) {\n  let wUi = UZIP.bin.writeUint,\n    wUs = UZIP.bin.writeUshort;\n  let file = obj.file;\n\n  wUi(data, o, t == 0 ? 0x04034b50 : 0x02014b50);\n  o += 4; // sign\n  if (t == 1) o += 2; // ver made by\n  wUs(data, o, 20);\n  o += 2; // ver\n  wUs(data, o, 0);\n  o += 2; // gflip\n  wUs(data, o, obj.cpr ? 8 : 0);\n  o += 2; // cmpr\n\n  wUi(data, o, 0);\n  o += 4; // time\n  wUi(data, o, obj.crc);\n  o += 4; // crc32\n  wUi(data, o, file.length);\n  o += 4; // csize\n  wUi(data, o, obj.usize);\n  o += 4; // usize\n\n  wUs(data, o, UZIP.bin.sizeUTF8(p));\n  o += 2; // nlen\n  wUs(data, o, 0);\n  o += 2; // elen\n\n  if (t == 1) {\n    o += 2; // comment length\n    o += 2; // disk number\n    o += 6; // attributes\n    wUi(data, o, roff);\n    o += 4; // usize\n  }\n  let nlen = UZIP.bin.writeUTF8(data, o, p);\n  o += nlen;\n  if (t == 0) {\n    data.set(file, o);\n    o += file.length;\n  }\n  return o;\n};\n\nUZIP.crc = {\n  table: (function() {\n    let tab = new Uint32Array(256);\n    for (let n = 0; n < 256; n++) {\n      let c = n;\n      for (let k = 0; k < 8; k++) {\n        if (c & 1) c = 0xedb88320 ^ (c >>> 1);\n        else c = c >>> 1;\n      }\n      tab[n] = c;\n    }\n    return tab;\n  })(),\n  update: function(c, buf, off, len) {\n    for (let i = 0; i < len; i++) c = UZIP.crc.table[(c ^ buf[off + i]) & 0xff] ^ (c >>> 8);\n    return c;\n  },\n  crc: function(b, o, l) {\n    return UZIP.crc.update(0xffffffff, b, o, l) ^ 0xffffffff;\n  }\n};\nUZIP.adler = function(data, o, len) {\n  let a = 1,\n    b = 0;\n  let off = o,\n    end = o + len;\n  while (off < end) {\n    let eend = Math.min(off + 5552, end);\n    while (off < eend) {\n      a += data[off++];\n      b += a;\n    }\n    a = a % 65521;\n    b = b % 65521;\n  }\n  return (b << 16) | a;\n};\n\nUZIP.bin = {\n  readUshort: function(buff, p) {\n    return buff[p] | (buff[p + 1] << 8);\n  },\n  writeUshort: function(buff, p, n) {\n    buff[p] = n & 255;\n    buff[p + 1] = (n >> 8) & 255;\n  },\n  readUint: function(buff, p) {\n    return buff[p + 3] * (256 * 256 * 256) + ((buff[p + 2] << 16) | (buff[p + 1] << 8) | buff[p]);\n  },\n  writeUint: function(buff, p, n) {\n    buff[p] = n & 255;\n    buff[p + 1] = (n >> 8) & 255;\n    buff[p + 2] = (n >> 16) & 255;\n    buff[p + 3] = (n >> 24) & 255;\n  },\n  readASCII: function(buff, p, l) {\n    let s = '';\n    for (let i = 0; i < l; i++) s += String.fromCharCode(buff[p + i]);\n    return s;\n  },\n  writeASCII: function(data, p, s) {\n    for (let i = 0; i < s.length; i++) data[p + i] = s.charCodeAt(i);\n  },\n  pad: function(n) {\n    return n.length < 2 ? '0' + n : n;\n  },\n  readUTF8: function(buff, p, l) {\n    let s = '',\n      ns;\n    for (let i = 0; i < l; i++) s += '%' + UZIP.bin.pad(buff[p + i].toString(16));\n    try {\n      ns = decodeURIComponent(s);\n    } catch (e) {\n      return UZIP.bin.readASCII(buff, p, l);\n    }\n    return ns;\n  },\n  writeUTF8: function(buff, p, str) {\n    let strl = str.length,\n      i = 0;\n    for (let ci = 0; ci < strl; ci++) {\n      let code = str.charCodeAt(ci);\n      if ((code & (0xffffffff - (1 << 7) + 1)) == 0) {\n        buff[p + i] = code;\n        i++;\n      } else if ((code & (0xffffffff - (1 << 11) + 1)) == 0) {\n        buff[p + i] = 192 | (code >> 6);\n        buff[p + i + 1] = 128 | ((code >> 0) & 63);\n        i += 2;\n      } else if ((code & (0xffffffff - (1 << 16) + 1)) == 0) {\n        buff[p + i] = 224 | (code >> 12);\n        buff[p + i + 1] = 128 | ((code >> 6) & 63);\n        buff[p + i + 2] = 128 | ((code >> 0) & 63);\n        i += 3;\n      } else if ((code & (0xffffffff - (1 << 21) + 1)) == 0) {\n        buff[p + i] = 240 | (code >> 18);\n        buff[p + i + 1] = 128 | ((code >> 12) & 63);\n        buff[p + i + 2] = 128 | ((code >> 6) & 63);\n        buff[p + i + 3] = 128 | ((code >> 0) & 63);\n        i += 4;\n      } else throw 'e';\n    }\n    return i;\n  },\n  sizeUTF8: function(str) {\n    let strl = str.length,\n      i = 0;\n    for (let ci = 0; ci < strl; ci++) {\n      let code = str.charCodeAt(ci);\n      if ((code & (0xffffffff - (1 << 7) + 1)) == 0) {\n        i++;\n      } else if ((code & (0xffffffff - (1 << 11) + 1)) == 0) {\n        i += 2;\n      } else if ((code & (0xffffffff - (1 << 16) + 1)) == 0) {\n        i += 3;\n      } else if ((code & (0xffffffff - (1 << 21) + 1)) == 0) {\n        i += 4;\n      } else throw 'e';\n    }\n    return i;\n  }\n};\n\nUZIP.F = {};\n\nUZIP.F.deflateRaw = function(data, out, opos, lvl) {\n  let opts = [\n    /*\n\t\t ush good_length; /* reduce lazy search above this match length \n\t\t ush max_lazy;    /* do not perform lazy search above this match length \n         ush nice_length; /* quit search above this match length \n\t*/\n    /*      good lazy nice chain */\n    /* 0 */ [0, 0, 0, 0, 0] /* store only */,\n    /* 1 */ [4, 4, 8, 4, 0] /* max speed, no lazy matches */,\n    /* 2 */ [4, 5, 16, 8, 0],\n    /* 3 */ [4, 6, 16, 16, 0],\n\n    /* 4 */ [4, 10, 16, 32, 0] /* lazy matches */,\n    /* 5 */ [8, 16, 32, 32, 0],\n    /* 6 */ [8, 16, 128, 128, 0],\n    /* 7 */ [8, 32, 128, 256, 0],\n    /* 8 */ [32, 128, 258, 1024, 1],\n    /* 9 */ [32, 258, 258, 4096, 1]\n  ]; /* max compression */\n\n  let opt = opts[lvl];\n\n  let U = UZIP.F.U,\n    goodIndex = UZIP.F._goodIndex,\n    hash = UZIP.F._hash,\n    putsE = UZIP.F._putsE;\n  let i = 0,\n    pos = opos << 3,\n    cvrd = 0,\n    dlen = data.length;\n\n  if (lvl == 0) {\n    while (i < dlen) {\n      let len = Math.min(0xffff, dlen - i);\n      putsE(out, pos, i + len == dlen ? 1 : 0);\n      pos = UZIP.F._copyExact(data, i, len, out, pos + 8);\n      i += len;\n    }\n    return pos >>> 3;\n  }\n\n  let lits = U.lits,\n    strt = U.strt,\n    prev = U.prev,\n    li = 0,\n    lc = 0,\n    bs = 0,\n    ebits = 0,\n    c = 0,\n    nc = 0; // last_item, literal_count, block_start\n  if (dlen > 2) {\n    nc = UZIP.F._hash(data, 0);\n    strt[nc] = 0;\n  }\n  let nmch = 0,\n    nmci = 0;\n\n  for (i = 0; i < dlen; i++) {\n    c = nc;\n    //*\n    if (i + 1 < dlen - 2) {\n      nc = UZIP.F._hash(data, i + 1);\n      let ii = (i + 1) & 0x7fff;\n      prev[ii] = strt[nc];\n      strt[nc] = ii;\n    } //*/\n    if (cvrd <= i) {\n      if (li > 14000 || lc > 26697) {\n        if (cvrd < i) {\n          lits[li] = i - cvrd;\n          li += 2;\n          cvrd = i;\n        }\n        pos = UZIP.F._writeBlock(i == dlen - 1 || cvrd == dlen ? 1 : 0, lits, li, ebits, data, bs, i - bs, out, pos);\n        li = lc = ebits = 0;\n        bs = i;\n      }\n\n      let mch = 0;\n      //if(nmci==i) mch= nmch;  else\n      if (i < dlen - 2) mch = UZIP.F._bestMatch(data, i, prev, c, Math.min(opt[2], dlen - i), opt[3]);\n      /*\n\t\t\tif(mch!=0 && opt[4]==1 && (mch>>>16)<opt[1] && i+1<dlen-2) {\n\t\t\t\tnmch = UZIP.F._bestMatch(data, i+1, prev, nc, opt[2], opt[3]);  nmci=i+1;\n\t\t\t\t//let mch2 = UZIP.F._bestMatch(data, i+2, prev, nnc);  //nmci=i+1;\n\t\t\t\tif((nmch>>>16)>(mch>>>16)) mch=0;\n\t\t\t}//*/\n      let len = mch >>> 16,\n        dst = mch & 0xffff; //if(i-dst<0) throw \"e\";\n      if (mch != 0) {\n        let len = mch >>> 16,\n          dst = mch & 0xffff; //if(i-dst<0) throw \"e\";\n        let lgi = goodIndex(len, U.of0);\n        U.lhst[257 + lgi]++;\n        let dgi = goodIndex(dst, U.df0);\n        U.dhst[dgi]++;\n        ebits += U.exb[lgi] + U.dxb[dgi];\n        lits[li] = (len << 23) | (i - cvrd);\n        lits[li + 1] = (dst << 16) | (lgi << 8) | dgi;\n        li += 2;\n        cvrd = i + len;\n      } else {\n        U.lhst[data[i]]++;\n      }\n      lc++;\n    }\n  }\n  if (bs != i || data.length == 0) {\n    if (cvrd < i) {\n      lits[li] = i - cvrd;\n      li += 2;\n      cvrd = i;\n    }\n    pos = UZIP.F._writeBlock(1, lits, li, ebits, data, bs, i - bs, out, pos);\n    li = 0;\n    lc = 0;\n    li = lc = ebits = 0;\n    bs = i;\n  }\n  while ((pos & 7) != 0) pos++;\n  return pos >>> 3;\n};\nUZIP.F._bestMatch = function(data, i, prev, c, nice, chain) {\n  let ci = i & 0x7fff,\n    pi = prev[ci];\n  //console.log(\"----\", i);\n  let dif = (ci - pi + (1 << 15)) & 0x7fff;\n  if (pi == ci || c != UZIP.F._hash(data, i - dif)) return 0;\n  let tl = 0,\n    td = 0; // top length, top distance\n  let dlim = Math.min(0x7fff, i);\n  while (dif <= dlim && --chain != 0 && pi != ci /*&& c==UZIP.F._hash(data,i-dif)*/) {\n    if (tl == 0 || data[i + tl] == data[i + tl - dif]) {\n      let cl = UZIP.F._howLong(data, i, dif);\n      if (cl > tl) {\n        tl = cl;\n        td = dif;\n        if (tl >= nice) break; //*\n        if (dif + 2 < cl) cl = dif + 2;\n        let maxd = 0; // pi does not point to the start of the word\n        for (let j = 0; j < cl - 2; j++) {\n          let ei = (i - dif + j + (1 << 15)) & 0x7fff;\n          let li = prev[ei];\n          let curd = (ei - li + (1 << 15)) & 0x7fff;\n          if (curd > maxd) {\n            maxd = curd;\n            pi = ei;\n          }\n        } //*/\n      }\n    }\n\n    ci = pi;\n    pi = prev[ci];\n    dif += (ci - pi + (1 << 15)) & 0x7fff;\n  }\n  return (tl << 16) | td;\n};\nUZIP.F._howLong = function(data, i, dif) {\n  if (data[i] != data[i - dif] || data[i + 1] != data[i + 1 - dif] || data[i + 2] != data[i + 2 - dif]) return 0;\n  let oi = i,\n    l = Math.min(data.length, i + 258);\n  i += 3;\n  //while(i+4<l && data[i]==data[i-dif] && data[i+1]==data[i+1-dif] && data[i+2]==data[i+2-dif] && data[i+3]==data[i+3-dif]) i+=4;\n  while (i < l && data[i] == data[i - dif]) i++;\n  return i - oi;\n};\nUZIP.F._hash = function(data, i) {\n  return (((data[i] << 8) | data[i + 1]) + (data[i + 2] << 4)) & 0xffff;\n  //let hash_shift = 0, hash_mask = 255;\n  //let h = data[i+1] % 251;\n  //h = (((h << 8) + data[i+2]) % 251);\n  //h = (((h << 8) + data[i+2]) % 251);\n  //h = ((h<<hash_shift) ^ (c) ) & hash_mask;\n  //return h | (data[i]<<8);\n  //return (data[i] | (data[i+1]<<8));\n};\n//UZIP.___toth = 0;\nUZIP.saved = 0;\nUZIP.F._writeBlock = function(BFINAL, lits, li, ebits, data, o0, l0, out, pos) {\n  let U = UZIP.F.U,\n    putsF = UZIP.F._putsF,\n    putsE = UZIP.F._putsE;\n\n  //*\n  let T, ML, MD, MH, numl, numd, numh, lset, dset;\n  U.lhst[256]++;\n  T = UZIP.F.getTrees();\n  ML = T[0];\n  MD = T[1];\n  MH = T[2];\n  numl = T[3];\n  numd = T[4];\n  numh = T[5];\n  lset = T[6];\n  dset = T[7];\n\n  let cstSize = (((pos + 3) & 7) == 0 ? 0 : 8 - ((pos + 3) & 7)) + 32 + (l0 << 3);\n  let fxdSize = ebits + UZIP.F.contSize(U.fltree, U.lhst) + UZIP.F.contSize(U.fdtree, U.dhst);\n  let dynSize = ebits + UZIP.F.contSize(U.ltree, U.lhst) + UZIP.F.contSize(U.dtree, U.dhst);\n  dynSize += 14 + 3 * numh + UZIP.F.contSize(U.itree, U.ihst) + (U.ihst[16] * 2 + U.ihst[17] * 3 + U.ihst[18] * 7);\n\n  for (let j = 0; j < 286; j++) U.lhst[j] = 0;\n  for (let j = 0; j < 30; j++) U.dhst[j] = 0;\n  for (let j = 0; j < 19; j++) U.ihst[j] = 0;\n  //*/\n  let BTYPE = cstSize < fxdSize && cstSize < dynSize ? 0 : fxdSize < dynSize ? 1 : 2;\n  putsF(out, pos, BFINAL);\n  putsF(out, pos + 1, BTYPE);\n  pos += 3;\n\n  let opos = pos;\n  if (BTYPE == 0) {\n    while ((pos & 7) != 0) pos++;\n    pos = UZIP.F._copyExact(data, o0, l0, out, pos);\n  } else {\n    let ltree, dtree;\n    if (BTYPE == 1) {\n      ltree = U.fltree;\n      dtree = U.fdtree;\n    }\n    if (BTYPE == 2) {\n      UZIP.F.makeCodes(U.ltree, ML);\n      UZIP.F.revCodes(U.ltree, ML);\n      UZIP.F.makeCodes(U.dtree, MD);\n      UZIP.F.revCodes(U.dtree, MD);\n      UZIP.F.makeCodes(U.itree, MH);\n      UZIP.F.revCodes(U.itree, MH);\n\n      ltree = U.ltree;\n      dtree = U.dtree;\n\n      putsE(out, pos, numl - 257);\n      pos += 5; // 286\n      putsE(out, pos, numd - 1);\n      pos += 5; // 30\n      putsE(out, pos, numh - 4);\n      pos += 4; // 19\n\n      for (let i = 0; i < numh; i++) putsE(out, pos + i * 3, U.itree[(U.ordr[i] << 1) + 1]);\n      pos += 3 * numh;\n      pos = UZIP.F._codeTiny(lset, U.itree, out, pos);\n      pos = UZIP.F._codeTiny(dset, U.itree, out, pos);\n    }\n\n    let off = o0;\n    for (let si = 0; si < li; si += 2) {\n      let qb = lits[si],\n        len = qb >>> 23,\n        end = off + (qb & ((1 << 23) - 1));\n      while (off < end) pos = UZIP.F._writeLit(data[off++], ltree, out, pos);\n\n      if (len != 0) {\n        let qc = lits[si + 1],\n          dst = qc >> 16,\n          lgi = (qc >> 8) & 255,\n          dgi = qc & 255;\n        pos = UZIP.F._writeLit(257 + lgi, ltree, out, pos);\n        putsE(out, pos, len - U.of0[lgi]);\n        pos += U.exb[lgi];\n\n        pos = UZIP.F._writeLit(dgi, dtree, out, pos);\n        putsF(out, pos, dst - U.df0[dgi]);\n        pos += U.dxb[dgi];\n        off += len;\n      }\n    }\n    pos = UZIP.F._writeLit(256, ltree, out, pos);\n  }\n  //console.log(pos-opos, fxdSize, dynSize, cstSize);\n  return pos;\n};\nUZIP.F._copyExact = function(data, off, len, out, pos) {\n  let p8 = pos >>> 3;\n  out[p8] = len;\n  out[p8 + 1] = len >>> 8;\n  out[p8 + 2] = 255 - out[p8];\n  out[p8 + 3] = 255 - out[p8 + 1];\n  p8 += 4;\n  out.set(new Uint8Array(data.buffer, off, len), p8);\n  //for(let i=0; i<len; i++) out[p8+i]=data[off+i];\n  return pos + ((len + 4) << 3);\n};\n/*\n\tInteresting facts:\n\t- decompressed block can have bytes, which do not occur in a Huffman tree (copied from the previous block by reference)\n*/\n\nUZIP.F.getTrees = function() {\n  let U = UZIP.F.U;\n  let ML = UZIP.F._hufTree(U.lhst, U.ltree, 15);\n  let MD = UZIP.F._hufTree(U.dhst, U.dtree, 15);\n  let lset = [],\n    numl = UZIP.F._lenCodes(U.ltree, lset);\n  let dset = [],\n    numd = UZIP.F._lenCodes(U.dtree, dset);\n  for (let i = 0; i < lset.length; i += 2) U.ihst[lset[i]]++;\n  for (let i = 0; i < dset.length; i += 2) U.ihst[dset[i]]++;\n  let MH = UZIP.F._hufTree(U.ihst, U.itree, 7);\n  let numh = 19;\n  while (numh > 4 && U.itree[(U.ordr[numh - 1] << 1) + 1] == 0) numh--;\n  return [ML, MD, MH, numl, numd, numh, lset, dset];\n};\nUZIP.F.getSecond = function(a) {\n  let b = [];\n  for (let i = 0; i < a.length; i += 2) b.push(a[i + 1]);\n  return b;\n};\nUZIP.F.nonZero = function(a) {\n  let b = '';\n  for (let i = 0; i < a.length; i += 2) if (a[i + 1] != 0) b += (i >> 1) + ',';\n  return b;\n};\nUZIP.F.contSize = function(tree, hst) {\n  let s = 0;\n  for (let i = 0; i < hst.length; i++) s += hst[i] * tree[(i << 1) + 1];\n  return s;\n};\nUZIP.F._codeTiny = function(set, tree, out, pos) {\n  for (let i = 0; i < set.length; i += 2) {\n    let l = set[i],\n      rst = set[i + 1]; //console.log(l, pos, tree[(l<<1)+1]);\n    pos = UZIP.F._writeLit(l, tree, out, pos);\n    let rsl = l == 16 ? 2 : l == 17 ? 3 : 7;\n    if (l > 15) {\n      UZIP.F._putsE(out, pos, rst, rsl);\n      pos += rsl;\n    }\n  }\n  return pos;\n};\nUZIP.F._lenCodes = function(tree, set) {\n  let len = tree.length;\n  while (len != 2 && tree[len - 1] == 0) len -= 2; // when no distances, keep one code with length 0\n  for (let i = 0; i < len; i += 2) {\n    let l = tree[i + 1],\n      nxt = i + 3 < len ? tree[i + 3] : -1,\n      nnxt = i + 5 < len ? tree[i + 5] : -1,\n      prv = i == 0 ? -1 : tree[i - 1];\n    if (l == 0 && nxt == l && nnxt == l) {\n      let lz = i + 5;\n      while (lz + 2 < len && tree[lz + 2] == l) lz += 2;\n      let zc = Math.min((lz + 1 - i) >>> 1, 138);\n      if (zc < 11) set.push(17, zc - 3);\n      else set.push(18, zc - 11);\n      i += zc * 2 - 2;\n    } else if (l == prv && nxt == l && nnxt == l) {\n      let lz = i + 5;\n      while (lz + 2 < len && tree[lz + 2] == l) lz += 2;\n      let zc = Math.min((lz + 1 - i) >>> 1, 6);\n      set.push(16, zc - 3);\n      i += zc * 2 - 2;\n    } else set.push(l, 0);\n  }\n  return len >>> 1;\n};\nUZIP.F._hufTree = function(hst, tree, MAXL) {\n  let list = [],\n    hl = hst.length,\n    tl = tree.length,\n    i = 0;\n  for (i = 0; i < tl; i += 2) {\n    tree[i] = 0;\n    tree[i + 1] = 0;\n  }\n  for (i = 0; i < hl; i++) if (hst[i] != 0) list.push({ lit: i, f: hst[i] });\n  let end = list.length,\n    l2 = list.slice(0);\n  if (end == 0) return 0; // empty histogram (usually for dist)\n  if (end == 1) {\n    let lit = list[0].lit,\n      l2 = lit == 0 ? 1 : 0;\n    tree[(lit << 1) + 1] = 1;\n    tree[(l2 << 1) + 1] = 1;\n    return 1;\n  }\n  list.sort(function(a, b) {\n    return a.f - b.f;\n  });\n  let a = list[0],\n    b = list[1],\n    i0 = 0,\n    i1 = 1,\n    i2 = 2;\n  list[0] = { lit: -1, f: a.f + b.f, l: a, r: b, d: 0 };\n  while (i1 != end - 1) {\n    if (i0 != i1 && (i2 == end || list[i0].f < list[i2].f)) {\n      a = list[i0++];\n    } else {\n      a = list[i2++];\n    }\n    if (i0 != i1 && (i2 == end || list[i0].f < list[i2].f)) {\n      b = list[i0++];\n    } else {\n      b = list[i2++];\n    }\n    list[i1++] = { lit: -1, f: a.f + b.f, l: a, r: b };\n  }\n  let maxl = UZIP.F.setDepth(list[i1 - 1], 0);\n  if (maxl > MAXL) {\n    UZIP.F.restrictDepth(l2, MAXL, maxl);\n    maxl = MAXL;\n  }\n  for (i = 0; i < end; i++) tree[(l2[i].lit << 1) + 1] = l2[i].d;\n  return maxl;\n};\n\nUZIP.F.setDepth = function(t, d) {\n  if (t.lit != -1) {\n    t.d = d;\n    return d;\n  }\n  return Math.max(UZIP.F.setDepth(t.l, d + 1), UZIP.F.setDepth(t.r, d + 1));\n};\n\nUZIP.F.restrictDepth = function(dps, MD, maxl) {\n  let i = 0,\n    bCost = 1 << (maxl - MD),\n    dbt = 0;\n  dps.sort(function(a, b) {\n    return b.d == a.d ? a.f - b.f : b.d - a.d;\n  });\n\n  for (i = 0; i < dps.length; i++)\n    if (dps[i].d > MD) {\n      let od = dps[i].d;\n      dps[i].d = MD;\n      dbt += bCost - (1 << (maxl - od));\n    } else break;\n  dbt = dbt >>> (maxl - MD);\n  while (dbt > 0) {\n    let od = dps[i].d;\n    if (od < MD) {\n      dps[i].d++;\n      dbt -= 1 << (MD - od - 1);\n    } else i++;\n  }\n  for (; i >= 0; i--)\n    if (dps[i].d == MD && dbt < 0) {\n      dps[i].d--;\n      dbt++;\n    }\n  if (dbt != 0) console.log('debt left');\n};\n\nUZIP.F._goodIndex = function(v, arr) {\n  let i = 0;\n  if (arr[i | 16] <= v) i |= 16;\n  if (arr[i | 8] <= v) i |= 8;\n  if (arr[i | 4] <= v) i |= 4;\n  if (arr[i | 2] <= v) i |= 2;\n  if (arr[i | 1] <= v) i |= 1;\n  return i;\n};\nUZIP.F._writeLit = function(ch, ltree, out, pos) {\n  UZIP.F._putsF(out, pos, ltree[ch << 1]);\n  return pos + ltree[(ch << 1) + 1];\n};\n\nUZIP.F.inflate = function(data, buf) {\n  if (data[0] == 3 && data[1] == 0) return buf ? buf : new Uint8Array(0);\n  let F = UZIP.F,\n    bitsF = F._bitsF,\n    bitsE = F._bitsE,\n    decodeTiny = F._decodeTiny,\n    makeCodes = F.makeCodes,\n    codes2map = F.codes2map,\n    get17 = F._get17;\n  let U = F.U;\n\n  let noBuf = buf == null;\n  if (noBuf) buf = new Uint8Array((data.length >> 2) << 3);\n\n  let BFINAL = 0,\n    BTYPE = 0,\n    HLIT = 0,\n    HDIST = 0,\n    HCLEN = 0,\n    ML = 0,\n    MD = 0;\n  let off = 0,\n    pos = 0;\n  let lmap, dmap;\n\n  while (BFINAL == 0) {\n    BFINAL = bitsF(data, pos, 1);\n    BTYPE = bitsF(data, pos + 1, 2);\n    pos += 3;\n    //console.log(BFINAL, BTYPE);\n\n    if (BTYPE == 0) {\n      if ((pos & 7) != 0) pos += 8 - (pos & 7);\n      let p8 = (pos >>> 3) + 4,\n        len = data[p8 - 4] | (data[p8 - 3] << 8); //console.log(len);//bitsF(data, pos, 16),\n      if (noBuf) buf = UZIP.F._check(buf, off + len);\n      buf.set(new Uint8Array(data.buffer, data.byteOffset + p8, len), off);\n      //for(let i=0; i<len; i++) buf[off+i] = data[p8+i];\n      //for(let i=0; i<len; i++) if(buf[off+i] != data[p8+i]) throw \"e\";\n      pos = (p8 + len) << 3;\n      off += len;\n      continue;\n    }\n    if (noBuf) buf = UZIP.F._check(buf, off + (1 << 17));\n    if (BTYPE == 1) {\n      lmap = U.flmap;\n      dmap = U.fdmap;\n      ML = (1 << 9) - 1;\n      MD = (1 << 5) - 1;\n    }\n    if (BTYPE == 2) {\n      HLIT = bitsE(data, pos, 5) + 257;\n      HDIST = bitsE(data, pos + 5, 5) + 1;\n      HCLEN = bitsE(data, pos + 10, 4) + 4;\n      pos += 14;\n\n      let ppos = pos;\n      for (let i = 0; i < 38; i += 2) {\n        U.itree[i] = 0;\n        U.itree[i + 1] = 0;\n      }\n      let tl = 1;\n      for (let i = 0; i < HCLEN; i++) {\n        let l = bitsE(data, pos + i * 3, 3);\n        U.itree[(U.ordr[i] << 1) + 1] = l;\n        if (l > tl) tl = l;\n      }\n      pos += 3 * HCLEN; //console.log(itree);\n      makeCodes(U.itree, tl);\n      codes2map(U.itree, tl, U.imap);\n\n      lmap = U.lmap;\n      dmap = U.dmap;\n\n      let ml = decodeTiny(U.imap, (1 << tl) - 1, HLIT, data, pos, U.ltree);\n      ML = (1 << (ml >>> 24)) - 1;\n      pos += ml & 0xffffff;\n      makeCodes(U.ltree, ml >>> 24);\n      codes2map(U.ltree, ml >>> 24, lmap);\n\n      let md = decodeTiny(U.imap, (1 << tl) - 1, HDIST, data, pos, U.dtree);\n      MD = (1 << (md >>> 24)) - 1;\n      pos += md & 0xffffff;\n      makeCodes(U.dtree, md >>> 24);\n      codes2map(U.dtree, md >>> 24, dmap);\n    }\n    //let ooff=off, opos=pos;\n    while (true) {\n      let code = lmap[get17(data, pos) & ML];\n      pos += code & 15;\n      let lit = code >>> 4; //U.lhst[lit]++;\n      if (lit >>> 8 == 0) {\n        buf[off++] = lit;\n      } else if (lit == 256) {\n        break;\n      } else {\n        let end = off + lit - 254;\n        if (lit > 264) {\n          let ebs = U.ldef[lit - 257];\n          end = off + (ebs >>> 3) + bitsE(data, pos, ebs & 7);\n          pos += ebs & 7;\n        }\n        //UZIP.F.dst[end-off]++;\n\n        let dcode = dmap[get17(data, pos) & MD];\n        pos += dcode & 15;\n        let dlit = dcode >>> 4;\n        let dbs = U.ddef[dlit],\n          dst = (dbs >>> 4) + bitsF(data, pos, dbs & 15);\n        pos += dbs & 15;\n\n        //let o0 = off-dst, stp = Math.min(end-off, dst);\n        //if(stp>20) while(off<end) {  buf.copyWithin(off, o0, o0+stp);  off+=stp;  }  else\n        //if(end-dst<=off) buf.copyWithin(off, off-dst, end-dst);  else\n        //if(dst==1) buf.fill(buf[off-1], off, end);  else\n        while (off < end) {\n          buf[off] = buf[off++ - dst];\n          buf[off] = buf[off++ - dst];\n          buf[off] = buf[off++ - dst];\n          buf[off] = buf[off++ - dst];\n        }\n        off = end;\n        //while(off!=end) {  buf[off]=buf[off++-dst];  }\n      }\n    }\n    //console.log(off-ooff, (pos-opos)>>>3);\n  }\n  //console.log(UZIP.F.dst);\n  //console.log(tlen, dlen, off-tlen+tcnt);\n  return buf.length == off ? buf : buf.slice(0, off);\n};\nUZIP.F._check = function(buf, len) {\n  let bl = buf.length;\n  if (len <= bl) return buf;\n  let nbuf = new Uint8Array(bl << 1);\n  for (let i = 0; i < bl; i += 4) {\n    nbuf[i] = buf[i];\n    nbuf[i + 1] = buf[i + 1];\n    nbuf[i + 2] = buf[i + 2];\n    nbuf[i + 3] = buf[i + 3];\n  }\n  return nbuf;\n};\n\nUZIP.F._decodeTiny = function(lmap, LL, len, data, pos, tree) {\n  let opos = pos;\n  let bitsE = UZIP.F._bitsE,\n    get17 = UZIP.F._get17;\n  let dlen = len << 1,\n    i = 0,\n    mx = 0;\n  //if(pos<1000) console.log(\"--------\");\n  //console.log(\"----\", pos, \":\",  data[7],data[8], data[9], data[10], data[11]);\n  while (i < dlen) {\n    let code = lmap[get17(data, pos) & LL];\n    pos += code & 15;\n    let lit = code >>> 4; //if(pos<1000) console.log(lit, i>>>1);\n    //if(i<20)console.log(lit, code>>>9, pos);\n    if (lit <= 15) {\n      tree[i] = 0;\n      tree[i + 1] = lit;\n      if (lit > mx) mx = lit;\n      i += 2;\n    } else {\n      let ll = 0,\n        n = 0;\n      if (lit == 16) {\n        n = (3 + bitsE(data, pos, 2)) << 1;\n        pos += 2;\n        ll = tree[i - 1];\n      } else if (lit == 17) {\n        n = (3 + bitsE(data, pos, 3)) << 1;\n        pos += 3;\n      } else if (lit == 18) {\n        n = (11 + bitsE(data, pos, 7)) << 1;\n        pos += 7;\n      }\n      let ni = i + n;\n      while (i < ni) {\n        tree[i] = 0;\n        tree[i + 1] = ll;\n        i += 2;\n      }\n    }\n  }\n  let tl = tree.length;\n  while (i < tl) {\n    tree[i + 1] = 0;\n    i += 2;\n  }\n  return (mx << 24) | (pos - opos);\n};\n\nUZIP.F.makeCodes = function(tree, MAX_BITS) {\n  // code, length\n  let U = UZIP.F.U;\n  let max_code = tree.length;\n  let code, bits, n, i, len;\n\n  let bl_count = U.bl_count;\n  for (let i = 0; i <= MAX_BITS; i++) bl_count[i] = 0;\n  for (i = 1; i < max_code; i += 2) bl_count[tree[i]]++;\n\n  let next_code = U.next_code; // smallest code for each length\n\n  code = 0;\n  bl_count[0] = 0;\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n\n  for (n = 0; n < max_code; n += 2) {\n    len = tree[n + 1];\n    if (len != 0) {\n      tree[n] = next_code[len];\n      next_code[len]++;\n    }\n  }\n};\nUZIP.F.codes2map = function(tree, MAX_BITS, map) {\n  let max_code = tree.length;\n  let U = UZIP.F.U,\n    r15 = U.rev15;\n  for (let i = 0; i < max_code; i += 2)\n    if (tree[i + 1] != 0) {\n      let lit = i >> 1;\n      let cl = tree[i + 1],\n        val = (lit << 4) | cl; // :  (0x8000 | (U.of0[lit-257]<<7) | (U.exb[lit-257]<<4) | cl);\n      let rest = MAX_BITS - cl,\n        i0 = tree[i] << rest,\n        i1 = i0 + (1 << rest);\n      //tree[i]=r15[i0]>>>(15-MAX_BITS);\n      while (i0 != i1) {\n        let p0 = r15[i0] >>> (15 - MAX_BITS);\n        map[p0] = val;\n        i0++;\n      }\n    }\n};\nUZIP.F.revCodes = function(tree, MAX_BITS) {\n  let r15 = UZIP.F.U.rev15,\n    imb = 15 - MAX_BITS;\n  for (let i = 0; i < tree.length; i += 2) {\n    let i0 = tree[i] << (MAX_BITS - tree[i + 1]);\n    tree[i] = r15[i0] >>> imb;\n  }\n};\n\nUZIP.F._putsE = function(dt, pos, val) {\n  val = val << (pos & 7);\n  let o = pos >>> 3;\n  dt[o] |= val;\n  dt[o + 1] |= val >>> 8;\n};\nUZIP.F._putsF = function(dt, pos, val) {\n  val = val << (pos & 7);\n  let o = pos >>> 3;\n  dt[o] |= val;\n  dt[o + 1] |= val >>> 8;\n  dt[o + 2] |= val >>> 16;\n};\n\nUZIP.F._bitsE = function(dt, pos, length) {\n  return ((dt[pos >>> 3] | (dt[(pos >>> 3) + 1] << 8)) >>> (pos & 7)) & ((1 << length) - 1);\n};\nUZIP.F._bitsF = function(dt, pos, length) {\n  return ((dt[pos >>> 3] | (dt[(pos >>> 3) + 1] << 8) | (dt[(pos >>> 3) + 2] << 16)) >>> (pos & 7)) & ((1 << length) - 1);\n};\n/*\nUZIP.F._get9 = function(dt, pos) {\n\treturn ((dt[pos>>>3] | (dt[(pos>>>3)+1]<<8))>>>(pos&7))&511;\n} */\nUZIP.F._get17 = function(dt, pos) {\n  // return at least 17 meaningful bytes\n  return (dt[pos >>> 3] | (dt[(pos >>> 3) + 1] << 8) | (dt[(pos >>> 3) + 2] << 16)) >>> (pos & 7);\n};\nUZIP.F._get25 = function(dt, pos) {\n  // return at least 17 meaningful bytes\n  return (dt[pos >>> 3] | (dt[(pos >>> 3) + 1] << 8) | (dt[(pos >>> 3) + 2] << 16) | (dt[(pos >>> 3) + 3] << 24)) >>> (pos & 7);\n};\n\nUZIP.F.U = {\n  next_code: new Uint16Array(16),\n  bl_count: new Uint16Array(16),\n  ordr: [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],\n  of0: [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 999, 999, 999],\n  exb: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0],\n  ldef: new Uint16Array(32),\n  df0: [\n    1,\n    2,\n    3,\n    4,\n    5,\n    7,\n    9,\n    13,\n    17,\n    25,\n    33,\n    49,\n    65,\n    97,\n    129,\n    193,\n    257,\n    385,\n    513,\n    769,\n    1025,\n    1537,\n    2049,\n    3073,\n    4097,\n    6145,\n    8193,\n    12289,\n    16385,\n    24577,\n    65535,\n    65535\n  ],\n  dxb: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0],\n  ddef: new Uint32Array(32),\n  flmap: new Uint16Array(512),\n  fltree: [],\n  fdmap: new Uint16Array(32),\n  fdtree: [],\n  lmap: new Uint16Array(32768),\n  ltree: [],\n  dmap: new Uint16Array(32768),\n  dtree: [],\n  imap: new Uint16Array(512),\n  itree: [],\n  //rev9 : new Uint16Array(  512)\n  rev15: new Uint16Array(1 << 15),\n  lhst: new Uint32Array(286),\n  dhst: new Uint32Array(30),\n  ihst: new Uint32Array(19),\n  lits: new Uint32Array(15000),\n  strt: new Uint16Array(1 << 16),\n  prev: new Uint16Array(1 << 15)\n};\n\n(function() {\n  let U = UZIP.F.U;\n  let len = 1 << 15;\n  for (let i = 0; i < len; i++) {\n    let x = i;\n    x = ((x & 0xaaaaaaaa) >>> 1) | ((x & 0x55555555) << 1);\n    x = ((x & 0xcccccccc) >>> 2) | ((x & 0x33333333) << 2);\n    x = ((x & 0xf0f0f0f0) >>> 4) | ((x & 0x0f0f0f0f) << 4);\n    x = ((x & 0xff00ff00) >>> 8) | ((x & 0x00ff00ff) << 8);\n    U.rev15[i] = ((x >>> 16) | (x << 16)) >>> 17;\n  }\n\n  for (let i = 0; i < 32; i++) {\n    U.ldef[i] = (U.of0[i] << 3) | U.exb[i];\n    U.ddef[i] = (U.df0[i] << 4) | U.dxb[i];\n  }\n\n  let i = 0;\n  for (; i <= 143; i++) U.fltree.push(0, 8);\n  for (; i <= 255; i++) U.fltree.push(0, 9);\n  for (; i <= 279; i++) U.fltree.push(0, 7);\n  for (; i <= 287; i++) U.fltree.push(0, 8);\n  UZIP.F.makeCodes(U.fltree, 9);\n  UZIP.F.codes2map(U.fltree, 9, U.flmap);\n  UZIP.F.revCodes(U.fltree, 9);\n\n  for (i = 0; i < 32; i++) U.fdtree.push(0, 5);\n  UZIP.F.makeCodes(U.fdtree, 5);\n  UZIP.F.codes2map(U.fdtree, 5, U.fdmap);\n  UZIP.F.revCodes(U.fdtree, 5);\n\n  for (let i = 0; i < 19; i++) U.itree.push(0, 0);\n  for (let i = 0; i < 286; i++) U.ltree.push(0, 0);\n  for (let i = 0; i < 30; i++) U.dtree.push(0, 0);\n})();\n","// Modules\nimport uzip from '../3p/UZIP';\n\n// Collection of functions to parse roms\n// Private function to fetch a game\nexport const fetchROMAsByteArray = (ROM, loadOptions) => {\n  const fetchROMAsByteArrayTask = async () => {\n    // Check if we were passed straight bytes\n    if (ArrayBuffer.isView(ROM) && ROM.constructor === Uint8Array) {\n      return ROM;\n    } else if (typeof ROM === 'object' && ROM.size) {\n      // We were passed a file from HTML file input\n\n      // Read the file as a Uint8Array\n      const byteArray = await getROMFromFileReaderAsByteArray(ROM);\n\n      if (ROM.name.toLowerCase().endsWith('.zip')) {\n        return await parseByteArrayAsZip(byteArray);\n      }\n\n      return byteArray;\n    } else {\n      // We were passed a URL\n\n      // Fetch the file\n      // First check if we have headers\n      const fetchHeaders = {};\n      if (loadOptions && loadOptions.headers) {\n        fetchHeaders.headers = loadOptions.headers;\n      }\n\n      let bytes = await fetch(ROM, fetchHeaders).then(blob => {\n        if (!blob.ok) {\n          return Promise.reject(blob);\n        }\n        return blob.arrayBuffer();\n      });\n\n      let fileName = ROM;\n      if (loadOptions && loadOptions.fileName) {\n        fileName = loadOptions.fileName;\n      }\n\n      // Get our byteArray\n      const byteArray = new Uint8Array(bytes);\n\n      if (fileName.toLowerCase().endsWith('.zip')) {\n        return await parseByteArrayAsZip(byteArray);\n      }\n\n      return byteArray;\n    }\n  };\n\n  return fetchROMAsByteArrayTask();\n};\n\nconst getROMFromFileReaderAsByteArray = async ROM => {\n  const fileReaderByteArray = await new Promise((resolve, reject) => {\n    // Read the file object\n    // https://www.javascripture.com/FileReader#readAsArrayBuffer_Blob\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      const byteArray = new Uint8Array(fileReader.result);\n      resolve(byteArray);\n    };\n    fileReader.readAsArrayBuffer(ROM);\n  });\n  return fileReaderByteArray;\n};\n\n// Function to parse and find the gb files within an archive\nconst parseByteArrayAsZip = async byteArray => {\n  // Parse the zip using UZIP\n  const unzipObject = await uzip.parse(byteArray);\n\n  // Find the ROM in the output\n  let foundROM = false;\n  const unzipObjectKeys = Object.keys(unzipObject);\n  unzipObjectKeys.some(key => {\n    const lowercaseKey = key.toLowerCase();\n    if (lowercaseKey.includes('.gb') || lowercaseKey.includes('.gbc')) {\n      foundROM = unzipObject[key];\n      return true;\n    }\n    return false;\n  });\n\n  if (!foundROM) {\n    throw new Error('Could not find a ROM in zip...');\n  }\n\n  return foundROM;\n};\n","// Functions here are depedent on WasmBoyMemory state.\n// Thus me bound using .bind() on functions\n\n// WasmBoy Modules\nimport { WasmBoyGraphics } from '../graphics/graphics';\nimport { WasmBoyAudio } from '../audio/audio';\nimport { WasmBoyController } from '../controller/controller';\nimport { WasmBoyMemory } from '../memory/memory';\n\n// Fetch our rom\nimport { fetchROMAsByteArray } from './fetchrom';\n\n// Get our worker message types\nimport { WORKER_MESSAGE_TYPE } from '../worker/constants';\n\n// Finish request for wasm module, and fetch game\n// NOTE: **Should bind the wasmboy this here**\nexport function loadROMToWasmBoy(ROM, fetchHeaders) {\n  // Getting started with wasm\n  // http://webassembly.org/getting-started/js-api/\n  this.ready = false;\n  this.loadedAndStarted = false;\n\n  const initializeTask = async () => {\n    // Get our promises\n    const initPromises = [fetchROMAsByteArray(ROM, fetchHeaders), this._instantiateWorkers()];\n\n    if (!this.options.headless && WasmBoyMemory.getLoadedCartridgeMemoryState().RAM) {\n      initPromises.push(WasmBoyMemory.saveCartridgeRam());\n    }\n\n    let ROMAsByteArray;\n    await Promise.all(initPromises).then(responses => {\n      ROMAsByteArray = responses[0];\n    });\n\n    // Now tell the wasm module to instantiate wasm\n    const response = await this.worker.postMessage({\n      type: WORKER_MESSAGE_TYPE.INSTANTIATE_WASM\n    });\n\n    this.coreType = response.message.type;\n\n    return ROMAsByteArray;\n  };\n\n  const loadROMAndConfigTask = async ROM => {\n    // Clear what is currently in memory, then load the cartridge memory\n    await WasmBoyMemory.clearMemory();\n\n    // TODO: Handle passing a boot rom\n    await WasmBoyMemory.loadCartridgeRom(ROM);\n\n    // Save the game that we loaded if we need to reload the game\n    this.loadedROM = ROM;\n\n    // Run our initialization on the core\n    await this.worker.postMessage({\n      type: WORKER_MESSAGE_TYPE.CONFIG,\n      config: [\n        0, // TODO: Include Boot Rom\n        this.options.isGbcEnabled ? 1 : 0,\n        this.options.audioBatchProcessing ? 1 : 0,\n        this.options.graphicsBatchProcessing ? 1 : 0,\n        this.options.timersBatchProcessing ? 1 : 0,\n        this.options.graphicsDisableScanlineRendering ? 1 : 0,\n        this.options.audioAccumulateSamples ? 1 : 0,\n        this.options.tileRendering ? 1 : 0,\n        this.options.tileCaching ? 1 : 0\n      ],\n      options: {\n        gameboyFrameRate: this.options.gameboyFrameRate,\n        headless: this.options.headless,\n        isAudioEnabled: this.options.isAudioEnabled,\n        frameSkip: this.options.frameSkip\n      }\n    });\n  };\n\n  const loadROMTask = async () => {\n    // Pause wasmBoy\n    await this.pause();\n\n    // Initialize any needed parts of wasmboy\n    let ROM = await initializeTask();\n\n    // Check if we are running headless\n    if (this.options.headless) {\n      await WasmBoyMemory.initialize(this.options.headless, this.options.saveStateCallback);\n\n      await loadROMAndConfigTask(ROM);\n\n      this.ready = true;\n      if (this.options.onReady) {\n        this.options.onReady();\n      }\n    } else {\n      // Finally intialize all of our services\n      // Initialize our services\n      await Promise.all([\n        WasmBoyGraphics.initialize(this.canvasElement, this.options.updateGraphicsCallback),\n        WasmBoyAudio.initialize(this.options.updateAudioCallback),\n        WasmBoyController.initialize(),\n        WasmBoyMemory.initialize(this.options.headless, this.options.saveStateCallback)\n      ]);\n\n      await loadROMAndConfigTask(ROM);\n\n      // Load the game's cartridge ram\n      await WasmBoyMemory.loadCartridgeRam();\n\n      this.ready = true;\n      if (this.options.onReady) {\n        this.options.onReady();\n      }\n    }\n  };\n\n  return loadROMTask();\n}\n","var now = require('performance-now')\n  , root = typeof window === 'undefined' ? global : window\n  , vendors = ['moz', 'webkit']\n  , suffix = 'AnimationFrame'\n  , raf = root['request' + suffix]\n  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]\n\nfor(var i = 0; !raf && i < vendors.length; i++) {\n  raf = root[vendors[i] + 'Request' + suffix]\n  caf = root[vendors[i] + 'Cancel' + suffix]\n      || root[vendors[i] + 'CancelRequest' + suffix]\n}\n\n// Some versions of FF have rAF but not cAF\nif(!raf || !caf) {\n  var last = 0\n    , id = 0\n    , queue = []\n    , frameDuration = 1000 / 60\n\n  raf = function(callback) {\n    if(queue.length === 0) {\n      var _now = now()\n        , next = Math.max(0, frameDuration - (_now - last))\n      last = next + _now\n      setTimeout(function() {\n        var cp = queue.slice(0)\n        // Clear queue here to prevent\n        // callbacks from appending listeners\n        // to the current frame's queue\n        queue.length = 0\n        for(var i = 0; i < cp.length; i++) {\n          if(!cp[i].cancelled) {\n            try{\n              cp[i].callback(last)\n            } catch(e) {\n              setTimeout(function() { throw e }, 0)\n            }\n          }\n        }\n      }, Math.round(next))\n    }\n    queue.push({\n      handle: ++id,\n      callback: callback,\n      cancelled: false\n    })\n    return id\n  }\n\n  caf = function(handle) {\n    for(var i = 0; i < queue.length; i++) {\n      if(queue[i].handle === handle) {\n        queue[i].cancelled = true\n      }\n    }\n  }\n}\n\nmodule.exports = function(fn) {\n  // Wrap in a new function to prevent\n  // `cancel` potentially being assigned\n  // to the native rAF function\n  return raf.call(root, fn)\n}\nmodule.exports.cancel = function() {\n  caf.apply(root, arguments)\n}\nmodule.exports.polyfill = function(object) {\n  if (!object) {\n    object = root;\n  }\n  object.requestAnimationFrame = raf\n  object.cancelAnimationFrame = caf\n}\n","// Generated by CoffeeScript 1.12.2\n(function() {\n  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n\n  if ((typeof performance !== \"undefined\" && performance !== null) && performance.now) {\n    module.exports = function() {\n      return performance.now();\n    };\n  } else if ((typeof process !== \"undefined\" && process !== null) && process.hrtime) {\n    module.exports = function() {\n      return (getNanoSeconds() - nodeLoadTime) / 1e6;\n    };\n    hrtime = process.hrtime;\n    getNanoSeconds = function() {\n      var hr;\n      hr = hrtime();\n      return hr[0] * 1e9 + hr[1];\n    };\n    moduleLoadTime = getNanoSeconds();\n    upTime = process.uptime() * 1e9;\n    nodeLoadTime = moduleLoadTime - upTime;\n  } else if (Date.now) {\n    module.exports = function() {\n      return Date.now() - loadTime;\n    };\n    loadTime = Date.now();\n  } else {\n    module.exports = function() {\n      return new Date().getTime() - loadTime;\n    };\n    loadTime = new Date().getTime();\n  }\n\n}).call(this);\n\n//# sourceMappingURL=performance-now.js.map\n","// Functions here are depedent on WasmBoyMemory state.\n// Thus me bound using .bind() on functions\n\n// Imports\n// requestAnimationFrame() for headless mode\nimport raf from 'raf';\n\n// WasmBoy Modules\nimport { WasmBoyGraphics } from '../graphics/graphics';\nimport { WasmBoyAudio } from '../audio/audio';\nimport { WasmBoyController } from '../controller/controller';\n\n// Function to render our emulator output\nexport function render() {\n  // Don't run if paused\n  if (this.paused) {\n    return true;\n  }\n\n  // Check if we have frameskip\n  let shouldSkipRenderingFrame = false;\n  if (this.frameSkip && this.frameSkip > 0) {\n    this.frameSkipCounter++;\n\n    if (this.frameSkipCounter < this.frameSkip) {\n      shouldSkipRenderingFrame = true;\n    } else {\n      this.frameSkipCounter = 0;\n    }\n  }\n\n  // Render the display\n  if (!shouldSkipRenderingFrame) {\n    WasmBoyGraphics.renderFrame();\n  }\n\n  // Update our controller\n  WasmBoyController.updateController();\n\n  this.renderId = raf(() => {\n    render.call(this);\n  });\n}\n","function index(buffer, opt) {\n  opt = opt || {};\n\n  var numChannels = buffer.numberOfChannels;\n  var sampleRate = buffer.sampleRate;\n  var format = opt.float32 ? 3 : 1;\n  var bitDepth = format === 3 ? 32 : 16;\n\n  var result;\n  if (numChannels === 2) {\n    result = interleave(buffer.getChannelData(0), buffer.getChannelData(1));\n  } else {\n    result = buffer.getChannelData(0);\n  }\n\n  return encodeWAV(result, format, sampleRate, numChannels, bitDepth)\n}\n\nfunction encodeWAV (samples, format, sampleRate, numChannels, bitDepth) {\n  var bytesPerSample = bitDepth / 8;\n  var blockAlign = numChannels * bytesPerSample;\n\n  var buffer = new ArrayBuffer(44 + samples.length * bytesPerSample);\n  var view = new DataView(buffer);\n\n  /* RIFF identifier */\n  writeString(view, 0, 'RIFF');\n  /* RIFF chunk length */\n  view.setUint32(4, 36 + samples.length * bytesPerSample, true);\n  /* RIFF type */\n  writeString(view, 8, 'WAVE');\n  /* format chunk identifier */\n  writeString(view, 12, 'fmt ');\n  /* format chunk length */\n  view.setUint32(16, 16, true);\n  /* sample format (raw) */\n  view.setUint16(20, format, true);\n  /* channel count */\n  view.setUint16(22, numChannels, true);\n  /* sample rate */\n  view.setUint32(24, sampleRate, true);\n  /* byte rate (sample rate * block align) */\n  view.setUint32(28, sampleRate * blockAlign, true);\n  /* block align (channel count * bytes per sample) */\n  view.setUint16(32, blockAlign, true);\n  /* bits per sample */\n  view.setUint16(34, bitDepth, true);\n  /* data chunk identifier */\n  writeString(view, 36, 'data');\n  /* data chunk length */\n  view.setUint32(40, samples.length * bytesPerSample, true);\n  if (format === 1) { // Raw PCM\n    floatTo16BitPCM(view, 44, samples);\n  } else {\n    writeFloat32(view, 44, samples);\n  }\n\n  return buffer\n}\n\nfunction interleave (inputL, inputR) {\n  var length = inputL.length + inputR.length;\n  var result = new Float32Array(length);\n\n  var index = 0;\n  var inputIndex = 0;\n\n  while (index < length) {\n    result[index++] = inputL[inputIndex];\n    result[index++] = inputR[inputIndex];\n    inputIndex++;\n  }\n  return result\n}\n\nfunction writeFloat32 (output, offset, input) {\n  for (var i = 0; i < input.length; i++, offset += 4) {\n    output.setFloat32(offset, input[i], true);\n  }\n}\n\nfunction floatTo16BitPCM (output, offset, input) {\n  for (var i = 0; i < input.length; i++, offset += 2) {\n    var s = Math.max(-1, Math.min(1, input[i]));\n    output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n  }\n}\n\nfunction writeString (view, offset, string) {\n  for (var i = 0; i < string.length; i++) {\n    view.setUint8(offset + i, string.charCodeAt(i));\n  }\n}\n\nexport default index;\n","import { WasmBoyLib } from '../wasmboy/wasmboy';\nimport { WasmBoyAudio } from '../audio/audio';\n\nimport { WORKER_MESSAGE_TYPE } from '../worker/constants';\nimport { getEventData } from '../worker/util';\n\n// https://www.npmjs.com/package/audiobuffer-to-wav\n// https://github.com/Jam3/audiobuffer-to-wav/blob/master/demo/index.js\nimport toWav from 'audiobuffer-to-wav';\n\nexport const saveCurrentAudioBufferToWav = () => {\n  if (!WasmBoyAudio.audioBuffer) {\n    return;\n  }\n\n  const wav = toWav(WasmBoyAudio.audioBuffer);\n  const blob = new window.Blob([new DataView(wav)], {\n    type: 'audio/wav'\n  });\n\n  const url = window.URL.createObjectURL(blob);\n  const anchor = document.createElement('a');\n  document.body.appendChild(anchor);\n  anchor.style = 'display: none';\n  anchor.href = url;\n  anchor.download = 'audio.wav';\n  anchor.click();\n  window.URL.revokeObjectURL(url);\n};\n\nexport const runWasmExport = async (exportKey, parameters) => {\n  if (!WasmBoyLib.worker) {\n    return;\n  }\n\n  const event = await WasmBoyLib.worker.postMessage({\n    type: WORKER_MESSAGE_TYPE.RUN_WASM_EXPORT,\n    export: exportKey,\n    parameters\n  });\n\n  const eventData = getEventData(event);\n  return eventData.message.response;\n};\n\nexport const getWasmMemorySection = async (start, end) => {\n  if (!WasmBoyLib.worker) {\n    return;\n  }\n\n  const event = await WasmBoyLib.worker.postMessage({\n    type: WORKER_MESSAGE_TYPE.GET_WASM_MEMORY_SECTION,\n    start,\n    end\n  });\n\n  const eventData = getEventData(event);\n  return new Uint8Array(eventData.message.response);\n};\n\nexport const getWasmConstant = async constantKey => {\n  if (!WasmBoyLib.worker) {\n    return;\n  }\n\n  const event = await WasmBoyLib.worker.postMessage({\n    type: WORKER_MESSAGE_TYPE.GET_WASM_CONSTANT,\n    constant: constantKey\n  });\n\n  const eventData = getEventData(event);\n  return eventData.message.response;\n};\n","// Functions here are depedent on WasmBoyMemory state.\n// Thus me bound using .bind() on functions\n\nimport { WORKER_MESSAGE_TYPE } from '../worker/constants';\nimport { getEventData } from '../worker/util';\nimport { runWasmExport, getWasmMemorySection, getWasmConstant } from '../debug/debug';\n\n// Functions to handle the lib worker messages\nexport function libWorkerOnMessage(event) {\n  const eventData = getEventData(event);\n\n  if (!eventData.message) {\n    return;\n  }\n\n  switch (eventData.message.type) {\n    case WORKER_MESSAGE_TYPE.UPDATED: {\n      this.fps = eventData.message.fps;\n      return;\n    }\n\n    case WORKER_MESSAGE_TYPE.CRASHED: {\n      const crashedTask = async () => {\n        await this.pause();\n\n        console.log('Wasmboy Crashed!');\n\n        let programCounter = await runWasmExport('getProgramCounter');\n        let gameboyMemoryConstant = await getWasmConstant('GAMEBOY_INTERNAL_MEMORY_LOCATION');\n        let opcode = await getWasmMemorySection(gameboyMemoryConstant + programCounter, gameboyMemoryConstant + programCounter + 1);\n\n        console.log(`Program Counter: 0x${programCounter.toString(16)}`);\n        console.log(`Opcode: 0x${opcode[0].toString(16)}`);\n      };\n      crashedTask();\n      return;\n    }\n\n    default: {\n      // Do nothing. This catches all messages so yeah\n    }\n  }\n}\n","// WasmBoy Modules\nimport { WasmBoyGraphics } from '../graphics/graphics';\nimport { WasmBoyAudio } from '../audio/audio';\nimport { WasmBoyMemory } from '../memory/memory';\n\n// Other lib helpers\nimport { instantiateWorkers } from '../worker/instantiate';\nimport { WORKER_MESSAGE_TYPE } from '../worker/constants';\nimport { loadROMToWasmBoy } from './loadrom';\nimport { render } from './render';\nimport { libWorkerOnMessage } from './onmessage';\n\n// requestAnimationFrame() for headless mode\nimport raf from 'raf';\n\n// Our Main Orchestrator of the WasmBoy lib\nclass WasmBoyLibService {\n  // Start the request to our wasm module\n  constructor() {\n    this.worker = undefined;\n    this.coreType = undefined;\n    this.canvasElement = undefined;\n    this.paused = false;\n    this.ready = false;\n    this.loadedAndStarted = false;\n    this.renderId = false;\n    this.loadedROM = false;\n\n    this.fps = 0;\n\n    // Reset our config and stateful elements that depend on it\n    // this.options is set here\n    this._resetConfig();\n\n    // Add some listeners for when we are put into the background\n    if (typeof window !== 'undefined') {\n      window.document.addEventListener('visibilitychange', () => {\n        // fires when user switches tabs, apps, goes to homescreen, etc.\n        if (document.visibilityState === 'hidden') {\n          if (this.options && this.options.disablePauseOnHidden) {\n            return;\n          }\n          this.pause();\n        }\n      });\n    }\n  }\n\n  // Function to initialize/configure Wasmboy\n  config(wasmBoyOptions, canvasElement) {\n    const configTask = async () => {\n      // Pause any currently running game\n      await this.pause();\n\n      // Get our canvas elements\n      await this.setCanvas(canvasElement);\n\n      // Reset our config and stateful elements that depend on it\n      // If we have a new config to take its place\n      if (wasmBoyOptions || !this.options) {\n        this._resetConfig();\n      }\n\n      // set our options\n      if (wasmBoyOptions) {\n        // Set all options\n        Object.keys(wasmBoyOptions).forEach(key => {\n          if (this.options[key] !== undefined) {\n            this.options[key] = wasmBoyOptions[key];\n          }\n        });\n\n        // Aliases\n        // Gameboy Speed / Framerate\n        if (wasmBoyOptions.gameboySpeed) {\n          let gameboyFrameRate = Math.floor(wasmBoyOptions.gameboySpeed * 60);\n          if (gameboyFrameRate <= 0) {\n            gameboyFrameRate = 1;\n          }\n          this.options.gameboyFrameRate = gameboyFrameRate;\n        }\n      }\n    };\n\n    return configTask();\n  }\n\n  // Function to return our current configuration as an object\n  getConfig() {\n    return this.options;\n  }\n\n  // Function to get/set our canvas element\n  // Useful for vaporboy\n  setCanvas(canvasElement) {\n    if (!canvasElement) {\n      return Promise.resolve();\n    }\n\n    const setCanvasTask = async () => {\n      await this.pause();\n\n      // Set our new canvas element, and re-run init on graphics to apply styles and things\n      this.canvasElement = canvasElement;\n\n      if (this.wasmInstance && this.wasmByteMemory) {\n        await WasmBoyGraphics.initialize(this.canvasElement, this.wasmInstance, this.wasmByteMemory, this.options.updateGraphicsCallback);\n      }\n    };\n\n    return setCanvasTask();\n  }\n\n  getCanvas() {\n    return this.canvasElement;\n  }\n\n  // Finish request for wasm module, and fetch game\n  loadROM(ROM, fetchHeaders) {\n    const boundLoadROM = loadROMToWasmBoy.bind(this);\n    return boundLoadROM(ROM, fetchHeaders);\n  }\n\n  // function to start/resume\n  play() {\n    const playTask = async () => {\n      if (!this.ready) {\n        return;\n      }\n      if (!this.loadedAndStarted) {\n        this.loadedAndStarted = true;\n        if (this.options.onLoadedAndStarted) {\n          this.options.onLoadedAndStarted();\n        }\n      }\n      if (this.options.onPlay) {\n        this.options.onPlay();\n      }\n\n      // Bless the audio, this is to fix any autoplay issues\n      if (!this.options.headless) {\n        WasmBoyAudio.resumeAudioContext();\n        WasmBoyAudio.resetTimeStretch();\n      }\n\n      // Reset the audio queue index to stop weird pauses when trying to load a game\n      await this.worker.postMessage({\n        type: WORKER_MESSAGE_TYPE.RESET_AUDIO_QUEUE\n      });\n\n      // Undo any pause\n      this.paused = false;\n\n      if (!this.updateId) {\n        await this.worker.postMessage({\n          type: WORKER_MESSAGE_TYPE.PLAY\n        });\n      }\n\n      if (!this.renderId && !this.options.headless) {\n        this.renderId = raf(() => {\n          render.call(this);\n        });\n      }\n    };\n\n    return playTask();\n  }\n\n  // Function to pause the game, returns a promise\n  // Will try to wait until the emulation sync is returned, and then will\n  // Allow any actions\n  pause() {\n    const pauseTask = async () => {\n      this.paused = true;\n      if (this.ready && this.options.onPause) {\n        this.options.onPause();\n      }\n\n      // Cancel our update and render loop\n      raf.cancel(this.renderId);\n      this.renderId = false;\n\n      // Cancel any playing audio\n      // Audio played with latency may be still going on here\n      if (!this.options.headless) {\n        WasmBoyAudio.cancelAllAudio(true);\n      }\n\n      if (this.worker) {\n        await this.worker.postMessage({\n          type: WORKER_MESSAGE_TYPE.PAUSE\n        });\n      }\n\n      // Wait a raf to ensure everything is done\n      await new Promise(resolve => {\n        raf(() => {\n          resolve();\n        });\n      });\n    };\n\n    return pauseTask();\n  }\n\n  // Function to reset wasmBoy, with an optional set of options\n  reset(wasmBoyOptions) {\n    const resetTask = async () => {\n      this.config(wasmBoyOptions, this.canvasElement);\n      // Reload the game if one was already loaded\n      if (this.loadedROM) {\n        return this.loadROM(this.loadedROM);\n      }\n    };\n\n    return resetTask();\n  }\n\n  saveState() {\n    const saveStateTask = async () => {\n      await this.pause();\n      const saveState = await WasmBoyMemory.saveState();\n      return saveState;\n    };\n\n    return saveStateTask();\n  }\n\n  // Function to return the save states for the game\n  getSaveStates() {\n    const getSaveStatesTask = async () => {\n      let cartridgeObject = await WasmBoyMemory.getCartridgeObject();\n      if (!cartridgeObject) {\n        return [];\n      } else {\n        return cartridgeObject.saveStates;\n      }\n    };\n\n    return getSaveStatesTask();\n  }\n\n  loadState(saveState) {\n    const loadStateTask = async () => {\n      await this.pause();\n      await WasmBoyMemory.loadState(saveState);\n    };\n\n    return loadStateTask();\n  }\n\n  // Simply returns the FPS we get back from the lib worker\n  getFPS() {\n    return this.fps;\n  }\n\n  // Simply returns our current Core Type\n  getCoreType() {\n    return this.coreType;\n  }\n\n  // Private Function to reset options to default\n  _resetConfig() {\n    // Reset Fps Metering\n    this.fpsTimeStamps = [];\n    this.frameSkipCounter = 0;\n\n    // Configurable Options\n    // Set callbacks to null and not undefined,\n    // For when configs are passed, we will be sure to\n    // add them as keys\n    this.options = {\n      headless: false,\n      disablePauseOnHidden: false,\n      isAudioEnabled: true,\n      gameboyFrameRate: 60,\n      frameSkip: 0,\n      includeBootROM: false,\n      isGbcEnabled: true,\n      audioBatchProcessing: false,\n      graphicsBatchProcessing: false,\n      timersBatchProcessing: false,\n      graphicsDisableScanlineRendering: false,\n      audioAccumulateSamples: false,\n      tileRendering: false,\n      tileCaching: false,\n      updateGraphicsCallback: null,\n      updateAudioCallback: null,\n      saveStateCallback: null,\n      onReady: null,\n      onPlay: null,\n      onPause: null,\n      onLoadedAndStarted: null\n    };\n  }\n\n  // Function to instantiate and set up our workers\n  // This ensures we don't create workers twice\n  _instantiateWorkers() {\n    const instantiateWorkersTask = async () => {\n      if (this.worker) {\n        return;\n      } else {\n        this.worker = await instantiateWorkers();\n        this.worker.addMessageListener(libWorkerOnMessage.bind(this));\n      }\n    };\n\n    return instantiateWorkersTask();\n  }\n}\n\nexport const WasmBoyLib = new WasmBoyLibService();\n","// Build our public lib api\nimport { WasmBoyLib } from './wasmboy/wasmboy';\nimport { WasmBoyAudio } from './audio/audio';\nimport { WasmBoyController } from './controller/controller';\nimport { WasmBoyMemory } from './memory/memory';\nimport { saveCurrentAudioBufferToWav, runWasmExport, getWasmMemorySection, getWasmConstant } from './debug/debug';\n\n// Get our package.json\nimport packageJson from '../package.json';\n\n// Debugging properties prepended with _\n\n// export an object that public exposes parts of the singleton\n// Need to bind to preserve this\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\nexport const WasmBoy = {\n  config: WasmBoyLib.config.bind(WasmBoyLib),\n  getCoreType: WasmBoyLib.getCoreType.bind(WasmBoyLib),\n  getConfig: WasmBoyLib.getConfig.bind(WasmBoyLib),\n  setCanvas: WasmBoyLib.setCanvas.bind(WasmBoyLib),\n  getCanvas: WasmBoyLib.getCanvas.bind(WasmBoyLib),\n  loadROM: WasmBoyLib.loadROM.bind(WasmBoyLib),\n  play: WasmBoyLib.play.bind(WasmBoyLib),\n  pause: WasmBoyLib.pause.bind(WasmBoyLib),\n  reset: WasmBoyLib.reset.bind(WasmBoyLib),\n  isPlaying: () => {\n    return !WasmBoyLib.paused;\n  },\n  isPaused: () => {\n    return WasmBoyLib.paused;\n  },\n  isReady: () => {\n    return WasmBoyLib.ready;\n  },\n  isLoadedAndStarted: () => {\n    return WasmBoyLib.loadedAndStarted;\n  },\n  getVersion: () => {\n    return packageJson.version;\n  },\n  saveState: WasmBoyLib.saveState.bind(WasmBoyLib),\n  getSaveStates: WasmBoyLib.getSaveStates.bind(WasmBoyLib),\n  loadState: WasmBoyLib.loadState.bind(WasmBoyLib),\n  getFPS: WasmBoyLib.getFPS.bind(WasmBoyLib),\n  enableDefaultJoypad: WasmBoyController.enableDefaultJoypad.bind(WasmBoyController),\n  disableDefaultJoypad: WasmBoyController.disableDefaultJoypad.bind(WasmBoyController),\n  setJoypadState: WasmBoyController.setJoypadState.bind(WasmBoyController),\n  addTouchInput: WasmBoyController.addTouchInput.bind(WasmBoyController),\n  removeTouchInput: WasmBoyController.removeTouchInput.bind(WasmBoyController),\n  resumeAudioContext: WasmBoyAudio.resumeAudioContext.bind(WasmBoyAudio),\n  _getCartridgeInfo: WasmBoyMemory.getCartridgeInfo.bind(WasmBoyMemory),\n  _saveCurrentAudioBufferToWav: saveCurrentAudioBufferToWav,\n  _runWasmExport: runWasmExport,\n  _getWasmMemorySection: getWasmMemorySection,\n  _getWasmConstant: getWasmConstant\n};\n"],"names":["WORKER_MESSAGE_TYPE","CONNECT","INSTANTIATE_WASM","CLEAR_MEMORY","CLEAR_MEMORY_DONE","GET_MEMORY","SET_MEMORY","SET_MEMORY_DONE","GET_CONSTANTS","GET_CONSTANTS_DONE","CONFIG","RESET_AUDIO_QUEUE","PLAY","PAUSE","UPDATED","CRASHED","SET_JOYPAD_STATE","AUDIO_LATENCY","RUN_WASM_EXPORT","GET_WASM_MEMORY_SECTION","GET_WASM_CONSTANT","WORKER_ID","LIB","GRAPHICS","MEMORY","CONTROLLER","AUDIO","MEMORY_TYPE","CARTRIDGE_RAM","CARTRIDGE_ROM","CARTRIDGE_HEADER","GAMEBOY_MEMORY","PALETTE_MEMORY","INTERNAL_STATE","getEventData","event","WasmBoyGraphicsService","constructor","undefined","initialize","canvasElement","updateGraphicsCallback","initializeTask","getContext","GAMEBOY_CAMERA_WIDTH","GAMEBOY_CAMERA_HEIGHT","canvasContext","createImageData","width","height","worker","postMessage","type","setWorker","eventData","Uint8ClampedArray","renderFrame","imageDataArrayChanged","imageDataArray","i","length","canvasImageData","WasmBoyGraphics","WasmBoyAudioService","updateAudioCallback","audioSources","resumeAudioContext","audioContext","state","currentTime","resetTimeStretch","latency","audioPlaytime","playAudio","currentFps","allowFastSpeedStretching","numberOfSamples","leftChannelBuffer","rightChannelBuffer","fps","fpsDifference","Math","averageTimeStretchFps","SLOW_TIME_STRETCH_MIN_FPS","reduce","accumulator","currentValue","playbackRate","createBuffer","WASMBOY_SAMPLE_RATE","audioBuffer","copyToChannel","Float32Array","source","createBufferSource","finalNode","responseNode","destination","audioContextCurrentTime","audioContextCurrentTimeWithLatency","DEFAULT_AUDIO_LATENCY_IN_MILLI","playtime","playTime","setTimeout","cancelAllAudio","stopCurrentAudio","_createAudioContextIfNone","window","WasmBoyAudio","promisifyRequest","request","Promise","resolve","reject","onsuccess","request.onsuccess","result","onerror","request.onerror","error","promisifyRequestCall","obj","method","args","p","apply","then","promisifyCursorRequestCall","value","Cursor","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","idbTransaction.oncomplete","idbTransaction.onerror","onabort","idbTransaction.onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","ObjectStore.prototype.createIndex","ObjectStore.prototype.index","IDBObjectStore","objectStore","Transaction.prototype.objectStore","IDBTransaction","createObjectStore","UpgradeDB.prototype.createObjectStore","IDBDatabase","DB.prototype.transaction","funcName","replace","Array","slice","call","callback","nativeObject","getAll","Constructor.prototype.getAll","query","count","instance","items","iterateCursor","push","continue","module","exports","exp","open","name","version","upgradeCallback","indexedDB","onupgradeneeded","request.onupgradeneeded","delete","default","require$$0","keyval","dbPromise","idb","upgradeDB","key","tx","clear","keys","idbKeyval","WASMBOY_SAVE_STATE_SCHEMA","wasmboyMemory","wasmBoyInternalState","wasmBoyPaletteMemory","gameBoyMemory","cartridgeRam","date","isAuto","getSaveState","saveState","internalState","paletteMemory","gameboyMemory","Date","saveStateCallback","_prepareAndStoreAutoSave","saveStateMemoryKeys","localStorage","WASMBOY_UNLOAD_STORAGE","JSON","header","cartridgeHeader","_findAndCommitAutoSave","findAndCommitAutoSaveTask","unloadStorage","unloadStorageObject","Uint8Array","saveCartridgeRam","initializeAutoSave","document","WasmBoyMemoryService","ROM","RAM","headless","_initializeConstants","memoryTypes","getLoadedCartridgeMemoryState","loadedCartridgeMemoryState","clearMemory","loadCartridgeRom","loadTask","workerMemoryObject","passedHeader","passedCartridgeRam","saveCartridgeRamTask","Error","cartridgeObject","loadCartridgeRam","loadCartridgeRamTask","passedSaveState","saveStateTask","loadState","loadStateTask","saverState","getCartridgeObject","getCartridgeInfo","getCartridgeInfoTask","cartridgeInfo","cartridgeRom","String","WasmBoyMemory","keyInputSchema","ID","ACTIVE","KEY_CODE","gamepadInputSchema","BUTTON_ID","JOYSTICK","AXIS_ID","IS_POSITIVE","touchInputSchema","ELEMENT","TYPE","DIRECTION","EVENT_HANDLER","BOUNDING_RECT","keyMapSchema","UP","KEYBOARD","GAMEPAD","TOUCHPAD","RIGHT","DOWN","LEFT","A","B","SELECT","START","getInputId","idGenerator","random","toString","substr","getKeyInput","keyCode","input","assign","getGamepadInput","gamepadButtonId","axisId","axisIsPositive","getTouchInput","element","direction","eventHandler","eventListenerCallback","boundingRect","getBoundingClientRect","addEventListener","Key","BACKSPACE","TAB","RETURN","SHIFT","CTRL","ALT","ESCAPE","SPACE","PAGE_UP","PAGE_DOWN","END","HOME","ARROW_LEFT","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","W","S","D","Q","E","X","Z","SEMI_COLON","SINGLE_QUOTE","BACK_SLASH","NUMPAD_0","NUMPAD_1","NUMPAD_2","NUMPAD_3","NUMPAD_4","NUMPAD_5","NUMPAD_6","NUMPAD_7","NUMPAD_8","NUMPAD_9","keymap","createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","protoProps","staticProps","INPUT_HTML_TAGS","ResponsiveGamepad","ResponsiveGamepadService","TypeError","gamepadAnalogStickDeadZone","keyMapKeys","keyMap","parse","stringify","addedEventListeners","enabled","enable","updateKeyboard","bind","updateTouchpadRect","disable","isEnabled","addTouchInput","keyMapKey","_this","touchInput","updateTouchpad","removeTouchInput","touchInputId","touchInputIndex","some","splice","getState","_this2","updateGamepad","controllerState","keyboardState","keyInput","gamepadState","gamepadInput","touchState","isIgnoringKeyEvents","htmlTag","activeElement","tagName","toLowerCase","keyEvent","_this3","isTargetInputField","isPressed","preventDefault","_loop","gamepad","gamepads","_this4","buttons","buttonId","pressed","axes","navigator","getGamepads","_ret","_this5","resetTouchDpad","_this6","dpadKeys","dpadKey","includes","touches","touch","rectCenterX","right","left","touchX","clientX","touchY","clientY","top","abs","bottom","isLeft","isUp","WasmBoyControllerService","updateController","setJoypadState","setJoypadStateParamsAsArray","enableDefaultJoypad","disableDefaultJoypad","WasmBoyController","idCounter","generateId","randomId","id","getSmartWorkerMessage","message","messageId","workerId","SmartWorker","workerUrl","workerJs","atob","blob","Blob","e","BlobBuilder","Worker","URL","_onMessageHandler","transfer","messageObject","messageIdListener","responseMessage","messageListener","addMessageListener","removeMessageListener","messageListenerIndex","instantiateWorkers","libWorker","wasmboyLibWasmWorkerUrl","graphicsWorker","wasmboyGraphicsWorkerUrl","audioWorker","wasmboyAudioWorkerUrl","controllerWorker","wasmboyControllerWorkerUrl","memoryWorker","wasmboyMemoryWorkerUrl","workerReadyPromises","childWorkers","childWorker","messageChannel","MessageChannel","workerReadyPromise","messagesReceived","ports","UZIP","buf","rUs","rUi","o","out","data","eocd","cnu","csize","usize","nl","el","cl","roff","_readLocal","UZIP._readLocal","cmpr","nlen","elen","file","inflateRaw","UZIP.inflateRaw","inflate","UZIP.inflate","deflate","UZIP.deflate","opts","level","off","crc","deflateRaw","UZIP.deflateRaw","encode","UZIP.encode","tot","wUi","wUs","zpd","cpr","fof","ioff","_noNeed","UZIP._noNeed","fn","ext","indexOf","_writeHeader","UZIP._writeHeader","t","tab","Uint32Array","n","c","k","table","update","len","b","l","UZIP.adler","a","end","eend","readUshort","buff","writeUshort","readUint","writeUint","readASCII","s","writeASCII","pad","readUTF8","ns","decodeURIComponent","writeUTF8","str","strl","ci","code","sizeUTF8","UZIP.F.deflateRaw","opos","lvl","opt","U","goodIndex","putsE","pos","cvrd","dlen","lits","strt","prev","li","lc","bs","ebits","nc","ii","mch","dst","lgi","dgi","UZIP.F._bestMatch","nice","chain","pi","dif","td","tl","dlim","maxd","j","ei","curd","UZIP.F._howLong","oi","UZIP.F._hash","UZIP.F._writeBlock","BFINAL","o0","l0","putsF","MD","MH","numl","numd","T","ML","numh","lset","dset","cstSize","fxdSize","dynSize","BTYPE","ltree","dtree","si","qb","qc","UZIP.F._copyExact","p8","UZIP.F.getTrees","UZIP.F.getSecond","UZIP.F.nonZero","UZIP.F.contSize","tree","hst","UZIP.F._codeTiny","rst","rsl","UZIP.F._lenCodes","nxt","nnxt","prv","lz","zc","UZIP.F._hufTree","MAXL","list","hl","lit","f","l2","i0","i1","i2","r","d","maxl","UZIP.F.setDepth","UZIP.F.restrictDepth","dps","bCost","dbt","od","console","UZIP.F._goodIndex","v","arr","UZIP.F._writeLit","ch","UZIP.F.inflate","F","bitsF","bitsE","decodeTiny","makeCodes","codes2map","get17","noBuf","HLIT","HDIST","dmap","lmap","HCLEN","ml","md","ebs","dcode","dbs","UZIP.F._check","bl","nbuf","UZIP.F._decodeTiny","LL","mx","ll","ni","UZIP.F.makeCodes","MAX_BITS","max_code","bits","bl_count","next_code","UZIP.F.codes2map","map","r15","rest","UZIP.F.revCodes","imb","UZIP.F._putsE","dt","UZIP.F._putsF","UZIP.F._bitsE","UZIP.F._bitsF","UZIP.F._get17","UZIP.F._get25","Uint16Array","ordr","of0","exb","ldef","df0","dxb","ddef","flmap","fltree","fdmap","fdtree","imap","itree","rev15","lhst","dhst","ihst","x","fetchROMAsByteArray","loadOptions","fetchROMAsByteArrayTask","ArrayBuffer","byteArray","getROMFromFileReaderAsByteArray","parseByteArrayAsZip","fetchHeaders","bytes","fetch","fileName","fileReaderByteArray","fileReader","FileReader","fileReader.onload","unzipObject","uzip","foundROM","unzipObjectKeys","lowercaseKey","loadROMToWasmBoy","initPromises","_instantiateWorkers","options","ROMAsByteArray","responses","response","loadROMAndConfigTask","config","audioBatchProcessing","graphicsBatchProcessing","timersBatchProcessing","graphicsDisableScanlineRendering","audioAccumulateSamples","tileRendering","tileCaching","gameboyFrameRate","isAudioEnabled","frameSkip","loadROMTask","pause","onReady","performance","now","module.exports","process","hrtime","getNanoSeconds","nodeLoadTime","hr","moduleLoadTime","upTime","uptime","loadTime","getTime","this","root","global","vendors","raf","caf","suffix","last","queue","frameDuration","_now","next","max","cp","cancelled","round","handle","raf_1","cancel","render","paused","shouldSkipRenderingFrame","frameSkipCounter","writeString","view","offset","string","setUint8","charCodeAt","runWasmExport","exportKey","parameters","WasmBoyLib","export","getWasmMemorySection","start","getWasmConstant","constantKey","constant","libWorkerOnMessage","crashedTask","programCounter","gameboyMemoryConstant","opcode","WasmBoyLibService","disablePauseOnHidden","wasmBoyOptions","configTask","setCanvas","getConfig","setCanvasTask","wasmInstance","wasmByteMemory","getCanvas","loadROM","boundLoadROM","play","playTask","ready","loadedAndStarted","onLoadedAndStarted","onPlay","updateId","renderId","pauseTask","onPause","reset","resetTask","loadedROM","getSaveStates","getSaveStatesTask","getFPS","getCoreType","coreType","_resetConfig","includeBootROM","isGbcEnabled","instantiateWorkersTask","WasmBoy","isPlaying","isPaused","isReady","isLoadedAndStarted","getVersion","packageJson","_getCartridgeInfo","_saveCurrentAudioBufferToWav","saveCurrentAudioBufferToWav","numChannels","buffer","numberOfChannels","sampleRate","format","float32","bitDepth","inputL","inputR","inputIndex","bytesPerSample","blockAlign","samples","DataView","setUint32","setUint16","min","setInt16","setFloat32","url","anchor","_runWasmExport","_getWasmMemorySection","_getWasmConstant"],"mappings":"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"}